{"ast":null,"code":"import { UserGender, UserRole } from './user.interface';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class UserService {\n  constructor() {\n    this.users = [{\n      _id: \"1\",\n      name: \"robin\",\n      emailAddress: \"r.schellius@avans.nl\",\n      role: UserRole.Unknown,\n      gender: UserGender.Unknown,\n      password: \"secret\",\n      isActive: true,\n      profileImgUrl: \"https://randomuser.me/api/portraits/men/62.jpg\"\n    }, {\n      _id: \"2\",\n      name: \"Davide\",\n      emailAddress: \"d.ambesi@avans.nl\",\n      role: UserRole.Unknown,\n      gender: UserGender.Unknown,\n      password: \"secret\",\n      isActive: true,\n      profileImgUrl: \"https://randomuser.me/api/portraits/men/47.jpg\"\n    }];\n  }\n  // Methode om gebruikers op te halen\n  getUsers() {\n    return of(this.users);\n  }\n  // Methode om één gebruiker op te halen op basis van ID\n  getUserById(id) {\n    const user = this.users.find(u => u._id === id);\n    return of(user);\n  }\n  // Methode om een gebruiker te updaten\n  updateUser(updatedUser) {\n    const index = this.users.findIndex(user => user._id === updatedUser._id);\n    if (index !== -1) {\n      this.users[index] = {\n        ...this.users[index],\n        ...updatedUser\n      };\n      console.log('Updated user:', this.users[index]);\n      return of(true);\n    }\n    console.error(`User with ID ${updatedUser._id} not found.`);\n    return of(false);\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["UserGender","UserRole","of","UserService","constructor","users","_id","name","emailAddress","role","Unknown","gender","password","isActive","profileImgUrl","getUsers","getUserById","id","user","find","u","updateUser","updatedUser","index","findIndex","console","log","error","factory","ɵfac","providedIn"],"sources":["C:\\Users\\salim\\Dev\\avans-nx-workshop-2024\\avans-nx-workshop\\libs\\shared\\api\\src\\lib\\models\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IUserInfo, UserGender, UserRole } from './user.interface';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  private users: IUserInfo[] = [\r\n    {\r\n      _id: \"1\",\r\n      name: \"robin\",\r\n      emailAddress: \"r.schellius@avans.nl\",\r\n      role: UserRole.Unknown,\r\n      gender: UserGender.Unknown,\r\n      password: \"secret\",\r\n      isActive: true,\r\n      profileImgUrl: \"https://randomuser.me/api/portraits/men/62.jpg\"\r\n    },\r\n    {\r\n      _id: \"2\",\r\n      name: \"Davide\",\r\n      emailAddress: \"d.ambesi@avans.nl\",\r\n      role: UserRole.Unknown,\r\n      gender: UserGender.Unknown,\r\n      password: \"secret\",\r\n      isActive: true,\r\n      profileImgUrl: \"https://randomuser.me/api/portraits/men/47.jpg\"\r\n    }\r\n  ];\r\n\r\n  // Methode om gebruikers op te halen\r\n  getUsers(): Observable<IUserInfo[]> {\r\n    return of(this.users); \r\n  }\r\n\r\n  // Methode om één gebruiker op te halen op basis van ID\r\n  getUserById(id: string): Observable<IUserInfo | undefined> {\r\n    const user = this.users.find(u => u._id === id);\r\n    return of(user);\r\n  }\r\n\r\n  // Methode om een gebruiker te updaten\r\n  updateUser(updatedUser: Partial<IUserInfo>): Observable<boolean> {\r\n    const index = this.users.findIndex(user => user._id === updatedUser._id);\r\n    if (index !== -1) {\r\n      this.users[index] = { ...this.users[index], ...updatedUser } as IUserInfo;\r\n      console.log('Updated user:', this.users[index]);\r\n      return of(true);\r\n    }\r\n    console.error(`User with ID ${updatedUser._id} not found.`);\r\n    return of(false);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAoBA,UAAU,EAAEC,QAAQ,QAAQ,kBAAkB;AAClE,SAAqBC,EAAE,QAAQ,MAAM;;AAKrC,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAIU,KAAAC,KAAK,GAAgB,CAC3B;MACEC,GAAG,EAAE,GAAG;MACRC,IAAI,EAAE,OAAO;MACbC,YAAY,EAAE,sBAAsB;MACpCC,IAAI,EAAER,QAAQ,CAACS,OAAO;MACtBC,MAAM,EAAEX,UAAU,CAACU,OAAO;MAC1BE,QAAQ,EAAE,QAAQ;MAClBC,QAAQ,EAAE,IAAI;MACdC,aAAa,EAAE;KAChB,EACD;MACER,GAAG,EAAE,GAAG;MACRC,IAAI,EAAE,QAAQ;MACdC,YAAY,EAAE,mBAAmB;MACjCC,IAAI,EAAER,QAAQ,CAACS,OAAO;MACtBC,MAAM,EAAEX,UAAU,CAACU,OAAO;MAC1BE,QAAQ,EAAE,QAAQ;MAClBC,QAAQ,EAAE,IAAI;MACdC,aAAa,EAAE;KAChB,CACF;;EAED;EACAC,QAAQA,CAAA;IACN,OAAOb,EAAE,CAAC,IAAI,CAACG,KAAK,CAAC;EACvB;EAEA;EACAW,WAAWA,CAACC,EAAU;IACpB,MAAMC,IAAI,GAAG,IAAI,CAACb,KAAK,CAACc,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACd,GAAG,KAAKW,EAAE,CAAC;IAC/C,OAAOf,EAAE,CAACgB,IAAI,CAAC;EACjB;EAEA;EACAG,UAAUA,CAACC,WAA+B;IACxC,MAAMC,KAAK,GAAG,IAAI,CAAClB,KAAK,CAACmB,SAAS,CAACN,IAAI,IAAIA,IAAI,CAACZ,GAAG,KAAKgB,WAAW,CAAChB,GAAG,CAAC;IACxE,IAAIiB,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAAClB,KAAK,CAACkB,KAAK,CAAC,GAAG;QAAE,GAAG,IAAI,CAAClB,KAAK,CAACkB,KAAK,CAAC;QAAE,GAAGD;MAAW,CAAe;MACzEG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAACrB,KAAK,CAACkB,KAAK,CAAC,CAAC;MAC/C,OAAOrB,EAAE,CAAC,IAAI,CAAC;;IAEjBuB,OAAO,CAACE,KAAK,CAAC,gBAAgBL,WAAW,CAAChB,GAAG,aAAa,CAAC;IAC3D,OAAOJ,EAAE,CAAC,KAAK,CAAC;EAClB;;;uBA7CWC,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}