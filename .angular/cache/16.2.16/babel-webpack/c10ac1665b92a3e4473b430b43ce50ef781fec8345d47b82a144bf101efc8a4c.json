{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_DATE = 'isDate';\n/**\n * Checks if a given value is a date.\n */\nexport function isDate(value) {\n  return value instanceof Date && !isNaN(value.getTime());\n}\n/**\n * Checks if a value is a date.\n */\nexport function IsDate(validationOptions) {\n  return ValidateBy({\n    name: IS_DATE,\n    validator: {\n      validate: (value, args) => isDate(value),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a Date instance', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","IS_DATE","isDate","value","Date","isNaN","getTime","IsDate","validationOptions","name","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/typechecker/IsDate.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_DATE = 'isDate';\n/**\n * Checks if a given value is a date.\n */\nexport function isDate(value) {\n    return value instanceof Date && !isNaN(value.getTime());\n}\n/**\n * Checks if a value is a date.\n */\nexport function IsDate(validationOptions) {\n    return ValidateBy({\n        name: IS_DATE,\n        validator: {\n            validate: (value, args) => isDate(value),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a Date instance', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAO,MAAMC,OAAO,GAAG,QAAQ;AAC/B;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,KAAK,EAAE;EAC1B,OAAOA,KAAK,YAAYC,IAAI,IAAI,CAACC,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC;AAC3D;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,iBAAiB,EAAE;EACtC,OAAOR,UAAU,CAAC;IACdS,IAAI,EAAER,OAAO;IACbS,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACR,KAAK,EAAES,IAAI,KAAKV,MAAM,CAACC,KAAK,CAAC;MACxCU,cAAc,EAAEd,YAAY,CAACe,UAAU,IAAIA,UAAU,GAAG,mCAAmC,EAAEN,iBAAiB;IAClH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}