{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Reflector = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst uid_1 = require(\"uid\");\n/**\n * Helper class providing Nest reflection capabilities.\n *\n * @see [Reflection](https://docs.nestjs.com/guards#putting-it-all-together)\n *\n * @publicApi\n */\nclass Reflector {\n  static createDecorator(options = {}) {\n    const metadataKey = options.key ?? (0, uid_1.uid)(21);\n    const decoratorFn = metadataValue => (target, key, descriptor) => {\n      const value = options.transform ? options.transform(metadataValue) : metadataValue;\n      (0, common_1.SetMetadata)(metadataKey, value ?? {})(target, key, descriptor);\n    };\n    decoratorFn.KEY = metadataKey;\n    return decoratorFn;\n  }\n  /**\n   * Retrieve metadata for a specified key or decorator for a specified target.\n   *\n   * @example\n   * `const roles = this.reflector.get<string[]>('roles', context.getHandler());`\n   *\n   * @param metadataKey lookup key or decorator for metadata to retrieve\n   * @param target context (decorated object) to retrieve metadata from\n   *\n   */\n  get(metadataKeyOrDecorator, target) {\n    const metadataKey = metadataKeyOrDecorator.KEY ?? metadataKeyOrDecorator;\n    return Reflect.getMetadata(metadataKey, target);\n  }\n  /**\n   * Retrieve metadata for a specified key or decorator for a specified set of targets.\n   *\n   * @param metadataKeyOrDecorator lookup key or decorator for metadata to retrieve\n   * @param targets context (decorated objects) to retrieve metadata from\n   *\n   */\n  getAll(metadataKeyOrDecorator, targets) {\n    return (targets || []).map(target => this.get(metadataKeyOrDecorator, target));\n  }\n  /**\n   * Retrieve metadata for a specified key or decorator for a specified set of targets and merge results.\n   *\n   * @param metadataKeyOrDecorator lookup key for metadata to retrieve\n   * @param targets context (decorated objects) to retrieve metadata from\n   *\n   */\n  getAllAndMerge(metadataKeyOrDecorator, targets) {\n    const metadataCollection = this.getAll(metadataKeyOrDecorator, targets).filter(item => item !== undefined);\n    if ((0, shared_utils_1.isEmpty)(metadataCollection)) {\n      return metadataCollection;\n    }\n    return metadataCollection.reduce((a, b) => {\n      if (Array.isArray(a)) {\n        return a.concat(b);\n      }\n      if ((0, shared_utils_1.isObject)(a) && (0, shared_utils_1.isObject)(b)) {\n        return {\n          ...a,\n          ...b\n        };\n      }\n      return [a, b];\n    });\n  }\n  /**\n   * Retrieve metadata for a specified key or decorator for a specified set of targets and return a first not undefined value.\n   *\n   * @param metadataKeyOrDecorator lookup key or metadata for metadata to retrieve\n   * @param targets context (decorated objects) to retrieve metadata from\n   *\n   */\n  getAllAndOverride(metadataKeyOrDecorator, targets) {\n    for (const target of targets) {\n      const result = this.get(metadataKeyOrDecorator, target);\n      if (result !== undefined) {\n        return result;\n      }\n    }\n    return undefined;\n  }\n}\nexports.Reflector = Reflector;","map":{"version":3,"names":["Object","defineProperty","exports","value","Reflector","common_1","require","shared_utils_1","uid_1","createDecorator","options","metadataKey","key","uid","decoratorFn","metadataValue","target","descriptor","transform","SetMetadata","KEY","get","metadataKeyOrDecorator","Reflect","getMetadata","getAll","targets","map","getAllAndMerge","metadataCollection","filter","item","undefined","isEmpty","reduce","a","b","Array","isArray","concat","isObject","getAllAndOverride","result"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/services/reflector.service.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Reflector = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst uid_1 = require(\"uid\");\n/**\n * Helper class providing Nest reflection capabilities.\n *\n * @see [Reflection](https://docs.nestjs.com/guards#putting-it-all-together)\n *\n * @publicApi\n */\nclass Reflector {\n    static createDecorator(options = {}) {\n        const metadataKey = options.key ?? (0, uid_1.uid)(21);\n        const decoratorFn = (metadataValue) => (target, key, descriptor) => {\n            const value = options.transform\n                ? options.transform(metadataValue)\n                : metadataValue;\n            (0, common_1.SetMetadata)(metadataKey, value ?? {})(target, key, descriptor);\n        };\n        decoratorFn.KEY = metadataKey;\n        return decoratorFn;\n    }\n    /**\n     * Retrieve metadata for a specified key or decorator for a specified target.\n     *\n     * @example\n     * `const roles = this.reflector.get<string[]>('roles', context.getHandler());`\n     *\n     * @param metadataKey lookup key or decorator for metadata to retrieve\n     * @param target context (decorated object) to retrieve metadata from\n     *\n     */\n    get(metadataKeyOrDecorator, target) {\n        const metadataKey = metadataKeyOrDecorator.KEY ??\n            metadataKeyOrDecorator;\n        return Reflect.getMetadata(metadataKey, target);\n    }\n    /**\n     * Retrieve metadata for a specified key or decorator for a specified set of targets.\n     *\n     * @param metadataKeyOrDecorator lookup key or decorator for metadata to retrieve\n     * @param targets context (decorated objects) to retrieve metadata from\n     *\n     */\n    getAll(metadataKeyOrDecorator, targets) {\n        return (targets || []).map(target => this.get(metadataKeyOrDecorator, target));\n    }\n    /**\n     * Retrieve metadata for a specified key or decorator for a specified set of targets and merge results.\n     *\n     * @param metadataKeyOrDecorator lookup key for metadata to retrieve\n     * @param targets context (decorated objects) to retrieve metadata from\n     *\n     */\n    getAllAndMerge(metadataKeyOrDecorator, targets) {\n        const metadataCollection = this.getAll(metadataKeyOrDecorator, targets).filter(item => item !== undefined);\n        if ((0, shared_utils_1.isEmpty)(metadataCollection)) {\n            return metadataCollection;\n        }\n        return metadataCollection.reduce((a, b) => {\n            if (Array.isArray(a)) {\n                return a.concat(b);\n            }\n            if ((0, shared_utils_1.isObject)(a) && (0, shared_utils_1.isObject)(b)) {\n                return {\n                    ...a,\n                    ...b,\n                };\n            }\n            return [a, b];\n        });\n    }\n    /**\n     * Retrieve metadata for a specified key or decorator for a specified set of targets and return a first not undefined value.\n     *\n     * @param metadataKeyOrDecorator lookup key or metadata for metadata to retrieve\n     * @param targets context (decorated objects) to retrieve metadata from\n     *\n     */\n    getAllAndOverride(metadataKeyOrDecorator, targets) {\n        for (const target of targets) {\n            const result = this.get(metadataKeyOrDecorator, target);\n            if (result !== undefined) {\n                return result;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Reflector = Reflector;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B,MAAMC,QAAQ,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC1C,MAAMC,cAAc,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AACnE,MAAME,KAAK,GAAGF,OAAO,CAAC,KAAK,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,SAAS,CAAC;EACZ,OAAOK,eAAeA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjC,MAAMC,WAAW,GAAGD,OAAO,CAACE,GAAG,IAAI,CAAC,CAAC,EAAEJ,KAAK,CAACK,GAAG,EAAE,EAAE,CAAC;IACrD,MAAMC,WAAW,GAAIC,aAAa,IAAK,CAACC,MAAM,EAAEJ,GAAG,EAAEK,UAAU,KAAK;MAChE,MAAMd,KAAK,GAAGO,OAAO,CAACQ,SAAS,GACzBR,OAAO,CAACQ,SAAS,CAACH,aAAa,CAAC,GAChCA,aAAa;MACnB,CAAC,CAAC,EAAEV,QAAQ,CAACc,WAAW,EAAER,WAAW,EAAER,KAAK,IAAI,CAAC,CAAC,CAAC,CAACa,MAAM,EAAEJ,GAAG,EAAEK,UAAU,CAAC;IAChF,CAAC;IACDH,WAAW,CAACM,GAAG,GAAGT,WAAW;IAC7B,OAAOG,WAAW;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,GAAGA,CAACC,sBAAsB,EAAEN,MAAM,EAAE;IAChC,MAAML,WAAW,GAAGW,sBAAsB,CAACF,GAAG,IAC1CE,sBAAsB;IAC1B,OAAOC,OAAO,CAACC,WAAW,CAACb,WAAW,EAAEK,MAAM,CAAC;EACnD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIS,MAAMA,CAACH,sBAAsB,EAAEI,OAAO,EAAE;IACpC,OAAO,CAACA,OAAO,IAAI,EAAE,EAAEC,GAAG,CAACX,MAAM,IAAI,IAAI,CAACK,GAAG,CAACC,sBAAsB,EAAEN,MAAM,CAAC,CAAC;EAClF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIY,cAAcA,CAACN,sBAAsB,EAAEI,OAAO,EAAE;IAC5C,MAAMG,kBAAkB,GAAG,IAAI,CAACJ,MAAM,CAACH,sBAAsB,EAAEI,OAAO,CAAC,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAKC,SAAS,CAAC;IAC1G,IAAI,CAAC,CAAC,EAAEzB,cAAc,CAAC0B,OAAO,EAAEJ,kBAAkB,CAAC,EAAE;MACjD,OAAOA,kBAAkB;IAC7B;IACA,OAAOA,kBAAkB,CAACK,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACvC,IAAIC,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,EAAE;QAClB,OAAOA,CAAC,CAACI,MAAM,CAACH,CAAC,CAAC;MACtB;MACA,IAAI,CAAC,CAAC,EAAE7B,cAAc,CAACiC,QAAQ,EAAEL,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE5B,cAAc,CAACiC,QAAQ,EAAEJ,CAAC,CAAC,EAAE;QACpE,OAAO;UACH,GAAGD,CAAC;UACJ,GAAGC;QACP,CAAC;MACL;MACA,OAAO,CAACD,CAAC,EAAEC,CAAC,CAAC;IACjB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIK,iBAAiBA,CAACnB,sBAAsB,EAAEI,OAAO,EAAE;IAC/C,KAAK,MAAMV,MAAM,IAAIU,OAAO,EAAE;MAC1B,MAAMgB,MAAM,GAAG,IAAI,CAACrB,GAAG,CAACC,sBAAsB,EAAEN,MAAM,CAAC;MACvD,IAAI0B,MAAM,KAAKV,SAAS,EAAE;QACtB,OAAOU,MAAM;MACjB;IACJ;IACA,OAAOV,SAAS;EACpB;AACJ;AACA9B,OAAO,CAACE,SAAS,GAAGA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}