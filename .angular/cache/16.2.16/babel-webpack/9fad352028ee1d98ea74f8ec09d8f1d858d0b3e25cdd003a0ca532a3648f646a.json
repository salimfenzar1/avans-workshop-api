{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DiscoveryService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst uid_1 = require(\"uid\");\nconst modules_container_1 = require(\"../injector/modules-container\");\nconst discoverable_meta_host_collection_1 = require(\"./discoverable-meta-host-collection\");\n/**\n * @publicApi\n */\nlet DiscoveryService = class DiscoveryService {\n  constructor(modulesContainer) {\n    this.modulesContainer = modulesContainer;\n  }\n  /**\n   * Creates a decorator that can be used to decorate classes and methods with metadata.\n   * The decorator will also add the class to the collection of discoverable classes (by metadata key).\n   * Decorated classes can be discovered using the `getProviders` and `getControllers` methods.\n   * @returns A decorator function.\n   */\n  static createDecorator() {\n    const metadataKey = (0, uid_1.uid)(21);\n    const decoratorFn = opts => (target, key, descriptor) => {\n      if (!descriptor) {\n        discoverable_meta_host_collection_1.DiscoverableMetaHostCollection.addClassMetaHostLink(target, metadataKey);\n      }\n      (0, common_1.SetMetadata)(metadataKey, opts ?? {})(target, key, descriptor);\n    };\n    decoratorFn.KEY = metadataKey;\n    return decoratorFn;\n  }\n  /**\n   * Returns an array of instance wrappers (providers).\n   * Depending on the options, the array will contain either all providers or only providers with the specified metadata key.\n   * @param options Discovery options.\n   * @param modules A list of modules to filter by.\n   * @returns An array of instance wrappers (providers).\n   */\n  getProviders(options = {}, modules = this.getModules(options)) {\n    if ('metadataKey' in options) {\n      const providers = discoverable_meta_host_collection_1.DiscoverableMetaHostCollection.getProvidersByMetaKey(this.modulesContainer, options.metadataKey);\n      return Array.from(providers);\n    }\n    const providers = modules.map(item => [...item.providers.values()]);\n    return (0, common_1.flatten)(providers);\n  }\n  /**\n   * Returns an array of instance wrappers (controllers).\n   * Depending on the options, the array will contain either all controllers or only controllers with the specified metadata key.\n   * @param options Discovery options.\n   * @param modules A list of modules to filter by.\n   * @returns An array of instance wrappers (controllers).\n   */\n  getControllers(options = {}, modules = this.getModules(options)) {\n    if ('metadataKey' in options) {\n      const controllers = discoverable_meta_host_collection_1.DiscoverableMetaHostCollection.getControllersByMetaKey(this.modulesContainer, options.metadataKey);\n      return Array.from(controllers);\n    }\n    const controllers = modules.map(item => [...item.controllers.values()]);\n    return (0, common_1.flatten)(controllers);\n  }\n  /**\n   * Retrieves metadata from the specified instance wrapper.\n   * @param decorator The decorator to retrieve metadata of.\n   * @param instanceWrapper Reference to the instance wrapper.\n   * @param methodKey An optional method key to retrieve metadata from.\n   * @returns Discovered metadata.\n   */\n  getMetadataByDecorator(decorator, instanceWrapper, methodKey) {\n    if (methodKey) {\n      return Reflect.getMetadata(decorator.KEY, instanceWrapper.instance[methodKey]);\n    }\n    const clsRef = instanceWrapper.instance?.constructor ?? instanceWrapper.metatype;\n    return Reflect.getMetadata(decorator.KEY, clsRef);\n  }\n  /**\n   * Returns a list of modules to be used for discovery.\n   */\n  getModules(options = {}) {\n    const includeInOpts = ('include' in options);\n    if (!includeInOpts) {\n      const moduleRefs = [...this.modulesContainer.values()];\n      return moduleRefs;\n    }\n    const whitelisted = this.includeWhitelisted(options.include);\n    return whitelisted;\n  }\n  includeWhitelisted(include) {\n    const moduleRefs = [...this.modulesContainer.values()];\n    return moduleRefs.filter(({\n      metatype\n    }) => include.some(item => item === metatype));\n  }\n};\nexports.DiscoveryService = DiscoveryService;\nexports.DiscoveryService = DiscoveryService = tslib_1.__decorate([(0, common_1.Injectable)(), tslib_1.__metadata(\"design:paramtypes\", [modules_container_1.ModulesContainer])], DiscoveryService);","map":{"version":3,"names":["Object","defineProperty","exports","value","DiscoveryService","tslib_1","require","common_1","uid_1","modules_container_1","discoverable_meta_host_collection_1","constructor","modulesContainer","createDecorator","metadataKey","uid","decoratorFn","opts","target","key","descriptor","DiscoverableMetaHostCollection","addClassMetaHostLink","SetMetadata","KEY","getProviders","options","modules","getModules","providers","getProvidersByMetaKey","Array","from","map","item","values","flatten","getControllers","controllers","getControllersByMetaKey","getMetadataByDecorator","decorator","instanceWrapper","methodKey","Reflect","getMetadata","instance","clsRef","metatype","includeInOpts","moduleRefs","whitelisted","includeWhitelisted","include","filter","some","__decorate","Injectable","__metadata","ModulesContainer"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/discovery/discovery-service.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiscoveryService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst common_1 = require(\"@nestjs/common\");\nconst uid_1 = require(\"uid\");\nconst modules_container_1 = require(\"../injector/modules-container\");\nconst discoverable_meta_host_collection_1 = require(\"./discoverable-meta-host-collection\");\n/**\n * @publicApi\n */\nlet DiscoveryService = class DiscoveryService {\n    constructor(modulesContainer) {\n        this.modulesContainer = modulesContainer;\n    }\n    /**\n     * Creates a decorator that can be used to decorate classes and methods with metadata.\n     * The decorator will also add the class to the collection of discoverable classes (by metadata key).\n     * Decorated classes can be discovered using the `getProviders` and `getControllers` methods.\n     * @returns A decorator function.\n     */\n    static createDecorator() {\n        const metadataKey = (0, uid_1.uid)(21);\n        const decoratorFn = (opts) => (target, key, descriptor) => {\n            if (!descriptor) {\n                discoverable_meta_host_collection_1.DiscoverableMetaHostCollection.addClassMetaHostLink(target, metadataKey);\n            }\n            (0, common_1.SetMetadata)(metadataKey, opts ?? {})(target, key, descriptor);\n        };\n        decoratorFn.KEY = metadataKey;\n        return decoratorFn;\n    }\n    /**\n     * Returns an array of instance wrappers (providers).\n     * Depending on the options, the array will contain either all providers or only providers with the specified metadata key.\n     * @param options Discovery options.\n     * @param modules A list of modules to filter by.\n     * @returns An array of instance wrappers (providers).\n     */\n    getProviders(options = {}, modules = this.getModules(options)) {\n        if ('metadataKey' in options) {\n            const providers = discoverable_meta_host_collection_1.DiscoverableMetaHostCollection.getProvidersByMetaKey(this.modulesContainer, options.metadataKey);\n            return Array.from(providers);\n        }\n        const providers = modules.map(item => [...item.providers.values()]);\n        return (0, common_1.flatten)(providers);\n    }\n    /**\n     * Returns an array of instance wrappers (controllers).\n     * Depending on the options, the array will contain either all controllers or only controllers with the specified metadata key.\n     * @param options Discovery options.\n     * @param modules A list of modules to filter by.\n     * @returns An array of instance wrappers (controllers).\n     */\n    getControllers(options = {}, modules = this.getModules(options)) {\n        if ('metadataKey' in options) {\n            const controllers = discoverable_meta_host_collection_1.DiscoverableMetaHostCollection.getControllersByMetaKey(this.modulesContainer, options.metadataKey);\n            return Array.from(controllers);\n        }\n        const controllers = modules.map(item => [...item.controllers.values()]);\n        return (0, common_1.flatten)(controllers);\n    }\n    /**\n     * Retrieves metadata from the specified instance wrapper.\n     * @param decorator The decorator to retrieve metadata of.\n     * @param instanceWrapper Reference to the instance wrapper.\n     * @param methodKey An optional method key to retrieve metadata from.\n     * @returns Discovered metadata.\n     */\n    getMetadataByDecorator(decorator, instanceWrapper, methodKey) {\n        if (methodKey) {\n            return Reflect.getMetadata(decorator.KEY, instanceWrapper.instance[methodKey]);\n        }\n        const clsRef = instanceWrapper.instance?.constructor ?? instanceWrapper.metatype;\n        return Reflect.getMetadata(decorator.KEY, clsRef);\n    }\n    /**\n     * Returns a list of modules to be used for discovery.\n     */\n    getModules(options = {}) {\n        const includeInOpts = 'include' in options;\n        if (!includeInOpts) {\n            const moduleRefs = [...this.modulesContainer.values()];\n            return moduleRefs;\n        }\n        const whitelisted = this.includeWhitelisted(options.include);\n        return whitelisted;\n    }\n    includeWhitelisted(include) {\n        const moduleRefs = [...this.modulesContainer.values()];\n        return moduleRefs.filter(({ metatype }) => include.some(item => item === metatype));\n    }\n};\nexports.DiscoveryService = DiscoveryService;\nexports.DiscoveryService = DiscoveryService = tslib_1.__decorate([\n    (0, common_1.Injectable)(),\n    tslib_1.__metadata(\"design:paramtypes\", [modules_container_1.ModulesContainer])\n], DiscoveryService);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}