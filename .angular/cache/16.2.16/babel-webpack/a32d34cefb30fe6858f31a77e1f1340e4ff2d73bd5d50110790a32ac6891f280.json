{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RoutesResolver = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst logger_service_1 = require(\"@nestjs/common/services/logger.service\");\nconst messages_1 = require(\"../helpers/messages\");\nconst metadata_scanner_1 = require(\"../metadata-scanner\");\nconst route_path_factory_1 = require(\"./route-path-factory\");\nconst router_exception_filters_1 = require(\"./router-exception-filters\");\nconst router_explorer_1 = require(\"./router-explorer\");\nconst router_proxy_1 = require(\"./router-proxy\");\nclass RoutesResolver {\n  constructor(container, applicationConfig, injector, graphInspector) {\n    this.container = container;\n    this.applicationConfig = applicationConfig;\n    this.injector = injector;\n    this.logger = new logger_service_1.Logger(RoutesResolver.name, {\n      timestamp: true\n    });\n    this.routerProxy = new router_proxy_1.RouterProxy();\n    const httpAdapterRef = container.getHttpAdapterRef();\n    this.routerExceptionsFilter = new router_exception_filters_1.RouterExceptionFilters(container, applicationConfig, httpAdapterRef);\n    this.routePathFactory = new route_path_factory_1.RoutePathFactory(this.applicationConfig);\n    const metadataScanner = new metadata_scanner_1.MetadataScanner();\n    this.routerExplorer = new router_explorer_1.RouterExplorer(metadataScanner, this.container, this.injector, this.routerProxy, this.routerExceptionsFilter, this.applicationConfig, this.routePathFactory, graphInspector);\n  }\n  resolve(applicationRef, globalPrefix) {\n    const modules = this.container.getModules();\n    modules.forEach(({\n      controllers,\n      metatype\n    }, moduleName) => {\n      const modulePath = this.getModulePathMetadata(metatype);\n      this.registerRouters(controllers, moduleName, globalPrefix, modulePath, applicationRef);\n    });\n  }\n  registerRouters(routes, moduleName, globalPrefix, modulePath, applicationRef) {\n    routes.forEach(instanceWrapper => {\n      const {\n        metatype\n      } = instanceWrapper;\n      const host = this.getHostMetadata(metatype);\n      const routerPaths = this.routerExplorer.extractRouterPath(metatype);\n      const controllerVersion = this.getVersionMetadata(metatype);\n      const controllerName = metatype.name;\n      routerPaths.forEach(path => {\n        const pathsToLog = this.routePathFactory.create({\n          ctrlPath: path,\n          modulePath,\n          globalPrefix\n        });\n        if (!controllerVersion) {\n          pathsToLog.forEach(path => {\n            const logMessage = (0, messages_1.CONTROLLER_MAPPING_MESSAGE)(controllerName, path);\n            this.logger.log(logMessage);\n          });\n        } else {\n          pathsToLog.forEach(path => {\n            const logMessage = (0, messages_1.VERSIONED_CONTROLLER_MAPPING_MESSAGE)(controllerName, path, controllerVersion);\n            this.logger.log(logMessage);\n          });\n        }\n        const versioningOptions = this.applicationConfig.getVersioning();\n        const routePathMetadata = {\n          ctrlPath: path,\n          modulePath,\n          globalPrefix,\n          controllerVersion,\n          versioningOptions\n        };\n        this.routerExplorer.explore(instanceWrapper, moduleName, applicationRef, host, routePathMetadata);\n      });\n    });\n  }\n  registerNotFoundHandler() {\n    const applicationRef = this.container.getHttpAdapterRef();\n    const callback = (req, res) => {\n      const method = applicationRef.getRequestMethod(req);\n      const url = applicationRef.getRequestUrl(req);\n      throw new common_1.NotFoundException(`Cannot ${method} ${url}`);\n    };\n    const handler = this.routerExceptionsFilter.create({}, callback, undefined);\n    const proxy = this.routerProxy.createProxy(callback, handler);\n    applicationRef.setNotFoundHandler && applicationRef.setNotFoundHandler(proxy, this.applicationConfig.getGlobalPrefix());\n  }\n  registerExceptionHandler() {\n    const callback = (err, req, res, next) => {\n      throw this.mapExternalException(err);\n    };\n    const handler = this.routerExceptionsFilter.create({}, callback, undefined);\n    const proxy = this.routerProxy.createExceptionLayerProxy(callback, handler);\n    const applicationRef = this.container.getHttpAdapterRef();\n    applicationRef.setErrorHandler && applicationRef.setErrorHandler(proxy, this.applicationConfig.getGlobalPrefix());\n  }\n  mapExternalException(err) {\n    switch (true) {\n      // SyntaxError is thrown by Express body-parser when given invalid JSON (#422, #430)\n      // URIError is thrown by Express when given a path parameter with an invalid percentage\n      // encoding, e.g. '%FF' (#8915)\n      case err instanceof SyntaxError || err instanceof URIError:\n        return new common_1.BadRequestException(err.message);\n      default:\n        return err;\n    }\n  }\n  getModulePathMetadata(metatype) {\n    const modulesContainer = this.container.getModules();\n    const modulePath = Reflect.getMetadata(constants_1.MODULE_PATH + modulesContainer.applicationId, metatype);\n    return modulePath ?? Reflect.getMetadata(constants_1.MODULE_PATH, metatype);\n  }\n  getHostMetadata(metatype) {\n    return Reflect.getMetadata(constants_1.HOST_METADATA, metatype);\n  }\n  getVersionMetadata(metatype) {\n    const versioningConfig = this.applicationConfig.getVersioning();\n    if (versioningConfig) {\n      return Reflect.getMetadata(constants_1.VERSION_METADATA, metatype) ?? versioningConfig.defaultVersion;\n    }\n  }\n}\nexports.RoutesResolver = RoutesResolver;","map":{"version":3,"names":["Object","defineProperty","exports","value","RoutesResolver","common_1","require","constants_1","logger_service_1","messages_1","metadata_scanner_1","route_path_factory_1","router_exception_filters_1","router_explorer_1","router_proxy_1","constructor","container","applicationConfig","injector","graphInspector","logger","Logger","name","timestamp","routerProxy","RouterProxy","httpAdapterRef","getHttpAdapterRef","routerExceptionsFilter","RouterExceptionFilters","routePathFactory","RoutePathFactory","metadataScanner","MetadataScanner","routerExplorer","RouterExplorer","resolve","applicationRef","globalPrefix","modules","getModules","forEach","controllers","metatype","moduleName","modulePath","getModulePathMetadata","registerRouters","routes","instanceWrapper","host","getHostMetadata","routerPaths","extractRouterPath","controllerVersion","getVersionMetadata","controllerName","path","pathsToLog","create","ctrlPath","logMessage","CONTROLLER_MAPPING_MESSAGE","log","VERSIONED_CONTROLLER_MAPPING_MESSAGE","versioningOptions","getVersioning","routePathMetadata","explore","registerNotFoundHandler","callback","req","res","method","getRequestMethod","url","getRequestUrl","NotFoundException","handler","undefined","proxy","createProxy","setNotFoundHandler","getGlobalPrefix","registerExceptionHandler","err","next","mapExternalException","createExceptionLayerProxy","setErrorHandler","SyntaxError","URIError","BadRequestException","message","modulesContainer","Reflect","getMetadata","MODULE_PATH","applicationId","HOST_METADATA","versioningConfig","VERSION_METADATA","defaultVersion"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/router/routes-resolver.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RoutesResolver = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst logger_service_1 = require(\"@nestjs/common/services/logger.service\");\nconst messages_1 = require(\"../helpers/messages\");\nconst metadata_scanner_1 = require(\"../metadata-scanner\");\nconst route_path_factory_1 = require(\"./route-path-factory\");\nconst router_exception_filters_1 = require(\"./router-exception-filters\");\nconst router_explorer_1 = require(\"./router-explorer\");\nconst router_proxy_1 = require(\"./router-proxy\");\nclass RoutesResolver {\n    constructor(container, applicationConfig, injector, graphInspector) {\n        this.container = container;\n        this.applicationConfig = applicationConfig;\n        this.injector = injector;\n        this.logger = new logger_service_1.Logger(RoutesResolver.name, {\n            timestamp: true,\n        });\n        this.routerProxy = new router_proxy_1.RouterProxy();\n        const httpAdapterRef = container.getHttpAdapterRef();\n        this.routerExceptionsFilter = new router_exception_filters_1.RouterExceptionFilters(container, applicationConfig, httpAdapterRef);\n        this.routePathFactory = new route_path_factory_1.RoutePathFactory(this.applicationConfig);\n        const metadataScanner = new metadata_scanner_1.MetadataScanner();\n        this.routerExplorer = new router_explorer_1.RouterExplorer(metadataScanner, this.container, this.injector, this.routerProxy, this.routerExceptionsFilter, this.applicationConfig, this.routePathFactory, graphInspector);\n    }\n    resolve(applicationRef, globalPrefix) {\n        const modules = this.container.getModules();\n        modules.forEach(({ controllers, metatype }, moduleName) => {\n            const modulePath = this.getModulePathMetadata(metatype);\n            this.registerRouters(controllers, moduleName, globalPrefix, modulePath, applicationRef);\n        });\n    }\n    registerRouters(routes, moduleName, globalPrefix, modulePath, applicationRef) {\n        routes.forEach(instanceWrapper => {\n            const { metatype } = instanceWrapper;\n            const host = this.getHostMetadata(metatype);\n            const routerPaths = this.routerExplorer.extractRouterPath(metatype);\n            const controllerVersion = this.getVersionMetadata(metatype);\n            const controllerName = metatype.name;\n            routerPaths.forEach(path => {\n                const pathsToLog = this.routePathFactory.create({\n                    ctrlPath: path,\n                    modulePath,\n                    globalPrefix,\n                });\n                if (!controllerVersion) {\n                    pathsToLog.forEach(path => {\n                        const logMessage = (0, messages_1.CONTROLLER_MAPPING_MESSAGE)(controllerName, path);\n                        this.logger.log(logMessage);\n                    });\n                }\n                else {\n                    pathsToLog.forEach(path => {\n                        const logMessage = (0, messages_1.VERSIONED_CONTROLLER_MAPPING_MESSAGE)(controllerName, path, controllerVersion);\n                        this.logger.log(logMessage);\n                    });\n                }\n                const versioningOptions = this.applicationConfig.getVersioning();\n                const routePathMetadata = {\n                    ctrlPath: path,\n                    modulePath,\n                    globalPrefix,\n                    controllerVersion,\n                    versioningOptions,\n                };\n                this.routerExplorer.explore(instanceWrapper, moduleName, applicationRef, host, routePathMetadata);\n            });\n        });\n    }\n    registerNotFoundHandler() {\n        const applicationRef = this.container.getHttpAdapterRef();\n        const callback = (req, res) => {\n            const method = applicationRef.getRequestMethod(req);\n            const url = applicationRef.getRequestUrl(req);\n            throw new common_1.NotFoundException(`Cannot ${method} ${url}`);\n        };\n        const handler = this.routerExceptionsFilter.create({}, callback, undefined);\n        const proxy = this.routerProxy.createProxy(callback, handler);\n        applicationRef.setNotFoundHandler &&\n            applicationRef.setNotFoundHandler(proxy, this.applicationConfig.getGlobalPrefix());\n    }\n    registerExceptionHandler() {\n        const callback = (err, req, res, next) => {\n            throw this.mapExternalException(err);\n        };\n        const handler = this.routerExceptionsFilter.create({}, callback, undefined);\n        const proxy = this.routerProxy.createExceptionLayerProxy(callback, handler);\n        const applicationRef = this.container.getHttpAdapterRef();\n        applicationRef.setErrorHandler &&\n            applicationRef.setErrorHandler(proxy, this.applicationConfig.getGlobalPrefix());\n    }\n    mapExternalException(err) {\n        switch (true) {\n            // SyntaxError is thrown by Express body-parser when given invalid JSON (#422, #430)\n            // URIError is thrown by Express when given a path parameter with an invalid percentage\n            // encoding, e.g. '%FF' (#8915)\n            case err instanceof SyntaxError || err instanceof URIError:\n                return new common_1.BadRequestException(err.message);\n            default:\n                return err;\n        }\n    }\n    getModulePathMetadata(metatype) {\n        const modulesContainer = this.container.getModules();\n        const modulePath = Reflect.getMetadata(constants_1.MODULE_PATH + modulesContainer.applicationId, metatype);\n        return modulePath ?? Reflect.getMetadata(constants_1.MODULE_PATH, metatype);\n    }\n    getHostMetadata(metatype) {\n        return Reflect.getMetadata(constants_1.HOST_METADATA, metatype);\n    }\n    getVersionMetadata(metatype) {\n        const versioningConfig = this.applicationConfig.getVersioning();\n        if (versioningConfig) {\n            return (Reflect.getMetadata(constants_1.VERSION_METADATA, metatype) ??\n                versioningConfig.defaultVersion);\n        }\n    }\n}\nexports.RoutesResolver = RoutesResolver;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}