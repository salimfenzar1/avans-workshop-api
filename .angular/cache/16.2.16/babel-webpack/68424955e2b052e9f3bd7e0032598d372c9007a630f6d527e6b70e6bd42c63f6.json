{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_INT = 'isInt';\n/**\n * Checks if value is an integer.\n */\nexport function isInt(val) {\n  return typeof val === 'number' && Number.isInteger(val);\n}\n/**\n * Checks if value is an integer.\n */\nexport function IsInt(validationOptions) {\n  return ValidateBy({\n    name: IS_INT,\n    validator: {\n      validate: (value, args) => isInt(value),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an integer number', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","IS_INT","isInt","val","Number","isInteger","IsInt","validationOptions","name","validator","validate","value","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/typechecker/IsInt.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_INT = 'isInt';\n/**\n * Checks if value is an integer.\n */\nexport function isInt(val) {\n    return typeof val === 'number' && Number.isInteger(val);\n}\n/**\n * Checks if value is an integer.\n */\nexport function IsInt(validationOptions) {\n    return ValidateBy({\n        name: IS_INT,\n        validator: {\n            validate: (value, args) => isInt(value),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an integer number', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAO,MAAMC,MAAM,GAAG,OAAO;AAC7B;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACC,GAAG,EAAE;EACvB,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIC,MAAM,CAACC,SAAS,CAACF,GAAG,CAAC;AAC3D;AACA;AACA;AACA;AACA,OAAO,SAASG,KAAKA,CAACC,iBAAiB,EAAE;EACrC,OAAOP,UAAU,CAAC;IACdQ,IAAI,EAAEP,MAAM;IACZQ,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,IAAI,KAAKV,KAAK,CAACS,KAAK,CAAC;MACvCE,cAAc,EAAEd,YAAY,CAACe,UAAU,IAAIA,UAAU,GAAG,qCAAqC,EAAEP,iBAAiB;IACpH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}