{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst concat_1 = require(\"./concat\");\nconst filter_1 = require(\"./filter\");\nconst flatten_1 = require(\"./flatten\");\nconst map_1 = require(\"./map\");\nconst slice_1 = require(\"./slice\");\nconst utils_1 = require(\"./utils\");\nconst zip_1 = require(\"./zip\");\nclass IteratorWithOperators {\n  /**\n   * @param source Iterator to wrap\n   */\n  constructor(source) {\n    this.source = source;\n  }\n  /**\n   * Returns a `{ value, done }` object that adheres to the Iterator protocol\n   */\n  next() {\n    return this.source.next();\n  }\n  /**\n   * The presence of this method makes the Iterator itself Iterable.\n   * This makes it possible to pass it to `for of` and Iterable-accepting functions like `Array.from()`\n   */\n  [Symbol.iterator]() {\n    return this;\n  }\n  /**\n   * Returns a new Iterator by running each element thru iteratee\n   */\n  map(iteratee) {\n    return new IteratorWithOperators(new map_1.MapIterator(this.source, iteratee));\n  }\n  filter(predicate) {\n    return new IteratorWithOperators(new filter_1.FilterIterator(this.source, predicate));\n  }\n  /**\n   * Returns a new Iterator concatenating the Iterator with an additional Iterator or Iterable\n   */\n  concat(collection) {\n    return new IteratorWithOperators(new concat_1.ConcatIterator([this.source, utils_1.toIterator(collection)]));\n  }\n  /**\n   * Returns a new Iterator that emits slice of the source with n elements taken from the beginning\n   *\n   * @param limit The number of elements to take.\n   */\n  take(limit) {\n    return new IteratorWithOperators(new slice_1.SliceIterator(this.source, 0, limit + 1));\n  }\n  /**\n   * Returns a new Iterator that emits slice of the source with n elements dropped from the beginning\n   *\n   * @param n The number of elements to drop.\n   */\n  drop(n) {\n    return new IteratorWithOperators(new slice_1.SliceIterator(this.source, n, Infinity));\n  }\n  /**\n   * Returns a new Iterator that emits a slice of the source\n   *\n   * @param {number} start Zero-based positive start index, inclusive\n   * @param {number} end Zero-based positive end index, exclusive, defaults to end of iterator\n   */\n  slice(start, end = Infinity) {\n    return new IteratorWithOperators(new slice_1.SliceIterator(this.source, start, end));\n  }\n  /**\n   * Returns a new Iterator that flattens items emitted by the Iterator a single level deep\n   */\n  flatten() {\n    return new IteratorWithOperators(new flatten_1.FlattenIterator(this.source));\n  }\n  reduce(iteratee, accumulator) {\n    let result;\n    if (accumulator === undefined) {\n      result = this.source.next();\n      if (result.done) {\n        throw new TypeError('Reduce of empty Iterator with no initial value');\n      }\n      accumulator = result.value;\n    }\n    while (true) {\n      result = this.source.next();\n      if (result.done) {\n        break;\n      }\n      accumulator = iteratee(accumulator, result.value);\n    }\n    return accumulator;\n  }\n  find(predicate) {\n    let result;\n    while (true) {\n      result = this.source.next();\n      if (result.done) {\n        return undefined;\n      }\n      if (predicate(result.value)) {\n        return result.value;\n      }\n    }\n  }\n  /**\n   * Iterates and checks if `value` is emitted by the Iterator\n   *\n   * @param value The value to search\n   */\n  includes(value) {\n    let result;\n    do {\n      result = this.source.next();\n      if (!result.done && result.value === value) {\n        return true;\n      }\n    } while (!result.done);\n    return false;\n  }\n  /**\n   * Iterates and checks if `predicate` returns truthy for any element emitted by the Iterator\n   */\n  some(predicate) {\n    let result;\n    do {\n      result = this.source.next();\n      if (!result.done && predicate(result.value)) {\n        return true;\n      }\n    } while (!result.done);\n    return false;\n  }\n  /**\n   * Iterates and checks if `predicate` returns truthy for all elements emitted by the Iterator\n   */\n  every(predicate) {\n    let result;\n    do {\n      result = this.source.next();\n      if (!result.done && !predicate(result.value)) {\n        return false;\n      }\n    } while (!result.done);\n    return true;\n  }\n  /**\n   * Iterates and invokes `iteratee` for every element emitted by the Iterator\n   */\n  forEach(iteratee) {\n    let result;\n    while (true) {\n      result = this.source.next();\n      if (result.done) {\n        break;\n      }\n      iteratee(result.value);\n    }\n  }\n  /**\n   * Iterates and joins all elements emitted by the Iterator together as a string separated by an optional separator\n   */\n  join(separator = ',') {\n    let joined = '';\n    let result;\n    while (true) {\n      result = this.source.next();\n      if (result.done) {\n        break;\n      }\n      joined += separator + result.value;\n    }\n    return joined.substr(separator.length);\n  }\n  /**\n   * Iterates and returns all items emitted by the Iterator as an array.\n   * Equivalent to passing the Iterator to `Array.from()`\n   */\n  toArray() {\n    return Array.from(this);\n  }\n  /**\n   * Iterates and returns all items emitted by the Iterator as an ES6 Set.\n   * Equivalent to passing the Iterator to `new Set()`\n   */\n  toSet() {\n    const set = new Set();\n    while (true) {\n      const {\n        value,\n        done\n      } = this.next();\n      if (done) {\n        return set;\n      }\n      set.add(value);\n    }\n  }\n  /**\n   * Iterates and returns all `[key, value]` paris emitted by the Iterator as an ES6 Map.\n   * Equivalent to passing the Iterator to `new Map()`\n   */\n  toMap() {\n    return new Map(this);\n  }\n}\nexports.IteratorWithOperators = IteratorWithOperators;\n/**\n * Creates an Iterator with advanced chainable operator methods for any Iterable or Iterator\n */\nfunction iterate(collection) {\n  return new IteratorWithOperators(utils_1.toIterator(collection));\n}\nexports.iterate = iterate;\n/**\n * Creates an Iterator that emits pairs of values from the two passed Iterators\n */\nfunction zip(a, b) {\n  return new IteratorWithOperators(new zip_1.ZipIterator(utils_1.toIterator(a), utils_1.toIterator(b)));\n}\nexports.zip = zip;\nexports.default = iterate;","map":{"version":3,"names":["Object","defineProperty","exports","value","concat_1","require","filter_1","flatten_1","map_1","slice_1","utils_1","zip_1","IteratorWithOperators","constructor","source","next","Symbol","iterator","map","iteratee","MapIterator","filter","predicate","FilterIterator","concat","collection","ConcatIterator","toIterator","take","limit","SliceIterator","drop","n","Infinity","slice","start","end","flatten","FlattenIterator","reduce","accumulator","result","undefined","done","TypeError","find","includes","some","every","forEach","join","separator","joined","substr","length","toArray","Array","from","toSet","set","Set","add","toMap","Map","iterate","zip","a","b","ZipIterator","default"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/iterare/lib/iterate.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst concat_1 = require(\"./concat\");\nconst filter_1 = require(\"./filter\");\nconst flatten_1 = require(\"./flatten\");\nconst map_1 = require(\"./map\");\nconst slice_1 = require(\"./slice\");\nconst utils_1 = require(\"./utils\");\nconst zip_1 = require(\"./zip\");\nclass IteratorWithOperators {\n    /**\n     * @param source Iterator to wrap\n     */\n    constructor(source) {\n        this.source = source;\n    }\n    /**\n     * Returns a `{ value, done }` object that adheres to the Iterator protocol\n     */\n    next() {\n        return this.source.next();\n    }\n    /**\n     * The presence of this method makes the Iterator itself Iterable.\n     * This makes it possible to pass it to `for of` and Iterable-accepting functions like `Array.from()`\n     */\n    [Symbol.iterator]() {\n        return this;\n    }\n    /**\n     * Returns a new Iterator by running each element thru iteratee\n     */\n    map(iteratee) {\n        return new IteratorWithOperators(new map_1.MapIterator(this.source, iteratee));\n    }\n    filter(predicate) {\n        return new IteratorWithOperators(new filter_1.FilterIterator(this.source, predicate));\n    }\n    /**\n     * Returns a new Iterator concatenating the Iterator with an additional Iterator or Iterable\n     */\n    concat(collection) {\n        return new IteratorWithOperators(new concat_1.ConcatIterator([this.source, utils_1.toIterator(collection)]));\n    }\n    /**\n     * Returns a new Iterator that emits slice of the source with n elements taken from the beginning\n     *\n     * @param limit The number of elements to take.\n     */\n    take(limit) {\n        return new IteratorWithOperators(new slice_1.SliceIterator(this.source, 0, limit + 1));\n    }\n    /**\n     * Returns a new Iterator that emits slice of the source with n elements dropped from the beginning\n     *\n     * @param n The number of elements to drop.\n     */\n    drop(n) {\n        return new IteratorWithOperators(new slice_1.SliceIterator(this.source, n, Infinity));\n    }\n    /**\n     * Returns a new Iterator that emits a slice of the source\n     *\n     * @param {number} start Zero-based positive start index, inclusive\n     * @param {number} end Zero-based positive end index, exclusive, defaults to end of iterator\n     */\n    slice(start, end = Infinity) {\n        return new IteratorWithOperators(new slice_1.SliceIterator(this.source, start, end));\n    }\n    /**\n     * Returns a new Iterator that flattens items emitted by the Iterator a single level deep\n     */\n    flatten() {\n        return new IteratorWithOperators(new flatten_1.FlattenIterator(this.source));\n    }\n    reduce(iteratee, accumulator) {\n        let result;\n        if (accumulator === undefined) {\n            result = this.source.next();\n            if (result.done) {\n                throw new TypeError('Reduce of empty Iterator with no initial value');\n            }\n            accumulator = result.value;\n        }\n        while (true) {\n            result = this.source.next();\n            if (result.done) {\n                break;\n            }\n            accumulator = iteratee(accumulator, result.value);\n        }\n        return accumulator;\n    }\n    find(predicate) {\n        let result;\n        while (true) {\n            result = this.source.next();\n            if (result.done) {\n                return undefined;\n            }\n            if (predicate(result.value)) {\n                return result.value;\n            }\n        }\n    }\n    /**\n     * Iterates and checks if `value` is emitted by the Iterator\n     *\n     * @param value The value to search\n     */\n    includes(value) {\n        let result;\n        do {\n            result = this.source.next();\n            if (!result.done && result.value === value) {\n                return true;\n            }\n        } while (!result.done);\n        return false;\n    }\n    /**\n     * Iterates and checks if `predicate` returns truthy for any element emitted by the Iterator\n     */\n    some(predicate) {\n        let result;\n        do {\n            result = this.source.next();\n            if (!result.done && predicate(result.value)) {\n                return true;\n            }\n        } while (!result.done);\n        return false;\n    }\n    /**\n     * Iterates and checks if `predicate` returns truthy for all elements emitted by the Iterator\n     */\n    every(predicate) {\n        let result;\n        do {\n            result = this.source.next();\n            if (!result.done && !predicate(result.value)) {\n                return false;\n            }\n        } while (!result.done);\n        return true;\n    }\n    /**\n     * Iterates and invokes `iteratee` for every element emitted by the Iterator\n     */\n    forEach(iteratee) {\n        let result;\n        while (true) {\n            result = this.source.next();\n            if (result.done) {\n                break;\n            }\n            iteratee(result.value);\n        }\n    }\n    /**\n     * Iterates and joins all elements emitted by the Iterator together as a string separated by an optional separator\n     */\n    join(separator = ',') {\n        let joined = '';\n        let result;\n        while (true) {\n            result = this.source.next();\n            if (result.done) {\n                break;\n            }\n            joined += separator + result.value;\n        }\n        return joined.substr(separator.length);\n    }\n    /**\n     * Iterates and returns all items emitted by the Iterator as an array.\n     * Equivalent to passing the Iterator to `Array.from()`\n     */\n    toArray() {\n        return Array.from(this);\n    }\n    /**\n     * Iterates and returns all items emitted by the Iterator as an ES6 Set.\n     * Equivalent to passing the Iterator to `new Set()`\n     */\n    toSet() {\n        const set = new Set();\n        while (true) {\n            const { value, done } = this.next();\n            if (done) {\n                return set;\n            }\n            set.add(value);\n        }\n    }\n    /**\n     * Iterates and returns all `[key, value]` paris emitted by the Iterator as an ES6 Map.\n     * Equivalent to passing the Iterator to `new Map()`\n     */\n    toMap() {\n        return new Map(this);\n    }\n}\nexports.IteratorWithOperators = IteratorWithOperators;\n/**\n * Creates an Iterator with advanced chainable operator methods for any Iterable or Iterator\n */\nfunction iterate(collection) {\n    return new IteratorWithOperators(utils_1.toIterator(collection));\n}\nexports.iterate = iterate;\n/**\n * Creates an Iterator that emits pairs of values from the two passed Iterators\n */\nfunction zip(a, b) {\n    return new IteratorWithOperators(new zip_1.ZipIterator(utils_1.toIterator(a), utils_1.toIterator(b)));\n}\nexports.zip = zip;\nexports.default = iterate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}