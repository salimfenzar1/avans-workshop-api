{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isEthereumAddressValidator from 'validator/lib/isEthereumAddress';\nexport const IS_ETHEREUM_ADDRESS = 'isEthereumAddress';\n/**\n * Check if the string is an Ethereum address using basic regex. Does not validate address checksums.\n * If given value is not a string, then it returns false.\n */\nexport function isEthereumAddress(value) {\n  return typeof value === 'string' && isEthereumAddressValidator(value);\n}\n/**\n * Check if the string is an Ethereum address using basic regex. Does not validate address checksums.\n * If given value is not a string, then it returns false.\n */\nexport function IsEthereumAddress(validationOptions) {\n  return ValidateBy({\n    name: IS_ETHEREUM_ADDRESS,\n    validator: {\n      validate: (value, args) => isEthereumAddress(value),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an Ethereum address', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isEthereumAddressValidator","IS_ETHEREUM_ADDRESS","isEthereumAddress","value","IsEthereumAddress","validationOptions","name","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsEthereumAddress.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isEthereumAddressValidator from 'validator/lib/isEthereumAddress';\nexport const IS_ETHEREUM_ADDRESS = 'isEthereumAddress';\n/**\n * Check if the string is an Ethereum address using basic regex. Does not validate address checksums.\n * If given value is not a string, then it returns false.\n */\nexport function isEthereumAddress(value) {\n    return typeof value === 'string' && isEthereumAddressValidator(value);\n}\n/**\n * Check if the string is an Ethereum address using basic regex. Does not validate address checksums.\n * If given value is not a string, then it returns false.\n */\nexport function IsEthereumAddress(validationOptions) {\n    return ValidateBy({\n        name: IS_ETHEREUM_ADDRESS,\n        validator: {\n            validate: (value, args) => isEthereumAddress(value),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an Ethereum address', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,0BAA0B,MAAM,iCAAiC;AACxE,OAAO,MAAMC,mBAAmB,GAAG,mBAAmB;AACtD;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EACrC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIH,0BAA0B,CAACG,KAAK,CAAC;AACzE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,iBAAiB,EAAE;EACjD,OAAON,UAAU,CAAC;IACdO,IAAI,EAAEL,mBAAmB;IACzBM,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACL,KAAK,EAAEM,IAAI,KAAKP,iBAAiB,CAACC,KAAK,CAAC;MACnDO,cAAc,EAAEZ,YAAY,CAACa,UAAU,IAAIA,UAAU,GAAG,uCAAuC,EAAEN,iBAAiB;IACtH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}