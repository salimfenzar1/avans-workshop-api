{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Module = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst random_string_generator_util_1 = require(\"@nestjs/common/utils/random-string-generator.util\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst application_config_1 = require(\"../application-config\");\nconst exceptions_1 = require(\"../errors/exceptions\");\nconst context_id_factory_1 = require(\"../helpers/context-id-factory\");\nconst get_class_scope_1 = require(\"../helpers/get-class-scope\");\nconst is_durable_1 = require(\"../helpers/is-durable\");\nconst uuid_factory_1 = require(\"../inspector/uuid-factory\");\nconst constants_2 = require(\"./constants\");\nconst instance_wrapper_1 = require(\"./instance-wrapper\");\nconst module_ref_1 = require(\"./module-ref\");\nclass Module {\n  constructor(_metatype, container) {\n    this._metatype = _metatype;\n    this.container = container;\n    this._imports = new Set();\n    this._providers = new Map();\n    this._injectables = new Map();\n    this._middlewares = new Map();\n    this._controllers = new Map();\n    this._entryProviderKeys = new Set();\n    this._exports = new Set();\n    this._distance = 0;\n    this._initOnPreview = false;\n    this._isGlobal = false;\n    this.addCoreProviders();\n    this._id = this.generateUuid();\n  }\n  get id() {\n    return this._id;\n  }\n  get token() {\n    return this._token;\n  }\n  set token(token) {\n    this._token = token;\n  }\n  get name() {\n    return this.metatype.name;\n  }\n  get isGlobal() {\n    return this._isGlobal;\n  }\n  set isGlobal(global) {\n    this._isGlobal = global;\n  }\n  get initOnPreview() {\n    return this._initOnPreview;\n  }\n  set initOnPreview(initOnPreview) {\n    this._initOnPreview = initOnPreview;\n  }\n  get providers() {\n    return this._providers;\n  }\n  get middlewares() {\n    return this._middlewares;\n  }\n  get imports() {\n    return this._imports;\n  }\n  get injectables() {\n    return this._injectables;\n  }\n  get controllers() {\n    return this._controllers;\n  }\n  get entryProviders() {\n    return Array.from(this._entryProviderKeys).map(token => this.providers.get(token));\n  }\n  get exports() {\n    return this._exports;\n  }\n  get instance() {\n    if (!this._providers.has(this._metatype)) {\n      throw new exceptions_1.RuntimeException();\n    }\n    const module = this._providers.get(this._metatype);\n    return module.instance;\n  }\n  get metatype() {\n    return this._metatype;\n  }\n  get distance() {\n    return this._distance;\n  }\n  set distance(value) {\n    this._distance = value;\n  }\n  addCoreProviders() {\n    this.addModuleAsProvider();\n    this.addModuleRef();\n    this.addApplicationConfig();\n  }\n  addModuleRef() {\n    const moduleRef = this.createModuleReferenceType();\n    this._providers.set(module_ref_1.ModuleRef, new instance_wrapper_1.InstanceWrapper({\n      token: module_ref_1.ModuleRef,\n      name: module_ref_1.ModuleRef.name,\n      metatype: module_ref_1.ModuleRef,\n      isResolved: true,\n      instance: new moduleRef(),\n      host: this\n    }));\n  }\n  addModuleAsProvider() {\n    this._providers.set(this._metatype, new instance_wrapper_1.InstanceWrapper({\n      token: this._metatype,\n      name: this._metatype.name,\n      metatype: this._metatype,\n      isResolved: false,\n      instance: null,\n      host: this\n    }));\n  }\n  addApplicationConfig() {\n    this._providers.set(application_config_1.ApplicationConfig, new instance_wrapper_1.InstanceWrapper({\n      token: application_config_1.ApplicationConfig,\n      name: application_config_1.ApplicationConfig.name,\n      isResolved: true,\n      instance: this.container.applicationConfig,\n      host: this\n    }));\n  }\n  addInjectable(injectable, enhancerSubtype, host) {\n    if (this.isCustomProvider(injectable)) {\n      return this.addCustomProvider(injectable, this._injectables, enhancerSubtype);\n    }\n    let instanceWrapper = this.injectables.get(injectable);\n    if (!instanceWrapper) {\n      instanceWrapper = new instance_wrapper_1.InstanceWrapper({\n        token: injectable,\n        name: injectable.name,\n        metatype: injectable,\n        instance: null,\n        isResolved: false,\n        scope: (0, get_class_scope_1.getClassScope)(injectable),\n        durable: (0, is_durable_1.isDurable)(injectable),\n        subtype: enhancerSubtype,\n        host: this\n      });\n      this._injectables.set(injectable, instanceWrapper);\n    }\n    if (host) {\n      const hostWrapper = this._controllers.get(host) || this._providers.get(host);\n      hostWrapper && hostWrapper.addEnhancerMetadata(instanceWrapper);\n    }\n    return instanceWrapper;\n  }\n  addProvider(provider, enhancerSubtype) {\n    if (this.isCustomProvider(provider)) {\n      if (this.isEntryProvider(provider.provide)) {\n        this._entryProviderKeys.add(provider.provide);\n      }\n      return this.addCustomProvider(provider, this._providers, enhancerSubtype);\n    }\n    this._providers.set(provider, new instance_wrapper_1.InstanceWrapper({\n      token: provider,\n      name: provider.name,\n      metatype: provider,\n      instance: null,\n      isResolved: false,\n      scope: (0, get_class_scope_1.getClassScope)(provider),\n      durable: (0, is_durable_1.isDurable)(provider),\n      host: this\n    }));\n    if (this.isEntryProvider(provider)) {\n      this._entryProviderKeys.add(provider);\n    }\n    return provider;\n  }\n  isCustomProvider(provider) {\n    return !(0, shared_utils_1.isNil)(provider.provide);\n  }\n  addCustomProvider(provider, collection, enhancerSubtype) {\n    if (this.isCustomClass(provider)) {\n      this.addCustomClass(provider, collection, enhancerSubtype);\n    } else if (this.isCustomValue(provider)) {\n      this.addCustomValue(provider, collection, enhancerSubtype);\n    } else if (this.isCustomFactory(provider)) {\n      this.addCustomFactory(provider, collection, enhancerSubtype);\n    } else if (this.isCustomUseExisting(provider)) {\n      this.addCustomUseExisting(provider, collection, enhancerSubtype);\n    }\n    return provider.provide;\n  }\n  isCustomClass(provider) {\n    return !(0, shared_utils_1.isUndefined)(provider.useClass);\n  }\n  isCustomValue(provider) {\n    return (0, shared_utils_1.isObject)(provider) && Object.prototype.hasOwnProperty.call(provider, 'useValue');\n  }\n  isCustomFactory(provider) {\n    return !(0, shared_utils_1.isUndefined)(provider.useFactory);\n  }\n  isCustomUseExisting(provider) {\n    return !(0, shared_utils_1.isUndefined)(provider.useExisting);\n  }\n  isDynamicModule(exported) {\n    return exported && exported.module;\n  }\n  addCustomClass(provider, collection, enhancerSubtype) {\n    let {\n      scope,\n      durable\n    } = provider;\n    const {\n      useClass\n    } = provider;\n    if ((0, shared_utils_1.isUndefined)(scope)) {\n      scope = (0, get_class_scope_1.getClassScope)(useClass);\n    }\n    if ((0, shared_utils_1.isUndefined)(durable)) {\n      durable = (0, is_durable_1.isDurable)(useClass);\n    }\n    const token = provider.provide;\n    collection.set(token, new instance_wrapper_1.InstanceWrapper({\n      token,\n      name: useClass?.name || useClass,\n      metatype: useClass,\n      instance: null,\n      isResolved: false,\n      scope,\n      durable,\n      host: this,\n      subtype: enhancerSubtype\n    }));\n  }\n  addCustomValue(provider, collection, enhancerSubtype) {\n    const {\n      useValue: value,\n      provide: providerToken\n    } = provider;\n    collection.set(providerToken, new instance_wrapper_1.InstanceWrapper({\n      token: providerToken,\n      name: providerToken?.name || providerToken,\n      metatype: null,\n      instance: value,\n      isResolved: true,\n      async: value instanceof Promise,\n      host: this,\n      subtype: enhancerSubtype\n    }));\n  }\n  addCustomFactory(provider, collection, enhancerSubtype) {\n    const {\n      useFactory: factory,\n      inject,\n      scope,\n      durable,\n      provide: providerToken\n    } = provider;\n    collection.set(providerToken, new instance_wrapper_1.InstanceWrapper({\n      token: providerToken,\n      name: providerToken?.name || providerToken,\n      metatype: factory,\n      instance: null,\n      isResolved: false,\n      inject: inject || [],\n      scope,\n      durable,\n      host: this,\n      subtype: enhancerSubtype\n    }));\n  }\n  addCustomUseExisting(provider, collection, enhancerSubtype) {\n    const {\n      useExisting,\n      provide: providerToken\n    } = provider;\n    collection.set(providerToken, new instance_wrapper_1.InstanceWrapper({\n      token: providerToken,\n      name: providerToken?.name || providerToken,\n      metatype: instance => instance,\n      instance: null,\n      isResolved: false,\n      inject: [useExisting],\n      host: this,\n      isAlias: true,\n      subtype: enhancerSubtype\n    }));\n  }\n  addExportedProvider(provider) {\n    const addExportedUnit = token => this._exports.add(this.validateExportedProvider(token));\n    if (this.isCustomProvider(provider)) {\n      return this.addCustomExportedProvider(provider);\n    } else if ((0, shared_utils_1.isString)(provider) || (0, shared_utils_1.isSymbol)(provider)) {\n      return addExportedUnit(provider);\n    } else if (this.isDynamicModule(provider)) {\n      const {\n        module: moduleClassRef\n      } = provider;\n      return addExportedUnit(moduleClassRef);\n    }\n    addExportedUnit(provider);\n  }\n  addCustomExportedProvider(provider) {\n    const provide = provider.provide;\n    if ((0, shared_utils_1.isString)(provide) || (0, shared_utils_1.isSymbol)(provide)) {\n      return this._exports.add(this.validateExportedProvider(provide));\n    }\n    this._exports.add(this.validateExportedProvider(provide));\n  }\n  validateExportedProvider(token) {\n    if (this._providers.has(token)) {\n      return token;\n    }\n    const imports = (0, iterare_1.iterate)(this._imports.values()).filter(item => !!item).map(({\n      metatype\n    }) => metatype).filter(metatype => !!metatype).toArray();\n    if (!imports.includes(token)) {\n      const {\n        name\n      } = this.metatype;\n      const providerName = (0, shared_utils_1.isFunction)(token) ? token.name : token;\n      throw new exceptions_1.UnknownExportException(providerName, name);\n    }\n    return token;\n  }\n  addController(controller) {\n    this._controllers.set(controller, new instance_wrapper_1.InstanceWrapper({\n      token: controller,\n      name: controller.name,\n      metatype: controller,\n      instance: null,\n      isResolved: false,\n      scope: (0, get_class_scope_1.getClassScope)(controller),\n      durable: (0, is_durable_1.isDurable)(controller),\n      host: this\n    }));\n    this.assignControllerUniqueId(controller);\n  }\n  assignControllerUniqueId(controller) {\n    Object.defineProperty(controller, constants_2.CONTROLLER_ID_KEY, {\n      enumerable: false,\n      writable: false,\n      configurable: true,\n      value: (0, random_string_generator_util_1.randomStringGenerator)()\n    });\n  }\n  addImport(moduleRef) {\n    this._imports.add(moduleRef);\n  }\n  /**\n   * @deprecated\n   */\n  addRelatedModule(module) {\n    this._imports.add(module);\n  }\n  replace(toReplace, options) {\n    if (options.isProvider && this.hasProvider(toReplace)) {\n      const originalProvider = this._providers.get(toReplace);\n      return originalProvider.mergeWith({\n        provide: toReplace,\n        ...options\n      });\n    } else if (!options.isProvider && this.hasInjectable(toReplace)) {\n      const originalInjectable = this._injectables.get(toReplace);\n      return originalInjectable.mergeWith({\n        provide: toReplace,\n        ...options\n      });\n    }\n  }\n  hasProvider(token) {\n    return this._providers.has(token);\n  }\n  hasInjectable(token) {\n    return this._injectables.has(token);\n  }\n  getProviderByKey(name) {\n    return this._providers.get(name);\n  }\n  getProviderById(id) {\n    return Array.from(this._providers.values()).find(item => item.id === id);\n  }\n  getControllerById(id) {\n    return Array.from(this._controllers.values()).find(item => item.id === id);\n  }\n  getInjectableById(id) {\n    return Array.from(this._injectables.values()).find(item => item.id === id);\n  }\n  getMiddlewareById(id) {\n    return Array.from(this._middlewares.values()).find(item => item.id === id);\n  }\n  getNonAliasProviders() {\n    return [...this._providers].filter(([_, wrapper]) => !wrapper.isAlias);\n  }\n  createModuleReferenceType() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    return class extends module_ref_1.ModuleRef {\n      constructor() {\n        super(self.container);\n      }\n      get(typeOrToken, options = {}) {\n        options.strict ??= true;\n        options.each ??= false;\n        return this.find(typeOrToken, options.strict ? {\n          moduleId: self.id,\n          each: options.each\n        } : options);\n      }\n      resolve(typeOrToken, contextId = (0, context_id_factory_1.createContextId)(), options = {}) {\n        options.strict ??= true;\n        options.each ??= false;\n        return this.resolvePerContext(typeOrToken, self, contextId, options);\n      }\n      create(type, contextId) {\n        var _this = this;\n        return _asyncToGenerator(function* () {\n          if (!(type && (0, shared_utils_1.isFunction)(type) && type.prototype)) {\n            throw new exceptions_1.InvalidClassException(type);\n          }\n          return _this.instantiateClass(type, self, contextId);\n        })();\n      }\n    };\n  }\n  isEntryProvider(metatype) {\n    return typeof metatype === 'function' ? !!Reflect.getMetadata(constants_1.ENTRY_PROVIDER_WATERMARK, metatype) : false;\n  }\n  generateUuid() {\n    const prefix = 'M_';\n    const key = this.name?.toString() ?? this.token?.toString();\n    return key ? uuid_factory_1.UuidFactory.get(`${prefix}_${key}`) : (0, random_string_generator_util_1.randomStringGenerator)();\n  }\n}\nexports.Module = Module;","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","Module","constants_1","random_string_generator_util_1","shared_utils_1","iterare_1","application_config_1","exceptions_1","context_id_factory_1","get_class_scope_1","is_durable_1","uuid_factory_1","constants_2","instance_wrapper_1","module_ref_1","constructor","_metatype","container","_imports","Set","_providers","Map","_injectables","_middlewares","_controllers","_entryProviderKeys","_exports","_distance","_initOnPreview","_isGlobal","addCoreProviders","_id","generateUuid","id","token","_token","name","metatype","isGlobal","global","initOnPreview","providers","middlewares","imports","injectables","controllers","entryProviders","Array","from","map","get","instance","has","RuntimeException","module","distance","addModuleAsProvider","addModuleRef","addApplicationConfig","moduleRef","createModuleReferenceType","set","ModuleRef","InstanceWrapper","isResolved","host","ApplicationConfig","applicationConfig","addInjectable","injectable","enhancerSubtype","isCustomProvider","addCustomProvider","instanceWrapper","scope","getClassScope","durable","isDurable","subtype","hostWrapper","addEnhancerMetadata","addProvider","provider","isEntryProvider","provide","add","isNil","collection","isCustomClass","addCustomClass","isCustomValue","addCustomValue","isCustomFactory","addCustomFactory","isCustomUseExisting","addCustomUseExisting","isUndefined","useClass","isObject","prototype","hasOwnProperty","call","useFactory","useExisting","isDynamicModule","exported","useValue","providerToken","async","Promise","factory","inject","isAlias","addExportedProvider","addExportedUnit","validateExportedProvider","addCustomExportedProvider","isString","isSymbol","moduleClassRef","iterate","values","filter","item","toArray","includes","providerName","isFunction","UnknownExportException","addController","controller","assignControllerUniqueId","CONTROLLER_ID_KEY","enumerable","writable","configurable","randomStringGenerator","addImport","addRelatedModule","replace","toReplace","options","isProvider","hasProvider","originalProvider","mergeWith","hasInjectable","originalInjectable","getProviderByKey","getProviderById","find","getControllerById","getInjectableById","getMiddlewareById","getNonAliasProviders","_","wrapper","self","typeOrToken","strict","each","moduleId","resolve","contextId","createContextId","resolvePerContext","create","type","_this","InvalidClassException","instantiateClass","Reflect","getMetadata","ENTRY_PROVIDER_WATERMARK","prefix","key","toString","UuidFactory"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/injector/module.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Module = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst random_string_generator_util_1 = require(\"@nestjs/common/utils/random-string-generator.util\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst application_config_1 = require(\"../application-config\");\nconst exceptions_1 = require(\"../errors/exceptions\");\nconst context_id_factory_1 = require(\"../helpers/context-id-factory\");\nconst get_class_scope_1 = require(\"../helpers/get-class-scope\");\nconst is_durable_1 = require(\"../helpers/is-durable\");\nconst uuid_factory_1 = require(\"../inspector/uuid-factory\");\nconst constants_2 = require(\"./constants\");\nconst instance_wrapper_1 = require(\"./instance-wrapper\");\nconst module_ref_1 = require(\"./module-ref\");\nclass Module {\n    constructor(_metatype, container) {\n        this._metatype = _metatype;\n        this.container = container;\n        this._imports = new Set();\n        this._providers = new Map();\n        this._injectables = new Map();\n        this._middlewares = new Map();\n        this._controllers = new Map();\n        this._entryProviderKeys = new Set();\n        this._exports = new Set();\n        this._distance = 0;\n        this._initOnPreview = false;\n        this._isGlobal = false;\n        this.addCoreProviders();\n        this._id = this.generateUuid();\n    }\n    get id() {\n        return this._id;\n    }\n    get token() {\n        return this._token;\n    }\n    set token(token) {\n        this._token = token;\n    }\n    get name() {\n        return this.metatype.name;\n    }\n    get isGlobal() {\n        return this._isGlobal;\n    }\n    set isGlobal(global) {\n        this._isGlobal = global;\n    }\n    get initOnPreview() {\n        return this._initOnPreview;\n    }\n    set initOnPreview(initOnPreview) {\n        this._initOnPreview = initOnPreview;\n    }\n    get providers() {\n        return this._providers;\n    }\n    get middlewares() {\n        return this._middlewares;\n    }\n    get imports() {\n        return this._imports;\n    }\n    get injectables() {\n        return this._injectables;\n    }\n    get controllers() {\n        return this._controllers;\n    }\n    get entryProviders() {\n        return Array.from(this._entryProviderKeys).map(token => this.providers.get(token));\n    }\n    get exports() {\n        return this._exports;\n    }\n    get instance() {\n        if (!this._providers.has(this._metatype)) {\n            throw new exceptions_1.RuntimeException();\n        }\n        const module = this._providers.get(this._metatype);\n        return module.instance;\n    }\n    get metatype() {\n        return this._metatype;\n    }\n    get distance() {\n        return this._distance;\n    }\n    set distance(value) {\n        this._distance = value;\n    }\n    addCoreProviders() {\n        this.addModuleAsProvider();\n        this.addModuleRef();\n        this.addApplicationConfig();\n    }\n    addModuleRef() {\n        const moduleRef = this.createModuleReferenceType();\n        this._providers.set(module_ref_1.ModuleRef, new instance_wrapper_1.InstanceWrapper({\n            token: module_ref_1.ModuleRef,\n            name: module_ref_1.ModuleRef.name,\n            metatype: module_ref_1.ModuleRef,\n            isResolved: true,\n            instance: new moduleRef(),\n            host: this,\n        }));\n    }\n    addModuleAsProvider() {\n        this._providers.set(this._metatype, new instance_wrapper_1.InstanceWrapper({\n            token: this._metatype,\n            name: this._metatype.name,\n            metatype: this._metatype,\n            isResolved: false,\n            instance: null,\n            host: this,\n        }));\n    }\n    addApplicationConfig() {\n        this._providers.set(application_config_1.ApplicationConfig, new instance_wrapper_1.InstanceWrapper({\n            token: application_config_1.ApplicationConfig,\n            name: application_config_1.ApplicationConfig.name,\n            isResolved: true,\n            instance: this.container.applicationConfig,\n            host: this,\n        }));\n    }\n    addInjectable(injectable, enhancerSubtype, host) {\n        if (this.isCustomProvider(injectable)) {\n            return this.addCustomProvider(injectable, this._injectables, enhancerSubtype);\n        }\n        let instanceWrapper = this.injectables.get(injectable);\n        if (!instanceWrapper) {\n            instanceWrapper = new instance_wrapper_1.InstanceWrapper({\n                token: injectable,\n                name: injectable.name,\n                metatype: injectable,\n                instance: null,\n                isResolved: false,\n                scope: (0, get_class_scope_1.getClassScope)(injectable),\n                durable: (0, is_durable_1.isDurable)(injectable),\n                subtype: enhancerSubtype,\n                host: this,\n            });\n            this._injectables.set(injectable, instanceWrapper);\n        }\n        if (host) {\n            const hostWrapper = this._controllers.get(host) || this._providers.get(host);\n            hostWrapper && hostWrapper.addEnhancerMetadata(instanceWrapper);\n        }\n        return instanceWrapper;\n    }\n    addProvider(provider, enhancerSubtype) {\n        if (this.isCustomProvider(provider)) {\n            if (this.isEntryProvider(provider.provide)) {\n                this._entryProviderKeys.add(provider.provide);\n            }\n            return this.addCustomProvider(provider, this._providers, enhancerSubtype);\n        }\n        this._providers.set(provider, new instance_wrapper_1.InstanceWrapper({\n            token: provider,\n            name: provider.name,\n            metatype: provider,\n            instance: null,\n            isResolved: false,\n            scope: (0, get_class_scope_1.getClassScope)(provider),\n            durable: (0, is_durable_1.isDurable)(provider),\n            host: this,\n        }));\n        if (this.isEntryProvider(provider)) {\n            this._entryProviderKeys.add(provider);\n        }\n        return provider;\n    }\n    isCustomProvider(provider) {\n        return !(0, shared_utils_1.isNil)(provider.provide);\n    }\n    addCustomProvider(provider, collection, enhancerSubtype) {\n        if (this.isCustomClass(provider)) {\n            this.addCustomClass(provider, collection, enhancerSubtype);\n        }\n        else if (this.isCustomValue(provider)) {\n            this.addCustomValue(provider, collection, enhancerSubtype);\n        }\n        else if (this.isCustomFactory(provider)) {\n            this.addCustomFactory(provider, collection, enhancerSubtype);\n        }\n        else if (this.isCustomUseExisting(provider)) {\n            this.addCustomUseExisting(provider, collection, enhancerSubtype);\n        }\n        return provider.provide;\n    }\n    isCustomClass(provider) {\n        return !(0, shared_utils_1.isUndefined)(provider.useClass);\n    }\n    isCustomValue(provider) {\n        return ((0, shared_utils_1.isObject)(provider) &&\n            Object.prototype.hasOwnProperty.call(provider, 'useValue'));\n    }\n    isCustomFactory(provider) {\n        return !(0, shared_utils_1.isUndefined)(provider.useFactory);\n    }\n    isCustomUseExisting(provider) {\n        return !(0, shared_utils_1.isUndefined)(provider.useExisting);\n    }\n    isDynamicModule(exported) {\n        return exported && exported.module;\n    }\n    addCustomClass(provider, collection, enhancerSubtype) {\n        let { scope, durable } = provider;\n        const { useClass } = provider;\n        if ((0, shared_utils_1.isUndefined)(scope)) {\n            scope = (0, get_class_scope_1.getClassScope)(useClass);\n        }\n        if ((0, shared_utils_1.isUndefined)(durable)) {\n            durable = (0, is_durable_1.isDurable)(useClass);\n        }\n        const token = provider.provide;\n        collection.set(token, new instance_wrapper_1.InstanceWrapper({\n            token,\n            name: useClass?.name || useClass,\n            metatype: useClass,\n            instance: null,\n            isResolved: false,\n            scope,\n            durable,\n            host: this,\n            subtype: enhancerSubtype,\n        }));\n    }\n    addCustomValue(provider, collection, enhancerSubtype) {\n        const { useValue: value, provide: providerToken } = provider;\n        collection.set(providerToken, new instance_wrapper_1.InstanceWrapper({\n            token: providerToken,\n            name: providerToken?.name || providerToken,\n            metatype: null,\n            instance: value,\n            isResolved: true,\n            async: value instanceof Promise,\n            host: this,\n            subtype: enhancerSubtype,\n        }));\n    }\n    addCustomFactory(provider, collection, enhancerSubtype) {\n        const { useFactory: factory, inject, scope, durable, provide: providerToken, } = provider;\n        collection.set(providerToken, new instance_wrapper_1.InstanceWrapper({\n            token: providerToken,\n            name: providerToken?.name || providerToken,\n            metatype: factory,\n            instance: null,\n            isResolved: false,\n            inject: inject || [],\n            scope,\n            durable,\n            host: this,\n            subtype: enhancerSubtype,\n        }));\n    }\n    addCustomUseExisting(provider, collection, enhancerSubtype) {\n        const { useExisting, provide: providerToken } = provider;\n        collection.set(providerToken, new instance_wrapper_1.InstanceWrapper({\n            token: providerToken,\n            name: providerToken?.name || providerToken,\n            metatype: (instance => instance),\n            instance: null,\n            isResolved: false,\n            inject: [useExisting],\n            host: this,\n            isAlias: true,\n            subtype: enhancerSubtype,\n        }));\n    }\n    addExportedProvider(provider) {\n        const addExportedUnit = (token) => this._exports.add(this.validateExportedProvider(token));\n        if (this.isCustomProvider(provider)) {\n            return this.addCustomExportedProvider(provider);\n        }\n        else if ((0, shared_utils_1.isString)(provider) || (0, shared_utils_1.isSymbol)(provider)) {\n            return addExportedUnit(provider);\n        }\n        else if (this.isDynamicModule(provider)) {\n            const { module: moduleClassRef } = provider;\n            return addExportedUnit(moduleClassRef);\n        }\n        addExportedUnit(provider);\n    }\n    addCustomExportedProvider(provider) {\n        const provide = provider.provide;\n        if ((0, shared_utils_1.isString)(provide) || (0, shared_utils_1.isSymbol)(provide)) {\n            return this._exports.add(this.validateExportedProvider(provide));\n        }\n        this._exports.add(this.validateExportedProvider(provide));\n    }\n    validateExportedProvider(token) {\n        if (this._providers.has(token)) {\n            return token;\n        }\n        const imports = (0, iterare_1.iterate)(this._imports.values())\n            .filter(item => !!item)\n            .map(({ metatype }) => metatype)\n            .filter(metatype => !!metatype)\n            .toArray();\n        if (!imports.includes(token)) {\n            const { name } = this.metatype;\n            const providerName = (0, shared_utils_1.isFunction)(token) ? token.name : token;\n            throw new exceptions_1.UnknownExportException(providerName, name);\n        }\n        return token;\n    }\n    addController(controller) {\n        this._controllers.set(controller, new instance_wrapper_1.InstanceWrapper({\n            token: controller,\n            name: controller.name,\n            metatype: controller,\n            instance: null,\n            isResolved: false,\n            scope: (0, get_class_scope_1.getClassScope)(controller),\n            durable: (0, is_durable_1.isDurable)(controller),\n            host: this,\n        }));\n        this.assignControllerUniqueId(controller);\n    }\n    assignControllerUniqueId(controller) {\n        Object.defineProperty(controller, constants_2.CONTROLLER_ID_KEY, {\n            enumerable: false,\n            writable: false,\n            configurable: true,\n            value: (0, random_string_generator_util_1.randomStringGenerator)(),\n        });\n    }\n    addImport(moduleRef) {\n        this._imports.add(moduleRef);\n    }\n    /**\n     * @deprecated\n     */\n    addRelatedModule(module) {\n        this._imports.add(module);\n    }\n    replace(toReplace, options) {\n        if (options.isProvider && this.hasProvider(toReplace)) {\n            const originalProvider = this._providers.get(toReplace);\n            return originalProvider.mergeWith({ provide: toReplace, ...options });\n        }\n        else if (!options.isProvider && this.hasInjectable(toReplace)) {\n            const originalInjectable = this._injectables.get(toReplace);\n            return originalInjectable.mergeWith({\n                provide: toReplace,\n                ...options,\n            });\n        }\n    }\n    hasProvider(token) {\n        return this._providers.has(token);\n    }\n    hasInjectable(token) {\n        return this._injectables.has(token);\n    }\n    getProviderByKey(name) {\n        return this._providers.get(name);\n    }\n    getProviderById(id) {\n        return Array.from(this._providers.values()).find(item => item.id === id);\n    }\n    getControllerById(id) {\n        return Array.from(this._controllers.values()).find(item => item.id === id);\n    }\n    getInjectableById(id) {\n        return Array.from(this._injectables.values()).find(item => item.id === id);\n    }\n    getMiddlewareById(id) {\n        return Array.from(this._middlewares.values()).find(item => item.id === id);\n    }\n    getNonAliasProviders() {\n        return [...this._providers].filter(([_, wrapper]) => !wrapper.isAlias);\n    }\n    createModuleReferenceType() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        return class extends module_ref_1.ModuleRef {\n            constructor() {\n                super(self.container);\n            }\n            get(typeOrToken, options = {}) {\n                options.strict ??= true;\n                options.each ??= false;\n                return this.find(typeOrToken, options.strict\n                    ? {\n                        moduleId: self.id,\n                        each: options.each,\n                    }\n                    : options);\n            }\n            resolve(typeOrToken, contextId = (0, context_id_factory_1.createContextId)(), options = {}) {\n                options.strict ??= true;\n                options.each ??= false;\n                return this.resolvePerContext(typeOrToken, self, contextId, options);\n            }\n            async create(type, contextId) {\n                if (!(type && (0, shared_utils_1.isFunction)(type) && type.prototype)) {\n                    throw new exceptions_1.InvalidClassException(type);\n                }\n                return this.instantiateClass(type, self, contextId);\n            }\n        };\n    }\n    isEntryProvider(metatype) {\n        return typeof metatype === 'function'\n            ? !!Reflect.getMetadata(constants_1.ENTRY_PROVIDER_WATERMARK, metatype)\n            : false;\n    }\n    generateUuid() {\n        const prefix = 'M_';\n        const key = this.name?.toString() ?? this.token?.toString();\n        return key ? uuid_factory_1.UuidFactory.get(`${prefix}_${key}`) : (0, random_string_generator_util_1.randomStringGenerator)();\n    }\n}\nexports.Module = Module;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}