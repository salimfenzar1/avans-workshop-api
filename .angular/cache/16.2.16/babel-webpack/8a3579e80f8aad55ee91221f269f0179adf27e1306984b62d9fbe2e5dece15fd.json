{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineDefaultCommandsOnRepl = defineDefaultCommandsOnRepl;\n/**\n * Displays a list of available commands in the REPL alongside with their\n * descriptions.\n * (c) This code was inspired by the 'help' command from Node.js core:\n * {@link https://github.com/nodejs/node/blob/58b60c1393dd65cd228a8b0084a19acd2c1d16aa/lib/repl.js#L1741-L1759}\n */\nfunction listAllCommands(replServer) {\n  Object.keys(replServer.commands).sort().forEach(name => {\n    const cmd = replServer.commands[name];\n    if (cmd) {\n      replServer.output.write(`${name}\\t${cmd.help || ''}\\n`);\n    }\n  });\n}\nfunction defineDefaultCommandsOnRepl(replServer) {\n  replServer.defineCommand('help', {\n    help: 'Show REPL options',\n    action(name) {\n      this.clearBufferedCommand();\n      if (name) {\n        // Considering native commands before native nestjs injected functions.\n        const nativeCommandOrFunction = this.commands[name] || this.context[name];\n        // NOTE: If the command was retrieve from the context, it will have a `help`\n        // getter property that outputs the helper message and returns undefined.\n        // But if the command was retrieve from the `commands` object, it will\n        // have a `help` property that returns the helper message.\n        const helpMessage = nativeCommandOrFunction?.help;\n        if (helpMessage) {\n          this.output.write(`${helpMessage}\\n`);\n        }\n      } else {\n        listAllCommands(this);\n        this.output.write('\\n\\n');\n        this.context.help();\n        this.output.write('\\nPress Ctrl+C to abort current expression, Ctrl+D to exit the REPL\\n');\n      }\n      this.displayPrompt();\n    }\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","defineDefaultCommandsOnRepl","listAllCommands","replServer","keys","commands","sort","forEach","name","cmd","output","write","help","defineCommand","action","clearBufferedCommand","nativeCommandOrFunction","context","helpMessage","displayPrompt"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/repl/repl-native-commands.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineDefaultCommandsOnRepl = defineDefaultCommandsOnRepl;\n/**\n * Displays a list of available commands in the REPL alongside with their\n * descriptions.\n * (c) This code was inspired by the 'help' command from Node.js core:\n * {@link https://github.com/nodejs/node/blob/58b60c1393dd65cd228a8b0084a19acd2c1d16aa/lib/repl.js#L1741-L1759}\n */\nfunction listAllCommands(replServer) {\n    Object.keys(replServer.commands)\n        .sort()\n        .forEach(name => {\n        const cmd = replServer.commands[name];\n        if (cmd) {\n            replServer.output.write(`${name}\\t${cmd.help || ''}\\n`);\n        }\n    });\n}\nfunction defineDefaultCommandsOnRepl(replServer) {\n    replServer.defineCommand('help', {\n        help: 'Show REPL options',\n        action(name) {\n            this.clearBufferedCommand();\n            if (name) {\n                // Considering native commands before native nestjs injected functions.\n                const nativeCommandOrFunction = this.commands[name] || this.context[name];\n                // NOTE: If the command was retrieve from the context, it will have a `help`\n                // getter property that outputs the helper message and returns undefined.\n                // But if the command was retrieve from the `commands` object, it will\n                // have a `help` property that returns the helper message.\n                const helpMessage = nativeCommandOrFunction?.help;\n                if (helpMessage) {\n                    this.output.write(`${helpMessage}\\n`);\n                }\n            }\n            else {\n                listAllCommands(this);\n                this.output.write('\\n\\n');\n                this.context.help();\n                this.output.write('\\nPress Ctrl+C to abort current expression, Ctrl+D to exit the REPL\\n');\n            }\n            this.displayPrompt();\n        },\n    });\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,2BAA2B,GAAGA,2BAA2B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,UAAU,EAAE;EACjCN,MAAM,CAACO,IAAI,CAACD,UAAU,CAACE,QAAQ,CAAC,CAC3BC,IAAI,CAAC,CAAC,CACNC,OAAO,CAACC,IAAI,IAAI;IACjB,MAAMC,GAAG,GAAGN,UAAU,CAACE,QAAQ,CAACG,IAAI,CAAC;IACrC,IAAIC,GAAG,EAAE;MACLN,UAAU,CAACO,MAAM,CAACC,KAAK,CAAE,GAAEH,IAAK,KAAIC,GAAG,CAACG,IAAI,IAAI,EAAG,IAAG,CAAC;IAC3D;EACJ,CAAC,CAAC;AACN;AACA,SAASX,2BAA2BA,CAACE,UAAU,EAAE;EAC7CA,UAAU,CAACU,aAAa,CAAC,MAAM,EAAE;IAC7BD,IAAI,EAAE,mBAAmB;IACzBE,MAAMA,CAACN,IAAI,EAAE;MACT,IAAI,CAACO,oBAAoB,CAAC,CAAC;MAC3B,IAAIP,IAAI,EAAE;QACN;QACA,MAAMQ,uBAAuB,GAAG,IAAI,CAACX,QAAQ,CAACG,IAAI,CAAC,IAAI,IAAI,CAACS,OAAO,CAACT,IAAI,CAAC;QACzE;QACA;QACA;QACA;QACA,MAAMU,WAAW,GAAGF,uBAAuB,EAAEJ,IAAI;QACjD,IAAIM,WAAW,EAAE;UACb,IAAI,CAACR,MAAM,CAACC,KAAK,CAAE,GAAEO,WAAY,IAAG,CAAC;QACzC;MACJ,CAAC,MACI;QACDhB,eAAe,CAAC,IAAI,CAAC;QACrB,IAAI,CAACQ,MAAM,CAACC,KAAK,CAAC,MAAM,CAAC;QACzB,IAAI,CAACM,OAAO,CAACL,IAAI,CAAC,CAAC;QACnB,IAAI,CAACF,MAAM,CAACC,KAAK,CAAC,uEAAuE,CAAC;MAC9F;MACA,IAAI,CAACQ,aAAa,CAAC,CAAC;IACxB;EACJ,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}