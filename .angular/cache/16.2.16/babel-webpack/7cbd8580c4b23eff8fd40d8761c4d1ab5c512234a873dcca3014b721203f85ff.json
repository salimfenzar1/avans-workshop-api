{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isTaxIDValidator from 'validator/lib/isTaxID';\nexport const IS_TAX_ID = 'isTaxId';\n/**\n * Checks if the string is a valid tax ID. Default locale is `en-US`.\n * If given value is not a string, then it returns false.\n *\n * Supported locales: bg-BG, cs-CZ, de-AT, de-DE, dk-DK, el-CY, el-GR, en-CA,\n * en-IE, en-US, es-ES, et-EE, fi-FI, fr-BE, fr-FR, fr-LU, hr-HR, hu-HU, it-IT,\n * lv-LV, mt-MT, nl-NL, pl-PL, pt-BR, pt-PT, ro-RO, sk-SK, sl-SI, sv-SE.\n */\nexport function isTaxId(value, locale) {\n  return typeof value === 'string' && isTaxIDValidator(value, locale || 'en-US');\n}\n/**\n * Checks if the string is a valid tax ID. Default locale is `en-US`.\n * If given value is not a string, then it returns false.\n *\n * Supported locales: bg-BG, cs-CZ, de-AT, de-DE, dk-DK, el-CY, el-GR, en-CA,\n * en-IE, en-US, es-ES, et-EE, fi-FI, fr-BE, fr-FR, fr-LU, hr-HR, hu-HU, it-IT,\n * lv-LV, mt-MT, nl-NL, pl-PL, pt-BR, pt-PT, ro-RO, sk-SK, sl-SI, sv-SE.\n */\nexport function IsTaxId(locale, validationOptions) {\n  return ValidateBy({\n    name: IS_TAX_ID,\n    constraints: [locale],\n    validator: {\n      validate: (value, args) => isTaxId(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a Tax Identification Number', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isTaxIDValidator","IS_TAX_ID","isTaxId","value","locale","IsTaxId","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/is-tax-id.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isTaxIDValidator from 'validator/lib/isTaxID';\nexport const IS_TAX_ID = 'isTaxId';\n/**\n * Checks if the string is a valid tax ID. Default locale is `en-US`.\n * If given value is not a string, then it returns false.\n *\n * Supported locales: bg-BG, cs-CZ, de-AT, de-DE, dk-DK, el-CY, el-GR, en-CA,\n * en-IE, en-US, es-ES, et-EE, fi-FI, fr-BE, fr-FR, fr-LU, hr-HR, hu-HU, it-IT,\n * lv-LV, mt-MT, nl-NL, pl-PL, pt-BR, pt-PT, ro-RO, sk-SK, sl-SI, sv-SE.\n */\nexport function isTaxId(value, locale) {\n    return typeof value === 'string' && isTaxIDValidator(value, locale || 'en-US');\n}\n/**\n * Checks if the string is a valid tax ID. Default locale is `en-US`.\n * If given value is not a string, then it returns false.\n *\n * Supported locales: bg-BG, cs-CZ, de-AT, de-DE, dk-DK, el-CY, el-GR, en-CA,\n * en-IE, en-US, es-ES, et-EE, fi-FI, fr-BE, fr-FR, fr-LU, hr-HR, hu-HU, it-IT,\n * lv-LV, mt-MT, nl-NL, pl-PL, pt-BR, pt-PT, ro-RO, sk-SK, sl-SI, sv-SE.\n */\nexport function IsTaxId(locale, validationOptions) {\n    return ValidateBy({\n        name: IS_TAX_ID,\n        constraints: [locale],\n        validator: {\n            validate: (value, args) => isTaxId(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a Tax Identification Number', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,gBAAgB,MAAM,uBAAuB;AACpD,OAAO,MAAMC,SAAS,GAAG,SAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACnC,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,gBAAgB,CAACG,KAAK,EAAEC,MAAM,IAAI,OAAO,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACD,MAAM,EAAEE,iBAAiB,EAAE;EAC/C,OAAOP,UAAU,CAAC;IACdQ,IAAI,EAAEN,SAAS;IACfO,WAAW,EAAE,CAACJ,MAAM,CAAC;IACrBK,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACP,KAAK,EAAEQ,IAAI,KAAKT,OAAO,CAACC,KAAK,EAAEQ,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MAC1GI,cAAc,EAAEd,YAAY,CAACe,UAAU,IAAIA,UAAU,GAAG,+CAA+C,EAAEP,iBAAiB;IAC9H;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}