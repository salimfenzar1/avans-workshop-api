{"ast":null,"code":"import { isValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMacAddressValidator from 'validator/lib/isMACAddress';\nexport const IS_MAC_ADDRESS = 'isMacAddress';\n/**\n * Check if the string is a MAC address.\n * If given value is not a string, then it returns false.\n */\nexport function isMACAddress(value, options) {\n  return typeof value === 'string' && isMacAddressValidator(value, options);\n}\nexport function IsMACAddress(optionsOrValidationOptionsArg, validationOptionsArg) {\n  const options = !isValidationOptions(optionsOrValidationOptionsArg) ? optionsOrValidationOptionsArg : undefined;\n  const validationOptions = isValidationOptions(optionsOrValidationOptionsArg) ? optionsOrValidationOptionsArg : validationOptionsArg;\n  return ValidateBy({\n    name: IS_MAC_ADDRESS,\n    constraints: [options],\n    validator: {\n      validate: (value, args) => isMACAddress(value, options),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a MAC Address', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["isValidationOptions","buildMessage","ValidateBy","isMacAddressValidator","IS_MAC_ADDRESS","isMACAddress","value","options","IsMACAddress","optionsOrValidationOptionsArg","validationOptionsArg","undefined","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsMacAddress.js"],"sourcesContent":["import { isValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMacAddressValidator from 'validator/lib/isMACAddress';\nexport const IS_MAC_ADDRESS = 'isMacAddress';\n/**\n * Check if the string is a MAC address.\n * If given value is not a string, then it returns false.\n */\nexport function isMACAddress(value, options) {\n    return typeof value === 'string' && isMacAddressValidator(value, options);\n}\nexport function IsMACAddress(optionsOrValidationOptionsArg, validationOptionsArg) {\n    const options = !isValidationOptions(optionsOrValidationOptionsArg) ? optionsOrValidationOptionsArg : undefined;\n    const validationOptions = isValidationOptions(optionsOrValidationOptionsArg)\n        ? optionsOrValidationOptionsArg\n        : validationOptionsArg;\n    return ValidateBy({\n        name: IS_MAC_ADDRESS,\n        constraints: [options],\n        validator: {\n            validate: (value, args) => isMACAddress(value, options),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a MAC Address', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,qBAAqB,MAAM,4BAA4B;AAC9D,OAAO,MAAMC,cAAc,GAAG,cAAc;AAC5C;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACzC,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,qBAAqB,CAACG,KAAK,EAAEC,OAAO,CAAC;AAC7E;AACA,OAAO,SAASC,YAAYA,CAACC,6BAA6B,EAAEC,oBAAoB,EAAE;EAC9E,MAAMH,OAAO,GAAG,CAACP,mBAAmB,CAACS,6BAA6B,CAAC,GAAGA,6BAA6B,GAAGE,SAAS;EAC/G,MAAMC,iBAAiB,GAAGZ,mBAAmB,CAACS,6BAA6B,CAAC,GACtEA,6BAA6B,GAC7BC,oBAAoB;EAC1B,OAAOR,UAAU,CAAC;IACdW,IAAI,EAAET,cAAc;IACpBU,WAAW,EAAE,CAACP,OAAO,CAAC;IACtBQ,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACV,KAAK,EAAEW,IAAI,KAAKZ,YAAY,CAACC,KAAK,EAAEC,OAAO,CAAC;MACvDW,cAAc,EAAEjB,YAAY,CAACkB,UAAU,IAAIA,UAAU,GAAG,iCAAiC,EAAEP,iBAAiB;IAChH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}