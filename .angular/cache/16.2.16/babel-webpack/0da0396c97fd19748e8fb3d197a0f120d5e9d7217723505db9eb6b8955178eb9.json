{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIsbnValidator from 'validator/lib/isISBN';\nexport const IS_ISBN = 'isIsbn';\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function isISBN(value, version) {\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  const versionStr = version ? `${version}` : undefined;\n  return typeof value === 'string' && isIsbnValidator(value, versionStr);\n}\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function IsISBN(version, validationOptions) {\n  return ValidateBy({\n    name: IS_ISBN,\n    constraints: [version],\n    validator: {\n      validate: (value, args) => isISBN(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an ISBN', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isIsbnValidator","IS_ISBN","isISBN","value","version","versionStr","undefined","IsISBN","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsISBN.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIsbnValidator from 'validator/lib/isISBN';\nexport const IS_ISBN = 'isIsbn';\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function isISBN(value, version) {\n    /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n    const versionStr = version ? `${version}` : undefined;\n    return typeof value === 'string' && isIsbnValidator(value, versionStr);\n}\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function IsISBN(version, validationOptions) {\n    return ValidateBy({\n        name: IS_ISBN,\n        constraints: [version],\n        validator: {\n            validate: (value, args) => isISBN(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an ISBN', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAO,MAAMC,OAAO,GAAG,QAAQ;AAC/B;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACnC;EACA,MAAMC,UAAU,GAAGD,OAAO,GAAI,GAAEA,OAAQ,EAAC,GAAGE,SAAS;EACrD,OAAO,OAAOH,KAAK,KAAK,QAAQ,IAAIH,eAAe,CAACG,KAAK,EAAEE,UAAU,CAAC;AAC1E;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,MAAMA,CAACH,OAAO,EAAEI,iBAAiB,EAAE;EAC/C,OAAOT,UAAU,CAAC;IACdU,IAAI,EAAER,OAAO;IACbS,WAAW,EAAE,CAACN,OAAO,CAAC;IACtBO,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACT,KAAK,EAAEU,IAAI,KAAKX,MAAM,CAACC,KAAK,EAAEU,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MACzGI,cAAc,EAAEhB,YAAY,CAACiB,UAAU,IAAIA,UAAU,GAAG,2BAA2B,EAAEP,iBAAiB;IAC1G;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}