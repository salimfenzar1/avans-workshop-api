{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Catch, HttpException, HttpStatus } from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\nexport let AllExceptionsFilter = class AllExceptionsFilter {\n  constructor(httpAdapterHost) {\n    this.httpAdapterHost = httpAdapterHost;\n  }\n  catch(exception, host) {\n    // In certain situations `httpAdapter` might not be available in the\n    // constructor method, thus we should resolve it here.\n    const {\n      httpAdapter\n    } = this.httpAdapterHost;\n    const ctx = host.switchToHttp();\n    const httpStatus = exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;\n    const responseBody = {\n      statusCode: httpStatus,\n      timestamp: new Date().toISOString(),\n      path: httpAdapter.getRequestUrl(ctx.getRequest())\n    };\n    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n  }\n};\nAllExceptionsFilter = __decorate([Catch(), __metadata(\"design:paramtypes\", [HttpAdapterHost])], AllExceptionsFilter);","map":{"version":3,"names":["Catch","HttpException","HttpStatus","HttpAdapterHost","AllExceptionsFilter","constructor","httpAdapterHost","catch","exception","host","httpAdapter","ctx","switchToHttp","httpStatus","getStatus","INTERNAL_SERVER_ERROR","responseBody","statusCode","timestamp","Date","toISOString","path","getRequestUrl","getRequest","reply","getResponse","__decorate"],"sources":["C:\\Users\\salim\\Dev\\avans-nx-workshop-2024\\avans-nx-workshop\\libs\\backend\\dto\\src\\lib\\filters\\all-exceptions.filter.ts"],"sourcesContent":["import {\r\n    ExceptionFilter,\r\n    Catch,\r\n    ArgumentsHost,\r\n    HttpException,\r\n    HttpStatus\r\n} from '@nestjs/common';\r\nimport { HttpAdapterHost } from '@nestjs/core';\r\n\r\n@Catch()\r\nexport class AllExceptionsFilter implements ExceptionFilter {\r\n    constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\r\n\r\n    catch(exception: unknown, host: ArgumentsHost): void {\r\n        // In certain situations `httpAdapter` might not be available in the\r\n        // constructor method, thus we should resolve it here.\r\n        const { httpAdapter } = this.httpAdapterHost;\r\n\r\n        const ctx = host.switchToHttp();\r\n\r\n        const httpStatus =\r\n            exception instanceof HttpException\r\n                ? exception.getStatus()\r\n                : HttpStatus.INTERNAL_SERVER_ERROR;\r\n\r\n        const responseBody = {\r\n            statusCode: httpStatus,\r\n            timestamp: new Date().toISOString(),\r\n            path: httpAdapter.getRequestUrl(ctx.getRequest())\r\n        };\r\n\r\n        httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\r\n    }\r\n}\r\n"],"mappings":";AAAA,SAEIA,KAAK,EAELC,aAAa,EACbC,UAAU,QACP,gBAAgB;AACvB,SAASC,eAAe,QAAQ,cAAc;AAGvC,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAC5BC,YAA6BC,eAAgC;IAAhC,KAAAA,eAAe,GAAfA,eAAe;EAAoB;EAEhEC,KAAKA,CAACC,SAAkB,EAAEC,IAAmB;IACzC;IACA;IACA,MAAM;MAAEC;IAAW,CAAE,GAAG,IAAI,CAACJ,eAAe;IAE5C,MAAMK,GAAG,GAAGF,IAAI,CAACG,YAAY,EAAE;IAE/B,MAAMC,UAAU,GACZL,SAAS,YAAYP,aAAa,GAC5BO,SAAS,CAACM,SAAS,EAAE,GACrBZ,UAAU,CAACa,qBAAqB;IAE1C,MAAMC,YAAY,GAAG;MACjBC,UAAU,EAAEJ,UAAU;MACtBK,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MACnCC,IAAI,EAAEX,WAAW,CAACY,aAAa,CAACX,GAAG,CAACY,UAAU,EAAE;KACnD;IAEDb,WAAW,CAACc,KAAK,CAACb,GAAG,CAACc,WAAW,EAAE,EAAET,YAAY,EAAEH,UAAU,CAAC;EAClE;CACH;AAvBYT,mBAAmB,GAAAsB,UAAA,EAD/B1B,KAAK,EAAE,E,iCAE0CG,eAAe,G,EADpDC,mBAAmB,CAuB/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}