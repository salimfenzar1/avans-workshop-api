{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExpressAdapter = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst http_adapter_1 = require(\"@nestjs/core/adapters/http-adapter\");\nconst router_method_factory_1 = require(\"@nestjs/core/helpers/router-method-factory\");\nconst body_parser_1 = require(\"body-parser\");\nconst bodyparser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst express = require(\"express\");\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst stream_1 = require(\"stream\");\nconst get_body_parser_options_util_1 = require(\"./utils/get-body-parser-options.util\");\n/**\n * @publicApi\n */\nclass ExpressAdapter extends http_adapter_1.AbstractHttpAdapter {\n  constructor(instance) {\n    super(instance || express());\n    this.routerMethodFactory = new router_method_factory_1.RouterMethodFactory();\n    this.logger = new common_1.Logger(ExpressAdapter.name);\n    this.openConnections = new Set();\n  }\n  reply(response, body, statusCode) {\n    if (statusCode) {\n      response.status(statusCode);\n    }\n    if ((0, shared_utils_1.isNil)(body)) {\n      return response.send();\n    }\n    if (body instanceof common_1.StreamableFile) {\n      const streamHeaders = body.getHeaders();\n      if (response.getHeader('Content-Type') === undefined && streamHeaders.type !== undefined) {\n        response.setHeader('Content-Type', streamHeaders.type);\n      }\n      if (response.getHeader('Content-Disposition') === undefined && streamHeaders.disposition !== undefined) {\n        response.setHeader('Content-Disposition', streamHeaders.disposition);\n      }\n      if (response.getHeader('Content-Length') === undefined && streamHeaders.length !== undefined) {\n        response.setHeader('Content-Length', streamHeaders.length);\n      }\n      return (0, stream_1.pipeline)(body.getStream().once('error', err => {\n        body.errorHandler(err, response);\n      }), response, err => {\n        if (err) {\n          body.errorLogger(err);\n        }\n      });\n    }\n    const responseContentType = response.getHeader('Content-Type');\n    if (typeof responseContentType === 'string' && !responseContentType.startsWith('application/json') && body?.statusCode >= common_1.HttpStatus.BAD_REQUEST) {\n      this.logger.warn(\"Content-Type doesn't match Reply body, you might need a custom ExceptionFilter for non-JSON responses\");\n      response.setHeader('Content-Type', 'application/json');\n    }\n    return (0, shared_utils_1.isObject)(body) ? response.json(body) : response.send(String(body));\n  }\n  status(response, statusCode) {\n    return response.status(statusCode);\n  }\n  end(response, message) {\n    return response.end(message);\n  }\n  render(response, view, options) {\n    return response.render(view, options);\n  }\n  redirect(response, statusCode, url) {\n    return response.redirect(statusCode, url);\n  }\n  setErrorHandler(handler, prefix) {\n    return this.use(handler);\n  }\n  setNotFoundHandler(handler, prefix) {\n    return this.use(handler);\n  }\n  isHeadersSent(response) {\n    return response.headersSent;\n  }\n  getHeader(response, name) {\n    return response.get(name);\n  }\n  setHeader(response, name, value) {\n    return response.set(name, value);\n  }\n  appendHeader(response, name, value) {\n    return response.append(name, value);\n  }\n  listen(port, ...args) {\n    return this.httpServer.listen(port, ...args);\n  }\n  close() {\n    this.closeOpenConnections();\n    if (!this.httpServer) {\n      return undefined;\n    }\n    return new Promise(resolve => this.httpServer.close(resolve));\n  }\n  set(...args) {\n    return this.instance.set(...args);\n  }\n  enable(...args) {\n    return this.instance.enable(...args);\n  }\n  disable(...args) {\n    return this.instance.disable(...args);\n  }\n  engine(...args) {\n    return this.instance.engine(...args);\n  }\n  useStaticAssets(path, options) {\n    if (options && options.prefix) {\n      return this.use(options.prefix, express.static(path, options));\n    }\n    return this.use(express.static(path, options));\n  }\n  setBaseViewsDir(path) {\n    return this.set('views', path);\n  }\n  setViewEngine(engine) {\n    return this.set('view engine', engine);\n  }\n  getRequestHostname(request) {\n    return request.hostname;\n  }\n  getRequestMethod(request) {\n    return request.method;\n  }\n  getRequestUrl(request) {\n    return request.originalUrl;\n  }\n  enableCors(options) {\n    return this.use(cors(options));\n  }\n  createMiddlewareFactory(requestMethod) {\n    return this.routerMethodFactory.get(this.instance, requestMethod).bind(this.instance);\n  }\n  initHttpServer(options) {\n    const isHttpsEnabled = options && options.httpsOptions;\n    if (isHttpsEnabled) {\n      this.httpServer = https.createServer(options.httpsOptions, this.getInstance());\n    } else {\n      this.httpServer = http.createServer(this.getInstance());\n    }\n    if (options?.forceCloseConnections) {\n      this.trackOpenConnections();\n    }\n  }\n  registerParserMiddleware(prefix, rawBody) {\n    const bodyParserJsonOptions = (0, get_body_parser_options_util_1.getBodyParserOptions)(rawBody);\n    const bodyParserUrlencodedOptions = (0, get_body_parser_options_util_1.getBodyParserOptions)(rawBody, {\n      extended: true\n    });\n    const parserMiddleware = {\n      jsonParser: (0, body_parser_1.json)(bodyParserJsonOptions),\n      urlencodedParser: (0, body_parser_1.urlencoded)(bodyParserUrlencodedOptions)\n    };\n    Object.keys(parserMiddleware).filter(parser => !this.isMiddlewareApplied(parser)).forEach(parserKey => this.use(parserMiddleware[parserKey]));\n  }\n  useBodyParser(type, rawBody, options) {\n    const parserOptions = (0, get_body_parser_options_util_1.getBodyParserOptions)(rawBody, options);\n    const parser = bodyparser[type](parserOptions);\n    this.use(parser);\n    return this;\n  }\n  setLocal(key, value) {\n    this.instance.locals[key] = value;\n    return this;\n  }\n  getType() {\n    return 'express';\n  }\n  applyVersionFilter(handler, version, versioningOptions) {\n    const callNextHandler = (req, res, next) => {\n      if (!next) {\n        throw new common_1.InternalServerErrorException('HTTP adapter does not support filtering on version');\n      }\n      return next();\n    };\n    if (version === common_1.VERSION_NEUTRAL ||\n    // URL Versioning is done via the path, so the filter continues forward\n    versioningOptions.type === common_1.VersioningType.URI) {\n      const handlerForNoVersioning = (req, res, next) => handler(req, res, next);\n      return handlerForNoVersioning;\n    }\n    // Custom Extractor Versioning Handler\n    if (versioningOptions.type === common_1.VersioningType.CUSTOM) {\n      const handlerForCustomVersioning = (req, res, next) => {\n        const extractedVersion = versioningOptions.extractor(req);\n        if (Array.isArray(version)) {\n          if (Array.isArray(extractedVersion) && version.filter(v => extractedVersion.includes(v)).length) {\n            return handler(req, res, next);\n          }\n          if ((0, shared_utils_1.isString)(extractedVersion) && version.includes(extractedVersion)) {\n            return handler(req, res, next);\n          }\n        } else if ((0, shared_utils_1.isString)(version)) {\n          // Known bug here - if there are multiple versions supported across separate\n          // handlers/controllers, we can't select the highest matching handler.\n          // Since this code is evaluated per-handler, then we can't see if the highest\n          // specified version exists in a different handler.\n          if (Array.isArray(extractedVersion) && extractedVersion.includes(version)) {\n            return handler(req, res, next);\n          }\n          if ((0, shared_utils_1.isString)(extractedVersion) && version === extractedVersion) {\n            return handler(req, res, next);\n          }\n        }\n        return callNextHandler(req, res, next);\n      };\n      return handlerForCustomVersioning;\n    }\n    // Media Type (Accept Header) Versioning Handler\n    if (versioningOptions.type === common_1.VersioningType.MEDIA_TYPE) {\n      const handlerForMediaTypeVersioning = (req, res, next) => {\n        const MEDIA_TYPE_HEADER = 'Accept';\n        const acceptHeaderValue = req.headers?.[MEDIA_TYPE_HEADER] || req.headers?.[MEDIA_TYPE_HEADER.toLowerCase()];\n        const acceptHeaderVersionParameter = acceptHeaderValue ? acceptHeaderValue.split(';')[1] : undefined;\n        // No version was supplied\n        if ((0, shared_utils_1.isUndefined)(acceptHeaderVersionParameter)) {\n          if (Array.isArray(version)) {\n            if (version.includes(common_1.VERSION_NEUTRAL)) {\n              return handler(req, res, next);\n            }\n          }\n        } else {\n          const headerVersion = acceptHeaderVersionParameter.split(versioningOptions.key)[1];\n          if (Array.isArray(version)) {\n            if (version.includes(headerVersion)) {\n              return handler(req, res, next);\n            }\n          } else if ((0, shared_utils_1.isString)(version)) {\n            if (version === headerVersion) {\n              return handler(req, res, next);\n            }\n          }\n        }\n        return callNextHandler(req, res, next);\n      };\n      return handlerForMediaTypeVersioning;\n    }\n    // Header Versioning Handler\n    if (versioningOptions.type === common_1.VersioningType.HEADER) {\n      const handlerForHeaderVersioning = (req, res, next) => {\n        const customHeaderVersionParameter = req.headers?.[versioningOptions.header] || req.headers?.[versioningOptions.header.toLowerCase()];\n        // No version was supplied\n        if ((0, shared_utils_1.isUndefined)(customHeaderVersionParameter)) {\n          if (Array.isArray(version)) {\n            if (version.includes(common_1.VERSION_NEUTRAL)) {\n              return handler(req, res, next);\n            }\n          }\n        } else {\n          if (Array.isArray(version)) {\n            if (version.includes(customHeaderVersionParameter)) {\n              return handler(req, res, next);\n            }\n          } else if ((0, shared_utils_1.isString)(version)) {\n            if (version === customHeaderVersionParameter) {\n              return handler(req, res, next);\n            }\n          }\n        }\n        return callNextHandler(req, res, next);\n      };\n      return handlerForHeaderVersioning;\n    }\n  }\n  trackOpenConnections() {\n    this.httpServer.on('connection', socket => {\n      this.openConnections.add(socket);\n      socket.on('close', () => this.openConnections.delete(socket));\n    });\n  }\n  closeOpenConnections() {\n    for (const socket of this.openConnections) {\n      socket.destroy();\n      this.openConnections.delete(socket);\n    }\n  }\n  isMiddlewareApplied(name) {\n    const app = this.getInstance();\n    return !!app._router && !!app._router.stack && (0, shared_utils_1.isFunction)(app._router.stack.filter) && app._router.stack.some(layer => layer && layer.handle && layer.handle.name === name);\n  }\n}\nexports.ExpressAdapter = ExpressAdapter;","map":{"version":3,"names":["Object","defineProperty","exports","value","ExpressAdapter","common_1","require","shared_utils_1","http_adapter_1","router_method_factory_1","body_parser_1","bodyparser","cors","express","http","https","stream_1","get_body_parser_options_util_1","AbstractHttpAdapter","constructor","instance","routerMethodFactory","RouterMethodFactory","logger","Logger","name","openConnections","Set","reply","response","body","statusCode","status","isNil","send","StreamableFile","streamHeaders","getHeaders","getHeader","undefined","type","setHeader","disposition","length","pipeline","getStream","once","err","errorHandler","errorLogger","responseContentType","startsWith","HttpStatus","BAD_REQUEST","warn","isObject","json","String","end","message","render","view","options","redirect","url","setErrorHandler","handler","prefix","use","setNotFoundHandler","isHeadersSent","headersSent","get","set","appendHeader","append","listen","port","args","httpServer","close","closeOpenConnections","Promise","resolve","enable","disable","engine","useStaticAssets","path","static","setBaseViewsDir","setViewEngine","getRequestHostname","request","hostname","getRequestMethod","method","getRequestUrl","originalUrl","enableCors","createMiddlewareFactory","requestMethod","bind","initHttpServer","isHttpsEnabled","httpsOptions","createServer","getInstance","forceCloseConnections","trackOpenConnections","registerParserMiddleware","rawBody","bodyParserJsonOptions","getBodyParserOptions","bodyParserUrlencodedOptions","extended","parserMiddleware","jsonParser","urlencodedParser","urlencoded","keys","filter","parser","isMiddlewareApplied","forEach","parserKey","useBodyParser","parserOptions","setLocal","key","locals","getType","applyVersionFilter","version","versioningOptions","callNextHandler","req","res","next","InternalServerErrorException","VERSION_NEUTRAL","VersioningType","URI","handlerForNoVersioning","CUSTOM","handlerForCustomVersioning","extractedVersion","extractor","Array","isArray","v","includes","isString","MEDIA_TYPE","handlerForMediaTypeVersioning","MEDIA_TYPE_HEADER","acceptHeaderValue","headers","toLowerCase","acceptHeaderVersionParameter","split","isUndefined","headerVersion","HEADER","handlerForHeaderVersioning","customHeaderVersionParameter","header","on","socket","add","delete","destroy","app","_router","stack","isFunction","some","layer","handle"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/platform-express/adapters/express-adapter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExpressAdapter = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst http_adapter_1 = require(\"@nestjs/core/adapters/http-adapter\");\nconst router_method_factory_1 = require(\"@nestjs/core/helpers/router-method-factory\");\nconst body_parser_1 = require(\"body-parser\");\nconst bodyparser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst express = require(\"express\");\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst stream_1 = require(\"stream\");\nconst get_body_parser_options_util_1 = require(\"./utils/get-body-parser-options.util\");\n/**\n * @publicApi\n */\nclass ExpressAdapter extends http_adapter_1.AbstractHttpAdapter {\n    constructor(instance) {\n        super(instance || express());\n        this.routerMethodFactory = new router_method_factory_1.RouterMethodFactory();\n        this.logger = new common_1.Logger(ExpressAdapter.name);\n        this.openConnections = new Set();\n    }\n    reply(response, body, statusCode) {\n        if (statusCode) {\n            response.status(statusCode);\n        }\n        if ((0, shared_utils_1.isNil)(body)) {\n            return response.send();\n        }\n        if (body instanceof common_1.StreamableFile) {\n            const streamHeaders = body.getHeaders();\n            if (response.getHeader('Content-Type') === undefined &&\n                streamHeaders.type !== undefined) {\n                response.setHeader('Content-Type', streamHeaders.type);\n            }\n            if (response.getHeader('Content-Disposition') === undefined &&\n                streamHeaders.disposition !== undefined) {\n                response.setHeader('Content-Disposition', streamHeaders.disposition);\n            }\n            if (response.getHeader('Content-Length') === undefined &&\n                streamHeaders.length !== undefined) {\n                response.setHeader('Content-Length', streamHeaders.length);\n            }\n            return (0, stream_1.pipeline)(body.getStream().once('error', (err) => {\n                body.errorHandler(err, response);\n            }), response, (err) => {\n                if (err) {\n                    body.errorLogger(err);\n                }\n            });\n        }\n        const responseContentType = response.getHeader('Content-Type');\n        if (typeof responseContentType === 'string' &&\n            !responseContentType.startsWith('application/json') &&\n            body?.statusCode >= common_1.HttpStatus.BAD_REQUEST) {\n            this.logger.warn(\"Content-Type doesn't match Reply body, you might need a custom ExceptionFilter for non-JSON responses\");\n            response.setHeader('Content-Type', 'application/json');\n        }\n        return (0, shared_utils_1.isObject)(body) ? response.json(body) : response.send(String(body));\n    }\n    status(response, statusCode) {\n        return response.status(statusCode);\n    }\n    end(response, message) {\n        return response.end(message);\n    }\n    render(response, view, options) {\n        return response.render(view, options);\n    }\n    redirect(response, statusCode, url) {\n        return response.redirect(statusCode, url);\n    }\n    setErrorHandler(handler, prefix) {\n        return this.use(handler);\n    }\n    setNotFoundHandler(handler, prefix) {\n        return this.use(handler);\n    }\n    isHeadersSent(response) {\n        return response.headersSent;\n    }\n    getHeader(response, name) {\n        return response.get(name);\n    }\n    setHeader(response, name, value) {\n        return response.set(name, value);\n    }\n    appendHeader(response, name, value) {\n        return response.append(name, value);\n    }\n    listen(port, ...args) {\n        return this.httpServer.listen(port, ...args);\n    }\n    close() {\n        this.closeOpenConnections();\n        if (!this.httpServer) {\n            return undefined;\n        }\n        return new Promise(resolve => this.httpServer.close(resolve));\n    }\n    set(...args) {\n        return this.instance.set(...args);\n    }\n    enable(...args) {\n        return this.instance.enable(...args);\n    }\n    disable(...args) {\n        return this.instance.disable(...args);\n    }\n    engine(...args) {\n        return this.instance.engine(...args);\n    }\n    useStaticAssets(path, options) {\n        if (options && options.prefix) {\n            return this.use(options.prefix, express.static(path, options));\n        }\n        return this.use(express.static(path, options));\n    }\n    setBaseViewsDir(path) {\n        return this.set('views', path);\n    }\n    setViewEngine(engine) {\n        return this.set('view engine', engine);\n    }\n    getRequestHostname(request) {\n        return request.hostname;\n    }\n    getRequestMethod(request) {\n        return request.method;\n    }\n    getRequestUrl(request) {\n        return request.originalUrl;\n    }\n    enableCors(options) {\n        return this.use(cors(options));\n    }\n    createMiddlewareFactory(requestMethod) {\n        return this.routerMethodFactory\n            .get(this.instance, requestMethod)\n            .bind(this.instance);\n    }\n    initHttpServer(options) {\n        const isHttpsEnabled = options && options.httpsOptions;\n        if (isHttpsEnabled) {\n            this.httpServer = https.createServer(options.httpsOptions, this.getInstance());\n        }\n        else {\n            this.httpServer = http.createServer(this.getInstance());\n        }\n        if (options?.forceCloseConnections) {\n            this.trackOpenConnections();\n        }\n    }\n    registerParserMiddleware(prefix, rawBody) {\n        const bodyParserJsonOptions = (0, get_body_parser_options_util_1.getBodyParserOptions)(rawBody);\n        const bodyParserUrlencodedOptions = (0, get_body_parser_options_util_1.getBodyParserOptions)(rawBody, {\n            extended: true,\n        });\n        const parserMiddleware = {\n            jsonParser: (0, body_parser_1.json)(bodyParserJsonOptions),\n            urlencodedParser: (0, body_parser_1.urlencoded)(bodyParserUrlencodedOptions),\n        };\n        Object.keys(parserMiddleware)\n            .filter(parser => !this.isMiddlewareApplied(parser))\n            .forEach(parserKey => this.use(parserMiddleware[parserKey]));\n    }\n    useBodyParser(type, rawBody, options) {\n        const parserOptions = (0, get_body_parser_options_util_1.getBodyParserOptions)(rawBody, options);\n        const parser = bodyparser[type](parserOptions);\n        this.use(parser);\n        return this;\n    }\n    setLocal(key, value) {\n        this.instance.locals[key] = value;\n        return this;\n    }\n    getType() {\n        return 'express';\n    }\n    applyVersionFilter(handler, version, versioningOptions) {\n        const callNextHandler = (req, res, next) => {\n            if (!next) {\n                throw new common_1.InternalServerErrorException('HTTP adapter does not support filtering on version');\n            }\n            return next();\n        };\n        if (version === common_1.VERSION_NEUTRAL ||\n            // URL Versioning is done via the path, so the filter continues forward\n            versioningOptions.type === common_1.VersioningType.URI) {\n            const handlerForNoVersioning = (req, res, next) => handler(req, res, next);\n            return handlerForNoVersioning;\n        }\n        // Custom Extractor Versioning Handler\n        if (versioningOptions.type === common_1.VersioningType.CUSTOM) {\n            const handlerForCustomVersioning = (req, res, next) => {\n                const extractedVersion = versioningOptions.extractor(req);\n                if (Array.isArray(version)) {\n                    if (Array.isArray(extractedVersion) &&\n                        version.filter(v => extractedVersion.includes(v)).length) {\n                        return handler(req, res, next);\n                    }\n                    if ((0, shared_utils_1.isString)(extractedVersion) &&\n                        version.includes(extractedVersion)) {\n                        return handler(req, res, next);\n                    }\n                }\n                else if ((0, shared_utils_1.isString)(version)) {\n                    // Known bug here - if there are multiple versions supported across separate\n                    // handlers/controllers, we can't select the highest matching handler.\n                    // Since this code is evaluated per-handler, then we can't see if the highest\n                    // specified version exists in a different handler.\n                    if (Array.isArray(extractedVersion) &&\n                        extractedVersion.includes(version)) {\n                        return handler(req, res, next);\n                    }\n                    if ((0, shared_utils_1.isString)(extractedVersion) && version === extractedVersion) {\n                        return handler(req, res, next);\n                    }\n                }\n                return callNextHandler(req, res, next);\n            };\n            return handlerForCustomVersioning;\n        }\n        // Media Type (Accept Header) Versioning Handler\n        if (versioningOptions.type === common_1.VersioningType.MEDIA_TYPE) {\n            const handlerForMediaTypeVersioning = (req, res, next) => {\n                const MEDIA_TYPE_HEADER = 'Accept';\n                const acceptHeaderValue = req.headers?.[MEDIA_TYPE_HEADER] ||\n                    req.headers?.[MEDIA_TYPE_HEADER.toLowerCase()];\n                const acceptHeaderVersionParameter = acceptHeaderValue\n                    ? acceptHeaderValue.split(';')[1]\n                    : undefined;\n                // No version was supplied\n                if ((0, shared_utils_1.isUndefined)(acceptHeaderVersionParameter)) {\n                    if (Array.isArray(version)) {\n                        if (version.includes(common_1.VERSION_NEUTRAL)) {\n                            return handler(req, res, next);\n                        }\n                    }\n                }\n                else {\n                    const headerVersion = acceptHeaderVersionParameter.split(versioningOptions.key)[1];\n                    if (Array.isArray(version)) {\n                        if (version.includes(headerVersion)) {\n                            return handler(req, res, next);\n                        }\n                    }\n                    else if ((0, shared_utils_1.isString)(version)) {\n                        if (version === headerVersion) {\n                            return handler(req, res, next);\n                        }\n                    }\n                }\n                return callNextHandler(req, res, next);\n            };\n            return handlerForMediaTypeVersioning;\n        }\n        // Header Versioning Handler\n        if (versioningOptions.type === common_1.VersioningType.HEADER) {\n            const handlerForHeaderVersioning = (req, res, next) => {\n                const customHeaderVersionParameter = req.headers?.[versioningOptions.header] ||\n                    req.headers?.[versioningOptions.header.toLowerCase()];\n                // No version was supplied\n                if ((0, shared_utils_1.isUndefined)(customHeaderVersionParameter)) {\n                    if (Array.isArray(version)) {\n                        if (version.includes(common_1.VERSION_NEUTRAL)) {\n                            return handler(req, res, next);\n                        }\n                    }\n                }\n                else {\n                    if (Array.isArray(version)) {\n                        if (version.includes(customHeaderVersionParameter)) {\n                            return handler(req, res, next);\n                        }\n                    }\n                    else if ((0, shared_utils_1.isString)(version)) {\n                        if (version === customHeaderVersionParameter) {\n                            return handler(req, res, next);\n                        }\n                    }\n                }\n                return callNextHandler(req, res, next);\n            };\n            return handlerForHeaderVersioning;\n        }\n    }\n    trackOpenConnections() {\n        this.httpServer.on('connection', (socket) => {\n            this.openConnections.add(socket);\n            socket.on('close', () => this.openConnections.delete(socket));\n        });\n    }\n    closeOpenConnections() {\n        for (const socket of this.openConnections) {\n            socket.destroy();\n            this.openConnections.delete(socket);\n        }\n    }\n    isMiddlewareApplied(name) {\n        const app = this.getInstance();\n        return (!!app._router &&\n            !!app._router.stack &&\n            (0, shared_utils_1.isFunction)(app._router.stack.filter) &&\n            app._router.stack.some((layer) => layer && layer.handle && layer.handle.name === name));\n    }\n}\nexports.ExpressAdapter = ExpressAdapter;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,MAAMC,QAAQ,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC1C,MAAMC,cAAc,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AACnE,MAAME,cAAc,GAAGF,OAAO,CAAC,oCAAoC,CAAC;AACpE,MAAMG,uBAAuB,GAAGH,OAAO,CAAC,4CAA4C,CAAC;AACrF,MAAMI,aAAa,GAAGJ,OAAO,CAAC,aAAa,CAAC;AAC5C,MAAMK,UAAU,GAAGL,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMM,IAAI,GAAGN,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMO,OAAO,GAAGP,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMQ,IAAI,GAAGR,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMS,KAAK,GAAGT,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMU,QAAQ,GAAGV,OAAO,CAAC,QAAQ,CAAC;AAClC,MAAMW,8BAA8B,GAAGX,OAAO,CAAC,sCAAsC,CAAC;AACtF;AACA;AACA;AACA,MAAMF,cAAc,SAASI,cAAc,CAACU,mBAAmB,CAAC;EAC5DC,WAAWA,CAACC,QAAQ,EAAE;IAClB,KAAK,CAACA,QAAQ,IAAIP,OAAO,CAAC,CAAC,CAAC;IAC5B,IAAI,CAACQ,mBAAmB,GAAG,IAAIZ,uBAAuB,CAACa,mBAAmB,CAAC,CAAC;IAC5E,IAAI,CAACC,MAAM,GAAG,IAAIlB,QAAQ,CAACmB,MAAM,CAACpB,cAAc,CAACqB,IAAI,CAAC;IACtD,IAAI,CAACC,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC;EACpC;EACAC,KAAKA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,UAAU,EAAE;IAC9B,IAAIA,UAAU,EAAE;MACZF,QAAQ,CAACG,MAAM,CAACD,UAAU,CAAC;IAC/B;IACA,IAAI,CAAC,CAAC,EAAExB,cAAc,CAAC0B,KAAK,EAAEH,IAAI,CAAC,EAAE;MACjC,OAAOD,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC1B;IACA,IAAIJ,IAAI,YAAYzB,QAAQ,CAAC8B,cAAc,EAAE;MACzC,MAAMC,aAAa,GAAGN,IAAI,CAACO,UAAU,CAAC,CAAC;MACvC,IAAIR,QAAQ,CAACS,SAAS,CAAC,cAAc,CAAC,KAAKC,SAAS,IAChDH,aAAa,CAACI,IAAI,KAAKD,SAAS,EAAE;QAClCV,QAAQ,CAACY,SAAS,CAAC,cAAc,EAAEL,aAAa,CAACI,IAAI,CAAC;MAC1D;MACA,IAAIX,QAAQ,CAACS,SAAS,CAAC,qBAAqB,CAAC,KAAKC,SAAS,IACvDH,aAAa,CAACM,WAAW,KAAKH,SAAS,EAAE;QACzCV,QAAQ,CAACY,SAAS,CAAC,qBAAqB,EAAEL,aAAa,CAACM,WAAW,CAAC;MACxE;MACA,IAAIb,QAAQ,CAACS,SAAS,CAAC,gBAAgB,CAAC,KAAKC,SAAS,IAClDH,aAAa,CAACO,MAAM,KAAKJ,SAAS,EAAE;QACpCV,QAAQ,CAACY,SAAS,CAAC,gBAAgB,EAAEL,aAAa,CAACO,MAAM,CAAC;MAC9D;MACA,OAAO,CAAC,CAAC,EAAE3B,QAAQ,CAAC4B,QAAQ,EAAEd,IAAI,CAACe,SAAS,CAAC,CAAC,CAACC,IAAI,CAAC,OAAO,EAAGC,GAAG,IAAK;QAClEjB,IAAI,CAACkB,YAAY,CAACD,GAAG,EAAElB,QAAQ,CAAC;MACpC,CAAC,CAAC,EAAEA,QAAQ,EAAGkB,GAAG,IAAK;QACnB,IAAIA,GAAG,EAAE;UACLjB,IAAI,CAACmB,WAAW,CAACF,GAAG,CAAC;QACzB;MACJ,CAAC,CAAC;IACN;IACA,MAAMG,mBAAmB,GAAGrB,QAAQ,CAACS,SAAS,CAAC,cAAc,CAAC;IAC9D,IAAI,OAAOY,mBAAmB,KAAK,QAAQ,IACvC,CAACA,mBAAmB,CAACC,UAAU,CAAC,kBAAkB,CAAC,IACnDrB,IAAI,EAAEC,UAAU,IAAI1B,QAAQ,CAAC+C,UAAU,CAACC,WAAW,EAAE;MACrD,IAAI,CAAC9B,MAAM,CAAC+B,IAAI,CAAC,uGAAuG,CAAC;MACzHzB,QAAQ,CAACY,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC1D;IACA,OAAO,CAAC,CAAC,EAAElC,cAAc,CAACgD,QAAQ,EAAEzB,IAAI,CAAC,GAAGD,QAAQ,CAAC2B,IAAI,CAAC1B,IAAI,CAAC,GAAGD,QAAQ,CAACK,IAAI,CAACuB,MAAM,CAAC3B,IAAI,CAAC,CAAC;EACjG;EACAE,MAAMA,CAACH,QAAQ,EAAEE,UAAU,EAAE;IACzB,OAAOF,QAAQ,CAACG,MAAM,CAACD,UAAU,CAAC;EACtC;EACA2B,GAAGA,CAAC7B,QAAQ,EAAE8B,OAAO,EAAE;IACnB,OAAO9B,QAAQ,CAAC6B,GAAG,CAACC,OAAO,CAAC;EAChC;EACAC,MAAMA,CAAC/B,QAAQ,EAAEgC,IAAI,EAAEC,OAAO,EAAE;IAC5B,OAAOjC,QAAQ,CAAC+B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC;EACzC;EACAC,QAAQA,CAAClC,QAAQ,EAAEE,UAAU,EAAEiC,GAAG,EAAE;IAChC,OAAOnC,QAAQ,CAACkC,QAAQ,CAAChC,UAAU,EAAEiC,GAAG,CAAC;EAC7C;EACAC,eAAeA,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC7B,OAAO,IAAI,CAACC,GAAG,CAACF,OAAO,CAAC;EAC5B;EACAG,kBAAkBA,CAACH,OAAO,EAAEC,MAAM,EAAE;IAChC,OAAO,IAAI,CAACC,GAAG,CAACF,OAAO,CAAC;EAC5B;EACAI,aAAaA,CAACzC,QAAQ,EAAE;IACpB,OAAOA,QAAQ,CAAC0C,WAAW;EAC/B;EACAjC,SAASA,CAACT,QAAQ,EAAEJ,IAAI,EAAE;IACtB,OAAOI,QAAQ,CAAC2C,GAAG,CAAC/C,IAAI,CAAC;EAC7B;EACAgB,SAASA,CAACZ,QAAQ,EAAEJ,IAAI,EAAEtB,KAAK,EAAE;IAC7B,OAAO0B,QAAQ,CAAC4C,GAAG,CAAChD,IAAI,EAAEtB,KAAK,CAAC;EACpC;EACAuE,YAAYA,CAAC7C,QAAQ,EAAEJ,IAAI,EAAEtB,KAAK,EAAE;IAChC,OAAO0B,QAAQ,CAAC8C,MAAM,CAAClD,IAAI,EAAEtB,KAAK,CAAC;EACvC;EACAyE,MAAMA,CAACC,IAAI,EAAE,GAAGC,IAAI,EAAE;IAClB,OAAO,IAAI,CAACC,UAAU,CAACH,MAAM,CAACC,IAAI,EAAE,GAAGC,IAAI,CAAC;EAChD;EACAE,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACC,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAAC,IAAI,CAACF,UAAU,EAAE;MAClB,OAAOxC,SAAS;IACpB;IACA,OAAO,IAAI2C,OAAO,CAACC,OAAO,IAAI,IAAI,CAACJ,UAAU,CAACC,KAAK,CAACG,OAAO,CAAC,CAAC;EACjE;EACAV,GAAGA,CAAC,GAAGK,IAAI,EAAE;IACT,OAAO,IAAI,CAAC1D,QAAQ,CAACqD,GAAG,CAAC,GAAGK,IAAI,CAAC;EACrC;EACAM,MAAMA,CAAC,GAAGN,IAAI,EAAE;IACZ,OAAO,IAAI,CAAC1D,QAAQ,CAACgE,MAAM,CAAC,GAAGN,IAAI,CAAC;EACxC;EACAO,OAAOA,CAAC,GAAGP,IAAI,EAAE;IACb,OAAO,IAAI,CAAC1D,QAAQ,CAACiE,OAAO,CAAC,GAAGP,IAAI,CAAC;EACzC;EACAQ,MAAMA,CAAC,GAAGR,IAAI,EAAE;IACZ,OAAO,IAAI,CAAC1D,QAAQ,CAACkE,MAAM,CAAC,GAAGR,IAAI,CAAC;EACxC;EACAS,eAAeA,CAACC,IAAI,EAAE1B,OAAO,EAAE;IAC3B,IAAIA,OAAO,IAAIA,OAAO,CAACK,MAAM,EAAE;MAC3B,OAAO,IAAI,CAACC,GAAG,CAACN,OAAO,CAACK,MAAM,EAAEtD,OAAO,CAAC4E,MAAM,CAACD,IAAI,EAAE1B,OAAO,CAAC,CAAC;IAClE;IACA,OAAO,IAAI,CAACM,GAAG,CAACvD,OAAO,CAAC4E,MAAM,CAACD,IAAI,EAAE1B,OAAO,CAAC,CAAC;EAClD;EACA4B,eAAeA,CAACF,IAAI,EAAE;IAClB,OAAO,IAAI,CAACf,GAAG,CAAC,OAAO,EAAEe,IAAI,CAAC;EAClC;EACAG,aAAaA,CAACL,MAAM,EAAE;IAClB,OAAO,IAAI,CAACb,GAAG,CAAC,aAAa,EAAEa,MAAM,CAAC;EAC1C;EACAM,kBAAkBA,CAACC,OAAO,EAAE;IACxB,OAAOA,OAAO,CAACC,QAAQ;EAC3B;EACAC,gBAAgBA,CAACF,OAAO,EAAE;IACtB,OAAOA,OAAO,CAACG,MAAM;EACzB;EACAC,aAAaA,CAACJ,OAAO,EAAE;IACnB,OAAOA,OAAO,CAACK,WAAW;EAC9B;EACAC,UAAUA,CAACrC,OAAO,EAAE;IAChB,OAAO,IAAI,CAACM,GAAG,CAACxD,IAAI,CAACkD,OAAO,CAAC,CAAC;EAClC;EACAsC,uBAAuBA,CAACC,aAAa,EAAE;IACnC,OAAO,IAAI,CAAChF,mBAAmB,CAC1BmD,GAAG,CAAC,IAAI,CAACpD,QAAQ,EAAEiF,aAAa,CAAC,CACjCC,IAAI,CAAC,IAAI,CAAClF,QAAQ,CAAC;EAC5B;EACAmF,cAAcA,CAACzC,OAAO,EAAE;IACpB,MAAM0C,cAAc,GAAG1C,OAAO,IAAIA,OAAO,CAAC2C,YAAY;IACtD,IAAID,cAAc,EAAE;MAChB,IAAI,CAACzB,UAAU,GAAGhE,KAAK,CAAC2F,YAAY,CAAC5C,OAAO,CAAC2C,YAAY,EAAE,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC;IAClF,CAAC,MACI;MACD,IAAI,CAAC5B,UAAU,GAAGjE,IAAI,CAAC4F,YAAY,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;IAC3D;IACA,IAAI7C,OAAO,EAAE8C,qBAAqB,EAAE;MAChC,IAAI,CAACC,oBAAoB,CAAC,CAAC;IAC/B;EACJ;EACAC,wBAAwBA,CAAC3C,MAAM,EAAE4C,OAAO,EAAE;IACtC,MAAMC,qBAAqB,GAAG,CAAC,CAAC,EAAE/F,8BAA8B,CAACgG,oBAAoB,EAAEF,OAAO,CAAC;IAC/F,MAAMG,2BAA2B,GAAG,CAAC,CAAC,EAAEjG,8BAA8B,CAACgG,oBAAoB,EAAEF,OAAO,EAAE;MAClGI,QAAQ,EAAE;IACd,CAAC,CAAC;IACF,MAAMC,gBAAgB,GAAG;MACrBC,UAAU,EAAE,CAAC,CAAC,EAAE3G,aAAa,CAAC8C,IAAI,EAAEwD,qBAAqB,CAAC;MAC1DM,gBAAgB,EAAE,CAAC,CAAC,EAAE5G,aAAa,CAAC6G,UAAU,EAAEL,2BAA2B;IAC/E,CAAC;IACDlH,MAAM,CAACwH,IAAI,CAACJ,gBAAgB,CAAC,CACxBK,MAAM,CAACC,MAAM,IAAI,CAAC,IAAI,CAACC,mBAAmB,CAACD,MAAM,CAAC,CAAC,CACnDE,OAAO,CAACC,SAAS,IAAI,IAAI,CAACzD,GAAG,CAACgD,gBAAgB,CAACS,SAAS,CAAC,CAAC,CAAC;EACpE;EACAC,aAAaA,CAACtF,IAAI,EAAEuE,OAAO,EAAEjD,OAAO,EAAE;IAClC,MAAMiE,aAAa,GAAG,CAAC,CAAC,EAAE9G,8BAA8B,CAACgG,oBAAoB,EAAEF,OAAO,EAAEjD,OAAO,CAAC;IAChG,MAAM4D,MAAM,GAAG/G,UAAU,CAAC6B,IAAI,CAAC,CAACuF,aAAa,CAAC;IAC9C,IAAI,CAAC3D,GAAG,CAACsD,MAAM,CAAC;IAChB,OAAO,IAAI;EACf;EACAM,QAAQA,CAACC,GAAG,EAAE9H,KAAK,EAAE;IACjB,IAAI,CAACiB,QAAQ,CAAC8G,MAAM,CAACD,GAAG,CAAC,GAAG9H,KAAK;IACjC,OAAO,IAAI;EACf;EACAgI,OAAOA,CAAA,EAAG;IACN,OAAO,SAAS;EACpB;EACAC,kBAAkBA,CAAClE,OAAO,EAAEmE,OAAO,EAAEC,iBAAiB,EAAE;IACpD,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;MACxC,IAAI,CAACA,IAAI,EAAE;QACP,MAAM,IAAIrI,QAAQ,CAACsI,4BAA4B,CAAC,oDAAoD,CAAC;MACzG;MACA,OAAOD,IAAI,CAAC,CAAC;IACjB,CAAC;IACD,IAAIL,OAAO,KAAKhI,QAAQ,CAACuI,eAAe;IACpC;IACAN,iBAAiB,CAAC9F,IAAI,KAAKnC,QAAQ,CAACwI,cAAc,CAACC,GAAG,EAAE;MACxD,MAAMC,sBAAsB,GAAGA,CAACP,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAKxE,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;MAC1E,OAAOK,sBAAsB;IACjC;IACA;IACA,IAAIT,iBAAiB,CAAC9F,IAAI,KAAKnC,QAAQ,CAACwI,cAAc,CAACG,MAAM,EAAE;MAC3D,MAAMC,0BAA0B,GAAGA,CAACT,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;QACnD,MAAMQ,gBAAgB,GAAGZ,iBAAiB,CAACa,SAAS,CAACX,GAAG,CAAC;QACzD,IAAIY,KAAK,CAACC,OAAO,CAAChB,OAAO,CAAC,EAAE;UACxB,IAAIe,KAAK,CAACC,OAAO,CAACH,gBAAgB,CAAC,IAC/Bb,OAAO,CAACZ,MAAM,CAAC6B,CAAC,IAAIJ,gBAAgB,CAACK,QAAQ,CAACD,CAAC,CAAC,CAAC,CAAC3G,MAAM,EAAE;YAC1D,OAAOuB,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;UAClC;UACA,IAAI,CAAC,CAAC,EAAEnI,cAAc,CAACiJ,QAAQ,EAAEN,gBAAgB,CAAC,IAC9Cb,OAAO,CAACkB,QAAQ,CAACL,gBAAgB,CAAC,EAAE;YACpC,OAAOhF,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;UAClC;QACJ,CAAC,MACI,IAAI,CAAC,CAAC,EAAEnI,cAAc,CAACiJ,QAAQ,EAAEnB,OAAO,CAAC,EAAE;UAC5C;UACA;UACA;UACA;UACA,IAAIe,KAAK,CAACC,OAAO,CAACH,gBAAgB,CAAC,IAC/BA,gBAAgB,CAACK,QAAQ,CAAClB,OAAO,CAAC,EAAE;YACpC,OAAOnE,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;UAClC;UACA,IAAI,CAAC,CAAC,EAAEnI,cAAc,CAACiJ,QAAQ,EAAEN,gBAAgB,CAAC,IAAIb,OAAO,KAAKa,gBAAgB,EAAE;YAChF,OAAOhF,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;UAClC;QACJ;QACA,OAAOH,eAAe,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;MAC1C,CAAC;MACD,OAAOO,0BAA0B;IACrC;IACA;IACA,IAAIX,iBAAiB,CAAC9F,IAAI,KAAKnC,QAAQ,CAACwI,cAAc,CAACY,UAAU,EAAE;MAC/D,MAAMC,6BAA6B,GAAGA,CAAClB,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;QACtD,MAAMiB,iBAAiB,GAAG,QAAQ;QAClC,MAAMC,iBAAiB,GAAGpB,GAAG,CAACqB,OAAO,GAAGF,iBAAiB,CAAC,IACtDnB,GAAG,CAACqB,OAAO,GAAGF,iBAAiB,CAACG,WAAW,CAAC,CAAC,CAAC;QAClD,MAAMC,4BAA4B,GAAGH,iBAAiB,GAChDA,iBAAiB,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAC/BzH,SAAS;QACf;QACA,IAAI,CAAC,CAAC,EAAEhC,cAAc,CAAC0J,WAAW,EAAEF,4BAA4B,CAAC,EAAE;UAC/D,IAAIX,KAAK,CAACC,OAAO,CAAChB,OAAO,CAAC,EAAE;YACxB,IAAIA,OAAO,CAACkB,QAAQ,CAAClJ,QAAQ,CAACuI,eAAe,CAAC,EAAE;cAC5C,OAAO1E,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;YAClC;UACJ;QACJ,CAAC,MACI;UACD,MAAMwB,aAAa,GAAGH,4BAA4B,CAACC,KAAK,CAAC1B,iBAAiB,CAACL,GAAG,CAAC,CAAC,CAAC,CAAC;UAClF,IAAImB,KAAK,CAACC,OAAO,CAAChB,OAAO,CAAC,EAAE;YACxB,IAAIA,OAAO,CAACkB,QAAQ,CAACW,aAAa,CAAC,EAAE;cACjC,OAAOhG,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;YAClC;UACJ,CAAC,MACI,IAAI,CAAC,CAAC,EAAEnI,cAAc,CAACiJ,QAAQ,EAAEnB,OAAO,CAAC,EAAE;YAC5C,IAAIA,OAAO,KAAK6B,aAAa,EAAE;cAC3B,OAAOhG,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;YAClC;UACJ;QACJ;QACA,OAAOH,eAAe,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;MAC1C,CAAC;MACD,OAAOgB,6BAA6B;IACxC;IACA;IACA,IAAIpB,iBAAiB,CAAC9F,IAAI,KAAKnC,QAAQ,CAACwI,cAAc,CAACsB,MAAM,EAAE;MAC3D,MAAMC,0BAA0B,GAAGA,CAAC5B,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;QACnD,MAAM2B,4BAA4B,GAAG7B,GAAG,CAACqB,OAAO,GAAGvB,iBAAiB,CAACgC,MAAM,CAAC,IACxE9B,GAAG,CAACqB,OAAO,GAAGvB,iBAAiB,CAACgC,MAAM,CAACR,WAAW,CAAC,CAAC,CAAC;QACzD;QACA,IAAI,CAAC,CAAC,EAAEvJ,cAAc,CAAC0J,WAAW,EAAEI,4BAA4B,CAAC,EAAE;UAC/D,IAAIjB,KAAK,CAACC,OAAO,CAAChB,OAAO,CAAC,EAAE;YACxB,IAAIA,OAAO,CAACkB,QAAQ,CAAClJ,QAAQ,CAACuI,eAAe,CAAC,EAAE;cAC5C,OAAO1E,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;YAClC;UACJ;QACJ,CAAC,MACI;UACD,IAAIU,KAAK,CAACC,OAAO,CAAChB,OAAO,CAAC,EAAE;YACxB,IAAIA,OAAO,CAACkB,QAAQ,CAACc,4BAA4B,CAAC,EAAE;cAChD,OAAOnG,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;YAClC;UACJ,CAAC,MACI,IAAI,CAAC,CAAC,EAAEnI,cAAc,CAACiJ,QAAQ,EAAEnB,OAAO,CAAC,EAAE;YAC5C,IAAIA,OAAO,KAAKgC,4BAA4B,EAAE;cAC1C,OAAOnG,OAAO,CAACsE,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;YAClC;UACJ;QACJ;QACA,OAAOH,eAAe,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;MAC1C,CAAC;MACD,OAAO0B,0BAA0B;IACrC;EACJ;EACAvD,oBAAoBA,CAAA,EAAG;IACnB,IAAI,CAAC9B,UAAU,CAACwF,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;MACzC,IAAI,CAAC9I,eAAe,CAAC+I,GAAG,CAACD,MAAM,CAAC;MAChCA,MAAM,CAACD,EAAE,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC7I,eAAe,CAACgJ,MAAM,CAACF,MAAM,CAAC,CAAC;IACjE,CAAC,CAAC;EACN;EACAvF,oBAAoBA,CAAA,EAAG;IACnB,KAAK,MAAMuF,MAAM,IAAI,IAAI,CAAC9I,eAAe,EAAE;MACvC8I,MAAM,CAACG,OAAO,CAAC,CAAC;MAChB,IAAI,CAACjJ,eAAe,CAACgJ,MAAM,CAACF,MAAM,CAAC;IACvC;EACJ;EACA7C,mBAAmBA,CAAClG,IAAI,EAAE;IACtB,MAAMmJ,GAAG,GAAG,IAAI,CAACjE,WAAW,CAAC,CAAC;IAC9B,OAAQ,CAAC,CAACiE,GAAG,CAACC,OAAO,IACjB,CAAC,CAACD,GAAG,CAACC,OAAO,CAACC,KAAK,IACnB,CAAC,CAAC,EAAEvK,cAAc,CAACwK,UAAU,EAAEH,GAAG,CAACC,OAAO,CAACC,KAAK,CAACrD,MAAM,CAAC,IACxDmD,GAAG,CAACC,OAAO,CAACC,KAAK,CAACE,IAAI,CAAEC,KAAK,IAAKA,KAAK,IAAIA,KAAK,CAACC,MAAM,IAAID,KAAK,CAACC,MAAM,CAACzJ,IAAI,KAAKA,IAAI,CAAC;EAC9F;AACJ;AACAvB,OAAO,CAACE,cAAc,GAAGA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}