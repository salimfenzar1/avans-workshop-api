{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUrlValidator from 'validator/lib/isURL';\nexport const IS_URL = 'isUrl';\n/**\n * Checks if the string is a url.\n * If given value is not a string, then it returns false.\n */\nexport function isURL(value, options) {\n  return typeof value === 'string' && isUrlValidator(value, options);\n}\n/**\n * Checks if the string is a url.\n * If given value is not a string, then it returns false.\n */\nexport function IsUrl(options, validationOptions) {\n  return ValidateBy({\n    name: IS_URL,\n    constraints: [options],\n    validator: {\n      validate: (value, args) => isURL(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a URL address', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isUrlValidator","IS_URL","isURL","value","options","IsUrl","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsUrl.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUrlValidator from 'validator/lib/isURL';\nexport const IS_URL = 'isUrl';\n/**\n * Checks if the string is a url.\n * If given value is not a string, then it returns false.\n */\nexport function isURL(value, options) {\n    return typeof value === 'string' && isUrlValidator(value, options);\n}\n/**\n * Checks if the string is a url.\n * If given value is not a string, then it returns false.\n */\nexport function IsUrl(options, validationOptions) {\n    return ValidateBy({\n        name: IS_URL,\n        constraints: [options],\n        validator: {\n            validate: (value, args) => isURL(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a URL address', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,cAAc,MAAM,qBAAqB;AAChD,OAAO,MAAMC,MAAM,GAAG,OAAO;AAC7B;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACC,KAAK,EAAEC,OAAO,EAAE;EAClC,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,cAAc,CAACG,KAAK,EAAEC,OAAO,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACD,OAAO,EAAEE,iBAAiB,EAAE;EAC9C,OAAOP,UAAU,CAAC;IACdQ,IAAI,EAAEN,MAAM;IACZO,WAAW,EAAE,CAACJ,OAAO,CAAC;IACtBK,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACP,KAAK,EAAEQ,IAAI,KAAKT,KAAK,CAACC,KAAK,EAAEQ,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MACxGI,cAAc,EAAEd,YAAY,CAACe,UAAU,IAAIA,UAAU,GAAG,iCAAiC,EAAEP,iBAAiB;IAChH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}