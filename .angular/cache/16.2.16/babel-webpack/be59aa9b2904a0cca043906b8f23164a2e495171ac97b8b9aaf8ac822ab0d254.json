{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PathsExplorer = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nclass PathsExplorer {\n  constructor(metadataScanner) {\n    this.metadataScanner = metadataScanner;\n  }\n  scanForPaths(instance, prototype) {\n    const instancePrototype = (0, shared_utils_1.isUndefined)(prototype) ? Object.getPrototypeOf(instance) : prototype;\n    return this.metadataScanner.getAllMethodNames(instancePrototype).reduce((acc, method) => {\n      const route = this.exploreMethodMetadata(instance, instancePrototype, method);\n      if (route) {\n        acc.push(route);\n      }\n      return acc;\n    }, []);\n  }\n  exploreMethodMetadata(instance, prototype, methodName) {\n    const instanceCallback = instance[methodName];\n    const prototypeCallback = prototype[methodName];\n    const routePath = Reflect.getMetadata(constants_1.PATH_METADATA, prototypeCallback);\n    if ((0, shared_utils_1.isUndefined)(routePath)) {\n      return null;\n    }\n    const requestMethod = Reflect.getMetadata(constants_1.METHOD_METADATA, prototypeCallback);\n    const version = Reflect.getMetadata(constants_1.VERSION_METADATA, prototypeCallback);\n    const path = (0, shared_utils_1.isString)(routePath) ? [(0, shared_utils_1.addLeadingSlash)(routePath)] : routePath.map(p => (0, shared_utils_1.addLeadingSlash)(p));\n    return {\n      path,\n      requestMethod,\n      targetCallback: instanceCallback,\n      methodName,\n      version\n    };\n  }\n}\nexports.PathsExplorer = PathsExplorer;","map":{"version":3,"names":["Object","defineProperty","exports","value","PathsExplorer","constants_1","require","shared_utils_1","constructor","metadataScanner","scanForPaths","instance","prototype","instancePrototype","isUndefined","getPrototypeOf","getAllMethodNames","reduce","acc","method","route","exploreMethodMetadata","push","methodName","instanceCallback","prototypeCallback","routePath","Reflect","getMetadata","PATH_METADATA","requestMethod","METHOD_METADATA","version","VERSION_METADATA","path","isString","addLeadingSlash","map","p","targetCallback"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/router/paths-explorer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PathsExplorer = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nclass PathsExplorer {\n    constructor(metadataScanner) {\n        this.metadataScanner = metadataScanner;\n    }\n    scanForPaths(instance, prototype) {\n        const instancePrototype = (0, shared_utils_1.isUndefined)(prototype)\n            ? Object.getPrototypeOf(instance)\n            : prototype;\n        return this.metadataScanner\n            .getAllMethodNames(instancePrototype)\n            .reduce((acc, method) => {\n            const route = this.exploreMethodMetadata(instance, instancePrototype, method);\n            if (route) {\n                acc.push(route);\n            }\n            return acc;\n        }, []);\n    }\n    exploreMethodMetadata(instance, prototype, methodName) {\n        const instanceCallback = instance[methodName];\n        const prototypeCallback = prototype[methodName];\n        const routePath = Reflect.getMetadata(constants_1.PATH_METADATA, prototypeCallback);\n        if ((0, shared_utils_1.isUndefined)(routePath)) {\n            return null;\n        }\n        const requestMethod = Reflect.getMetadata(constants_1.METHOD_METADATA, prototypeCallback);\n        const version = Reflect.getMetadata(constants_1.VERSION_METADATA, prototypeCallback);\n        const path = (0, shared_utils_1.isString)(routePath)\n            ? [(0, shared_utils_1.addLeadingSlash)(routePath)]\n            : routePath.map((p) => (0, shared_utils_1.addLeadingSlash)(p));\n        return {\n            path,\n            requestMethod,\n            targetCallback: instanceCallback,\n            methodName,\n            version,\n        };\n    }\n}\nexports.PathsExplorer = PathsExplorer;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,MAAMC,WAAW,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AACvD,MAAMC,cAAc,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AACnE,MAAMF,aAAa,CAAC;EAChBI,WAAWA,CAACC,eAAe,EAAE;IACzB,IAAI,CAACA,eAAe,GAAGA,eAAe;EAC1C;EACAC,YAAYA,CAACC,QAAQ,EAAEC,SAAS,EAAE;IAC9B,MAAMC,iBAAiB,GAAG,CAAC,CAAC,EAAEN,cAAc,CAACO,WAAW,EAAEF,SAAS,CAAC,GAC9DZ,MAAM,CAACe,cAAc,CAACJ,QAAQ,CAAC,GAC/BC,SAAS;IACf,OAAO,IAAI,CAACH,eAAe,CACtBO,iBAAiB,CAACH,iBAAiB,CAAC,CACpCI,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;MACzB,MAAMC,KAAK,GAAG,IAAI,CAACC,qBAAqB,CAACV,QAAQ,EAAEE,iBAAiB,EAAEM,MAAM,CAAC;MAC7E,IAAIC,KAAK,EAAE;QACPF,GAAG,CAACI,IAAI,CAACF,KAAK,CAAC;MACnB;MACA,OAAOF,GAAG;IACd,CAAC,EAAE,EAAE,CAAC;EACV;EACAG,qBAAqBA,CAACV,QAAQ,EAAEC,SAAS,EAAEW,UAAU,EAAE;IACnD,MAAMC,gBAAgB,GAAGb,QAAQ,CAACY,UAAU,CAAC;IAC7C,MAAME,iBAAiB,GAAGb,SAAS,CAACW,UAAU,CAAC;IAC/C,MAAMG,SAAS,GAAGC,OAAO,CAACC,WAAW,CAACvB,WAAW,CAACwB,aAAa,EAAEJ,iBAAiB,CAAC;IACnF,IAAI,CAAC,CAAC,EAAElB,cAAc,CAACO,WAAW,EAAEY,SAAS,CAAC,EAAE;MAC5C,OAAO,IAAI;IACf;IACA,MAAMI,aAAa,GAAGH,OAAO,CAACC,WAAW,CAACvB,WAAW,CAAC0B,eAAe,EAAEN,iBAAiB,CAAC;IACzF,MAAMO,OAAO,GAAGL,OAAO,CAACC,WAAW,CAACvB,WAAW,CAAC4B,gBAAgB,EAAER,iBAAiB,CAAC;IACpF,MAAMS,IAAI,GAAG,CAAC,CAAC,EAAE3B,cAAc,CAAC4B,QAAQ,EAAET,SAAS,CAAC,GAC9C,CAAC,CAAC,CAAC,EAAEnB,cAAc,CAAC6B,eAAe,EAAEV,SAAS,CAAC,CAAC,GAChDA,SAAS,CAACW,GAAG,CAAEC,CAAC,IAAK,CAAC,CAAC,EAAE/B,cAAc,CAAC6B,eAAe,EAAEE,CAAC,CAAC,CAAC;IAClE,OAAO;MACHJ,IAAI;MACJJ,aAAa;MACbS,cAAc,EAAEf,gBAAgB;MAChCD,UAAU;MACVS;IACJ,CAAC;EACL;AACJ;AACA9B,OAAO,CAACE,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}