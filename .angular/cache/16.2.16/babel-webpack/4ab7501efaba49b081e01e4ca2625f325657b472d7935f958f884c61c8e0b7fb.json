{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMimeTypeValidator from 'validator/lib/isMimeType';\nexport const IS_MIME_TYPE = 'isMimeType';\n/**\n * Check if the string matches to a valid MIME type format\n * If given value is not a string, then it returns false.\n */\nexport function isMimeType(value) {\n  return typeof value === 'string' && isMimeTypeValidator(value);\n}\n/**\n * Check if the string matches to a valid MIME type format\n * If given value is not a string, then it returns false.\n */\nexport function IsMimeType(validationOptions) {\n  return ValidateBy({\n    name: IS_MIME_TYPE,\n    validator: {\n      validate: (value, args) => isMimeType(value),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be MIME type format', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isMimeTypeValidator","IS_MIME_TYPE","isMimeType","value","IsMimeType","validationOptions","name","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsMimeType.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMimeTypeValidator from 'validator/lib/isMimeType';\nexport const IS_MIME_TYPE = 'isMimeType';\n/**\n * Check if the string matches to a valid MIME type format\n * If given value is not a string, then it returns false.\n */\nexport function isMimeType(value) {\n    return typeof value === 'string' && isMimeTypeValidator(value);\n}\n/**\n * Check if the string matches to a valid MIME type format\n * If given value is not a string, then it returns false.\n */\nexport function IsMimeType(validationOptions) {\n    return ValidateBy({\n        name: IS_MIME_TYPE,\n        validator: {\n            validate: (value, args) => isMimeType(value),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be MIME type format', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,mBAAmB,MAAM,0BAA0B;AAC1D,OAAO,MAAMC,YAAY,GAAG,YAAY;AACxC;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAE;EAC9B,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIH,mBAAmB,CAACG,KAAK,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,iBAAiB,EAAE;EAC1C,OAAON,UAAU,CAAC;IACdO,IAAI,EAAEL,YAAY;IAClBM,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACL,KAAK,EAAEM,IAAI,KAAKP,UAAU,CAACC,KAAK,CAAC;MAC5CO,cAAc,EAAEZ,YAAY,CAACa,UAAU,IAAIA,UAAU,GAAG,oCAAoC,EAAEN,iBAAiB;IACnH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}