{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar AuthService_1;\nimport { __decorate, __metadata, __param } from \"tslib\";\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConflictException, UnauthorizedException } from '@nestjs/common/exceptions';\nimport { User as UserModel } from '@avans-nx-workshop/backend/user';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nexport let AuthService = AuthService_1 = class AuthService {\n  constructor(userModel, jwtService) {\n    this.userModel = userModel;\n    this.jwtService = jwtService;\n    //\n    this.logger = new Logger(AuthService_1.name);\n  }\n  validateUser(credentials) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.logger.log('validateUser');\n      const user = yield _this.userModel.findOne({\n        emailAddress: credentials.emailAddress\n      });\n      if (user && user.password === credentials.password) {\n        return user;\n      }\n      return null;\n    })();\n  }\n  login(credentials) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.logger.log('login ' + credentials.emailAddress);\n      return yield _this2.userModel.findOne({\n        emailAddress: credentials.emailAddress\n      }).select('+password').exec().then(user => {\n        if (user && user.password === credentials.password) {\n          const payload = {\n            user_id: user._id\n          };\n          return {\n            _id: user._id,\n            name: user.name,\n            emailAddress: user.emailAddress,\n            profileImgUrl: user.profileImgUrl,\n            token: _this2.jwtService.sign(payload)\n          };\n        } else {\n          const errMsg = 'Email not found or password invalid';\n          _this2.logger.debug(errMsg);\n          throw new UnauthorizedException(errMsg);\n        }\n      }).catch(error => {\n        return error;\n      });\n    })();\n  }\n  register(user) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.logger.log(`Registering user: ${user.name}`);\n      // Check if the user already exists\n      const existingUser = yield _this3.userModel.findOne({\n        emailAddress: user.emailAddress\n      });\n      if (existingUser) {\n        _this3.logger.debug('User already exists');\n        throw new ConflictException('User already exists');\n      }\n      // Create the user in the database\n      _this3.logger.debug('User not found, creating new user');\n      const createdUser = yield _this3.userModel.create(user);\n      // Generate a JWT token for the user\n      const payload = {\n        user_id: createdUser._id.toString()\n      }; // Ensure the ObjectID is converted to a string\n      const token = _this3.jwtService.sign(payload);\n      // Return the created user with the token\n      return {\n        name: createdUser.name,\n        emailAddress: createdUser.emailAddress,\n        profileImgUrl: createdUser.profileImgUrl,\n        role: createdUser.role,\n        token: token // Include the token\n      };\n    })();\n  }\n};\n\nAuthService = AuthService_1 = __decorate([Injectable(), __param(0, InjectModel(UserModel.name)), __metadata(\"design:paramtypes\", [Model, JwtService])], AuthService);","map":{"version":3,"names":["Injectable","Logger","ConflictException","UnauthorizedException","User","UserModel","JwtService","InjectModel","Model","AuthService","AuthService_1","constructor","userModel","jwtService","logger","name","validateUser","credentials","_this","_asyncToGenerator","log","user","findOne","emailAddress","password","login","_this2","select","exec","then","payload","user_id","_id","profileImgUrl","token","sign","errMsg","debug","catch","error","register","_this3","existingUser","createdUser","create","toString","role","__decorate","__param"],"sources":["C:\\Users\\salim\\Dev\\avans-nx-workshop-2024\\avans-nx-workshop\\libs\\backend\\auth\\src\\lib\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport {\r\n    ConflictException,\r\n    UnauthorizedException\r\n} from '@nestjs/common/exceptions';\r\nimport { HttpStatus } from '@nestjs/common/enums';\r\nimport {\r\n    User as UserModel,\r\n    UserDocument\r\n} from '@avans-nx-workshop/backend/user';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { IUserCredentials, IUserIdentity } from '@avans-nx-workshop/shared/api';\r\nimport { CreateUserDto } from '@avans-nx-workshop/backend/dto';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    //\r\n    private readonly logger = new Logger(AuthService.name);\r\n\r\n    constructor(\r\n        @InjectModel(UserModel.name) private userModel: Model<UserDocument>,\r\n        private jwtService: JwtService\r\n    ) {}\r\n\r\n    async validateUser(credentials: IUserCredentials): Promise<any> {\r\n        this.logger.log('validateUser');\r\n        const user = await this.userModel.findOne({\r\n            emailAddress: credentials.emailAddress\r\n        });\r\n        if (user && user.password === credentials.password) {\r\n            return user;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    async login(credentials: IUserCredentials): Promise<IUserIdentity> {\r\n        this.logger.log('login ' + credentials.emailAddress);\r\n        return await this.userModel\r\n            .findOne({\r\n                emailAddress: credentials.emailAddress\r\n            })\r\n            .select('+password')\r\n            .exec()\r\n            .then((user) => {\r\n                if (user && user.password === credentials.password) {\r\n                    const payload = {\r\n                        user_id: user._id\r\n                    };\r\n                    return {\r\n                        _id: user._id,\r\n                        name: user.name,\r\n                        emailAddress: user.emailAddress,\r\n                        profileImgUrl: user.profileImgUrl,\r\n                        token: this.jwtService.sign(payload)\r\n                    };\r\n                } else {\r\n                    const errMsg = 'Email not found or password invalid';\r\n                    this.logger.debug(errMsg);\r\n                    throw new UnauthorizedException(errMsg);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                return error;\r\n            });\r\n    }\r\n\r\n    async register(user: CreateUserDto): Promise<IUserIdentity> {\r\n        this.logger.log(`Registering user: ${user.name}`);\r\n    \r\n        // Check if the user already exists\r\n        const existingUser = await this.userModel.findOne({ emailAddress: user.emailAddress });\r\n        if (existingUser) {\r\n            this.logger.debug('User already exists');\r\n            throw new ConflictException('User already exists');\r\n        }\r\n    \r\n        // Create the user in the database\r\n        this.logger.debug('User not found, creating new user');\r\n        const createdUser = await this.userModel.create(user);\r\n    \r\n        // Generate a JWT token for the user\r\n        const payload = { user_id: createdUser._id.toString() }; // Ensure the ObjectID is converted to a string\r\n        const token = this.jwtService.sign(payload);\r\n    \r\n        // Return the created user with the token\r\n        return {\r\n            name: createdUser.name,\r\n            emailAddress: createdUser.emailAddress,\r\n            profileImgUrl: createdUser.profileImgUrl,\r\n            role: createdUser.role,\r\n            token: token, // Include the token\r\n        };\r\n    }\r\n    \r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}