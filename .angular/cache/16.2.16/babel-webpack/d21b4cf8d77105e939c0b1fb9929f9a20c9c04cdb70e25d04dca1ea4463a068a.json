{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseArrayPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nconst validation_pipe_1 = require(\"./validation.pipe\");\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\nconst DEFAULT_ARRAY_SEPARATOR = ',';\n/**\n * Defines the built-in ParseArray Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseArrayPipe = class ParseArrayPipe {\n  constructor(options = {}) {\n    this.options = options;\n    this.validationPipe = new validation_pipe_1.ValidationPipe({\n      transform: true,\n      validateCustomDecorators: true,\n      ...options\n    });\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST\n    } = options;\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  transform(value, metadata) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!value && !_this.options.optional) {\n        throw _this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n      } else if ((0, shared_utils_1.isNil)(value) && _this.options.optional) {\n        return value;\n      }\n      if (!Array.isArray(value)) {\n        if (!(0, shared_utils_1.isString)(value)) {\n          throw _this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n        } else {\n          try {\n            value = value.trim().split(_this.options.separator || DEFAULT_ARRAY_SEPARATOR);\n          } catch {\n            throw _this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n          }\n        }\n      }\n      if (_this.options.items) {\n        const validationMetadata = {\n          metatype: _this.options.items,\n          type: 'query'\n        };\n        const isExpectedTypePrimitive = _this.isExpectedTypePrimitive();\n        const toClassInstance = (item, index) => {\n          if (_this.options.items !== String) {\n            try {\n              item = JSON.parse(item);\n            } catch {}\n          }\n          if (isExpectedTypePrimitive) {\n            return _this.validatePrimitive(item, index);\n          }\n          return _this.validationPipe.transform(item, validationMetadata);\n        };\n        if (_this.options.stopAtFirstError === false) {\n          // strict compare to \"false\" to make sure\n          // that this option is disabled by default\n          let errors = [];\n          const targetArray = value;\n          for (let i = 0; i < targetArray.length; i++) {\n            try {\n              targetArray[i] = yield toClassInstance(targetArray[i]);\n            } catch (err) {\n              let message;\n              if (err.getResponse) {\n                const response = err.getResponse();\n                if (Array.isArray(response.message)) {\n                  message = response.message.map(item => `[${i}] ${item}`);\n                } else {\n                  message = `[${i}] ${response.message}`;\n                }\n              } else {\n                message = err;\n              }\n              errors = errors.concat(message);\n            }\n          }\n          if (errors.length > 0) {\n            throw _this.exceptionFactory(errors);\n          }\n          return targetArray;\n        } else {\n          value = yield Promise.all(value.map(toClassInstance));\n        }\n      }\n      return value;\n    })();\n  }\n  isExpectedTypePrimitive() {\n    return [Boolean, Number, String].includes(this.options.items);\n  }\n  validatePrimitive(originalValue, index) {\n    if (this.options.items === Number) {\n      const value = originalValue !== null && originalValue !== '' ? +originalValue : NaN;\n      if (isNaN(value)) {\n        throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a number`);\n      }\n      return value;\n    } else if (this.options.items === String) {\n      if (!(0, shared_utils_1.isString)(originalValue)) {\n        return `${originalValue}`;\n      }\n    } else if (this.options.items === Boolean) {\n      if (typeof originalValue !== 'boolean') {\n        throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a boolean value`);\n      }\n    }\n    return originalValue;\n  }\n};\nexports.ParseArrayPipe = ParseArrayPipe;\nexports.ParseArrayPipe = ParseArrayPipe = tslib_1.__decorate([(0, injectable_decorator_1.Injectable)(), tslib_1.__param(0, (0, optional_decorator_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseArrayPipe);","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","ParseArrayPipe","tslib_1","injectable_decorator_1","optional_decorator_1","http_status_enum_1","http_error_by_code_util_1","shared_utils_1","validation_pipe_1","VALIDATION_ERROR_MESSAGE","DEFAULT_ARRAY_SEPARATOR","constructor","options","validationPipe","ValidationPipe","transform","validateCustomDecorators","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","metadata","_this","optional","isNil","Array","isArray","isString","trim","split","separator","items","validationMetadata","metatype","type","isExpectedTypePrimitive","toClassInstance","item","index","String","JSON","parse","validatePrimitive","stopAtFirstError","errors","targetArray","i","length","err","message","getResponse","response","map","concat","Promise","all","Boolean","Number","includes","originalValue","NaN","isNaN","isUndefined","__decorate","Injectable","__param","Optional","__metadata"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/common/pipes/parse-array.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseArrayPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nconst validation_pipe_1 = require(\"./validation.pipe\");\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\nconst DEFAULT_ARRAY_SEPARATOR = ',';\n/**\n * Defines the built-in ParseArray Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseArrayPipe = class ParseArrayPipe {\n    constructor(options = {}) {\n        this.options = options;\n        this.validationPipe = new validation_pipe_1.ValidationPipe({\n            transform: true,\n            validateCustomDecorators: true,\n            ...options,\n        });\n        const { exceptionFactory, errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        if (!value && !this.options.optional) {\n            throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n        }\n        else if ((0, shared_utils_1.isNil)(value) && this.options.optional) {\n            return value;\n        }\n        if (!Array.isArray(value)) {\n            if (!(0, shared_utils_1.isString)(value)) {\n                throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n            }\n            else {\n                try {\n                    value = value\n                        .trim()\n                        .split(this.options.separator || DEFAULT_ARRAY_SEPARATOR);\n                }\n                catch {\n                    throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n                }\n            }\n        }\n        if (this.options.items) {\n            const validationMetadata = {\n                metatype: this.options.items,\n                type: 'query',\n            };\n            const isExpectedTypePrimitive = this.isExpectedTypePrimitive();\n            const toClassInstance = (item, index) => {\n                if (this.options.items !== String) {\n                    try {\n                        item = JSON.parse(item);\n                    }\n                    catch { }\n                }\n                if (isExpectedTypePrimitive) {\n                    return this.validatePrimitive(item, index);\n                }\n                return this.validationPipe.transform(item, validationMetadata);\n            };\n            if (this.options.stopAtFirstError === false) {\n                // strict compare to \"false\" to make sure\n                // that this option is disabled by default\n                let errors = [];\n                const targetArray = value;\n                for (let i = 0; i < targetArray.length; i++) {\n                    try {\n                        targetArray[i] = await toClassInstance(targetArray[i]);\n                    }\n                    catch (err) {\n                        let message;\n                        if (err.getResponse) {\n                            const response = err.getResponse();\n                            if (Array.isArray(response.message)) {\n                                message = response.message.map((item) => `[${i}] ${item}`);\n                            }\n                            else {\n                                message = `[${i}] ${response.message}`;\n                            }\n                        }\n                        else {\n                            message = err;\n                        }\n                        errors = errors.concat(message);\n                    }\n                }\n                if (errors.length > 0) {\n                    throw this.exceptionFactory(errors);\n                }\n                return targetArray;\n            }\n            else {\n                value = await Promise.all(value.map(toClassInstance));\n            }\n        }\n        return value;\n    }\n    isExpectedTypePrimitive() {\n        return [Boolean, Number, String].includes(this.options.items);\n    }\n    validatePrimitive(originalValue, index) {\n        if (this.options.items === Number) {\n            const value = originalValue !== null && originalValue !== '' ? +originalValue : NaN;\n            if (isNaN(value)) {\n                throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a number`);\n            }\n            return value;\n        }\n        else if (this.options.items === String) {\n            if (!(0, shared_utils_1.isString)(originalValue)) {\n                return `${originalValue}`;\n            }\n        }\n        else if (this.options.items === Boolean) {\n            if (typeof originalValue !== 'boolean') {\n                throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a boolean value`);\n            }\n        }\n        return originalValue;\n    }\n};\nexports.ParseArrayPipe = ParseArrayPipe;\nexports.ParseArrayPipe = ParseArrayPipe = tslib_1.__decorate([\n    (0, injectable_decorator_1.Injectable)(),\n    tslib_1.__param(0, (0, optional_decorator_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ParseArrayPipe);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}