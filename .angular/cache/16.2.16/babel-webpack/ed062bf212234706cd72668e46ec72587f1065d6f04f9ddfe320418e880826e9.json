{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MiddlewareBuilder = void 0;\nconst dependencies_decorator_1 = require(\"@nestjs/common/decorators/core/dependencies.decorator\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst utils_1 = require(\"./utils\");\nclass MiddlewareBuilder {\n  constructor(routesMapper, httpAdapter, routeInfoPathExtractor) {\n    this.routesMapper = routesMapper;\n    this.httpAdapter = httpAdapter;\n    this.routeInfoPathExtractor = routeInfoPathExtractor;\n    this.middlewareCollection = new Set();\n  }\n  apply(...middleware) {\n    return new MiddlewareBuilder.ConfigProxy(this, (0, dependencies_decorator_1.flatten)(middleware), this.routeInfoPathExtractor);\n  }\n  build() {\n    return [...this.middlewareCollection];\n  }\n  getHttpAdapter() {\n    return this.httpAdapter;\n  }\n}\nexports.MiddlewareBuilder = MiddlewareBuilder;\nMiddlewareBuilder.ConfigProxy = class {\n  constructor(builder, middleware, routeInfoPathExtractor) {\n    this.builder = builder;\n    this.middleware = middleware;\n    this.routeInfoPathExtractor = routeInfoPathExtractor;\n    this.excludedRoutes = [];\n  }\n  getExcludedRoutes() {\n    return this.excludedRoutes;\n  }\n  exclude(...routes) {\n    this.excludedRoutes = [...this.excludedRoutes, ...this.getRoutesFlatList(routes).reduce((excludedRoutes, route) => {\n      for (const routePath of this.routeInfoPathExtractor.extractPathFrom(route)) {\n        excludedRoutes.push({\n          ...route,\n          path: routePath\n        });\n      }\n      return excludedRoutes;\n    }, [])];\n    return this;\n  }\n  forRoutes(...routes) {\n    const {\n      middlewareCollection\n    } = this.builder;\n    const flattedRoutes = this.getRoutesFlatList(routes);\n    const forRoutes = this.removeOverlappedRoutes(flattedRoutes);\n    const configuration = {\n      middleware: (0, utils_1.filterMiddleware)(this.middleware, this.excludedRoutes, this.builder.getHttpAdapter()),\n      forRoutes\n    };\n    middlewareCollection.add(configuration);\n    return this.builder;\n  }\n  getRoutesFlatList(routes) {\n    const {\n      routesMapper\n    } = this.builder;\n    return (0, iterare_1.iterate)(routes).map(route => routesMapper.mapRouteToRouteInfo(route)).flatten().toArray();\n  }\n  removeOverlappedRoutes(routes) {\n    const regexMatchParams = /(:[^\\/]*)/g;\n    const wildcard = '([^/]*)';\n    const routesWithRegex = routes.filter(route => route.path.includes(':')).map(route => ({\n      method: route.method,\n      path: route.path,\n      regex: new RegExp('^(' + route.path.replace(regexMatchParams, wildcard) + ')$', 'g')\n    }));\n    return routes.filter(route => {\n      const isOverlapped = item => {\n        if (route.method !== item.method) {\n          return false;\n        }\n        const normalizedRoutePath = (0, shared_utils_1.stripEndSlash)(route.path);\n        return normalizedRoutePath !== item.path && item.regex.test(normalizedRoutePath);\n      };\n      const routeMatch = routesWithRegex.find(isOverlapped);\n      return routeMatch === undefined;\n    });\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","MiddlewareBuilder","dependencies_decorator_1","require","shared_utils_1","iterare_1","utils_1","constructor","routesMapper","httpAdapter","routeInfoPathExtractor","middlewareCollection","Set","apply","middleware","ConfigProxy","flatten","build","getHttpAdapter","builder","excludedRoutes","getExcludedRoutes","exclude","routes","getRoutesFlatList","reduce","route","routePath","extractPathFrom","push","path","forRoutes","flattedRoutes","removeOverlappedRoutes","configuration","filterMiddleware","add","iterate","map","mapRouteToRouteInfo","toArray","regexMatchParams","wildcard","routesWithRegex","filter","includes","method","regex","RegExp","replace","isOverlapped","item","normalizedRoutePath","stripEndSlash","test","routeMatch","find","undefined"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/middleware/builder.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MiddlewareBuilder = void 0;\nconst dependencies_decorator_1 = require(\"@nestjs/common/decorators/core/dependencies.decorator\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst utils_1 = require(\"./utils\");\nclass MiddlewareBuilder {\n    constructor(routesMapper, httpAdapter, routeInfoPathExtractor) {\n        this.routesMapper = routesMapper;\n        this.httpAdapter = httpAdapter;\n        this.routeInfoPathExtractor = routeInfoPathExtractor;\n        this.middlewareCollection = new Set();\n    }\n    apply(...middleware) {\n        return new MiddlewareBuilder.ConfigProxy(this, (0, dependencies_decorator_1.flatten)(middleware), this.routeInfoPathExtractor);\n    }\n    build() {\n        return [...this.middlewareCollection];\n    }\n    getHttpAdapter() {\n        return this.httpAdapter;\n    }\n}\nexports.MiddlewareBuilder = MiddlewareBuilder;\nMiddlewareBuilder.ConfigProxy = class {\n    constructor(builder, middleware, routeInfoPathExtractor) {\n        this.builder = builder;\n        this.middleware = middleware;\n        this.routeInfoPathExtractor = routeInfoPathExtractor;\n        this.excludedRoutes = [];\n    }\n    getExcludedRoutes() {\n        return this.excludedRoutes;\n    }\n    exclude(...routes) {\n        this.excludedRoutes = [\n            ...this.excludedRoutes,\n            ...this.getRoutesFlatList(routes).reduce((excludedRoutes, route) => {\n                for (const routePath of this.routeInfoPathExtractor.extractPathFrom(route)) {\n                    excludedRoutes.push({\n                        ...route,\n                        path: routePath,\n                    });\n                }\n                return excludedRoutes;\n            }, []),\n        ];\n        return this;\n    }\n    forRoutes(...routes) {\n        const { middlewareCollection } = this.builder;\n        const flattedRoutes = this.getRoutesFlatList(routes);\n        const forRoutes = this.removeOverlappedRoutes(flattedRoutes);\n        const configuration = {\n            middleware: (0, utils_1.filterMiddleware)(this.middleware, this.excludedRoutes, this.builder.getHttpAdapter()),\n            forRoutes,\n        };\n        middlewareCollection.add(configuration);\n        return this.builder;\n    }\n    getRoutesFlatList(routes) {\n        const { routesMapper } = this.builder;\n        return (0, iterare_1.iterate)(routes)\n            .map(route => routesMapper.mapRouteToRouteInfo(route))\n            .flatten()\n            .toArray();\n    }\n    removeOverlappedRoutes(routes) {\n        const regexMatchParams = /(:[^\\/]*)/g;\n        const wildcard = '([^/]*)';\n        const routesWithRegex = routes\n            .filter(route => route.path.includes(':'))\n            .map(route => ({\n            method: route.method,\n            path: route.path,\n            regex: new RegExp('^(' + route.path.replace(regexMatchParams, wildcard) + ')$', 'g'),\n        }));\n        return routes.filter(route => {\n            const isOverlapped = (item) => {\n                if (route.method !== item.method) {\n                    return false;\n                }\n                const normalizedRoutePath = (0, shared_utils_1.stripEndSlash)(route.path);\n                return (normalizedRoutePath !== item.path &&\n                    item.regex.test(normalizedRoutePath));\n            };\n            const routeMatch = routesWithRegex.find(isOverlapped);\n            return routeMatch === undefined;\n        });\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,MAAMC,wBAAwB,GAAGC,OAAO,CAAC,uDAAuD,CAAC;AACjG,MAAMC,cAAc,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AACnE,MAAME,SAAS,GAAGF,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMG,OAAO,GAAGH,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMF,iBAAiB,CAAC;EACpBM,WAAWA,CAACC,YAAY,EAAEC,WAAW,EAAEC,sBAAsB,EAAE;IAC3D,IAAI,CAACF,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,sBAAsB,GAAGA,sBAAsB;IACpD,IAAI,CAACC,oBAAoB,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzC;EACAC,KAAKA,CAAC,GAAGC,UAAU,EAAE;IACjB,OAAO,IAAIb,iBAAiB,CAACc,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,EAAEb,wBAAwB,CAACc,OAAO,EAAEF,UAAU,CAAC,EAAE,IAAI,CAACJ,sBAAsB,CAAC;EAClI;EACAO,KAAKA,CAAA,EAAG;IACJ,OAAO,CAAC,GAAG,IAAI,CAACN,oBAAoB,CAAC;EACzC;EACAO,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACT,WAAW;EAC3B;AACJ;AACAV,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB;AAC7CA,iBAAiB,CAACc,WAAW,GAAG,MAAM;EAClCR,WAAWA,CAACY,OAAO,EAAEL,UAAU,EAAEJ,sBAAsB,EAAE;IACrD,IAAI,CAACS,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACL,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACJ,sBAAsB,GAAGA,sBAAsB;IACpD,IAAI,CAACU,cAAc,GAAG,EAAE;EAC5B;EACAC,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACD,cAAc;EAC9B;EACAE,OAAOA,CAAC,GAAGC,MAAM,EAAE;IACf,IAAI,CAACH,cAAc,GAAG,CAClB,GAAG,IAAI,CAACA,cAAc,EACtB,GAAG,IAAI,CAACI,iBAAiB,CAACD,MAAM,CAAC,CAACE,MAAM,CAAC,CAACL,cAAc,EAAEM,KAAK,KAAK;MAChE,KAAK,MAAMC,SAAS,IAAI,IAAI,CAACjB,sBAAsB,CAACkB,eAAe,CAACF,KAAK,CAAC,EAAE;QACxEN,cAAc,CAACS,IAAI,CAAC;UAChB,GAAGH,KAAK;UACRI,IAAI,EAAEH;QACV,CAAC,CAAC;MACN;MACA,OAAOP,cAAc;IACzB,CAAC,EAAE,EAAE,CAAC,CACT;IACD,OAAO,IAAI;EACf;EACAW,SAASA,CAAC,GAAGR,MAAM,EAAE;IACjB,MAAM;MAAEZ;IAAqB,CAAC,GAAG,IAAI,CAACQ,OAAO;IAC7C,MAAMa,aAAa,GAAG,IAAI,CAACR,iBAAiB,CAACD,MAAM,CAAC;IACpD,MAAMQ,SAAS,GAAG,IAAI,CAACE,sBAAsB,CAACD,aAAa,CAAC;IAC5D,MAAME,aAAa,GAAG;MAClBpB,UAAU,EAAE,CAAC,CAAC,EAAER,OAAO,CAAC6B,gBAAgB,EAAE,IAAI,CAACrB,UAAU,EAAE,IAAI,CAACM,cAAc,EAAE,IAAI,CAACD,OAAO,CAACD,cAAc,CAAC,CAAC,CAAC;MAC9Ga;IACJ,CAAC;IACDpB,oBAAoB,CAACyB,GAAG,CAACF,aAAa,CAAC;IACvC,OAAO,IAAI,CAACf,OAAO;EACvB;EACAK,iBAAiBA,CAACD,MAAM,EAAE;IACtB,MAAM;MAAEf;IAAa,CAAC,GAAG,IAAI,CAACW,OAAO;IACrC,OAAO,CAAC,CAAC,EAAEd,SAAS,CAACgC,OAAO,EAAEd,MAAM,CAAC,CAChCe,GAAG,CAACZ,KAAK,IAAIlB,YAAY,CAAC+B,mBAAmB,CAACb,KAAK,CAAC,CAAC,CACrDV,OAAO,CAAC,CAAC,CACTwB,OAAO,CAAC,CAAC;EAClB;EACAP,sBAAsBA,CAACV,MAAM,EAAE;IAC3B,MAAMkB,gBAAgB,GAAG,YAAY;IACrC,MAAMC,QAAQ,GAAG,SAAS;IAC1B,MAAMC,eAAe,GAAGpB,MAAM,CACzBqB,MAAM,CAAClB,KAAK,IAAIA,KAAK,CAACI,IAAI,CAACe,QAAQ,CAAC,GAAG,CAAC,CAAC,CACzCP,GAAG,CAACZ,KAAK,KAAK;MACfoB,MAAM,EAAEpB,KAAK,CAACoB,MAAM;MACpBhB,IAAI,EAAEJ,KAAK,CAACI,IAAI;MAChBiB,KAAK,EAAE,IAAIC,MAAM,CAAC,IAAI,GAAGtB,KAAK,CAACI,IAAI,CAACmB,OAAO,CAACR,gBAAgB,EAAEC,QAAQ,CAAC,GAAG,IAAI,EAAE,GAAG;IACvF,CAAC,CAAC,CAAC;IACH,OAAOnB,MAAM,CAACqB,MAAM,CAAClB,KAAK,IAAI;MAC1B,MAAMwB,YAAY,GAAIC,IAAI,IAAK;QAC3B,IAAIzB,KAAK,CAACoB,MAAM,KAAKK,IAAI,CAACL,MAAM,EAAE;UAC9B,OAAO,KAAK;QAChB;QACA,MAAMM,mBAAmB,GAAG,CAAC,CAAC,EAAEhD,cAAc,CAACiD,aAAa,EAAE3B,KAAK,CAACI,IAAI,CAAC;QACzE,OAAQsB,mBAAmB,KAAKD,IAAI,CAACrB,IAAI,IACrCqB,IAAI,CAACJ,KAAK,CAACO,IAAI,CAACF,mBAAmB,CAAC;MAC5C,CAAC;MACD,MAAMG,UAAU,GAAGZ,eAAe,CAACa,IAAI,CAACN,YAAY,CAAC;MACrD,OAAOK,UAAU,KAAKE,SAAS;IACnC,CAAC,CAAC;EACN;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}