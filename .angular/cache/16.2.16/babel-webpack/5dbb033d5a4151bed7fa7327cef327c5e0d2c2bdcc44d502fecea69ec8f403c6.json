{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_ENUM = 'isEnum';\n/**\n * Checks if a given value is the member of the provided enum.\n */\nexport function isEnum(value, entity) {\n  const enumValues = Object.keys(entity).map(k => entity[k]);\n  return enumValues.includes(value);\n}\n/**\n * Returns the possible values from an enum (both simple number indexed and string indexed enums).\n */\nfunction validEnumValues(entity) {\n  return Object.entries(entity).filter(([key, value]) => isNaN(parseInt(key))).map(([key, value]) => value);\n}\n/**\n * Checks if a given value is the member of the provided enum.\n */\nexport function IsEnum(entity, validationOptions) {\n  return ValidateBy({\n    name: IS_ENUM,\n    constraints: [entity, validEnumValues(entity)],\n    validator: {\n      validate: (value, args) => isEnum(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be one of the following values: $constraint2', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","IS_ENUM","isEnum","value","entity","enumValues","Object","keys","map","k","includes","validEnumValues","entries","filter","key","isNaN","parseInt","IsEnum","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/typechecker/IsEnum.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_ENUM = 'isEnum';\n/**\n * Checks if a given value is the member of the provided enum.\n */\nexport function isEnum(value, entity) {\n    const enumValues = Object.keys(entity).map(k => entity[k]);\n    return enumValues.includes(value);\n}\n/**\n * Returns the possible values from an enum (both simple number indexed and string indexed enums).\n */\nfunction validEnumValues(entity) {\n    return Object.entries(entity)\n        .filter(([key, value]) => isNaN(parseInt(key)))\n        .map(([key, value]) => value);\n}\n/**\n * Checks if a given value is the member of the provided enum.\n */\nexport function IsEnum(entity, validationOptions) {\n    return ValidateBy({\n        name: IS_ENUM,\n        constraints: [entity, validEnumValues(entity)],\n        validator: {\n            validate: (value, args) => isEnum(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be one of the following values: $constraint2', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAO,MAAMC,OAAO,GAAG,QAAQ;AAC/B;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAClC,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,GAAG,CAACC,CAAC,IAAIL,MAAM,CAACK,CAAC,CAAC,CAAC;EAC1D,OAAOJ,UAAU,CAACK,QAAQ,CAACP,KAAK,CAAC;AACrC;AACA;AACA;AACA;AACA,SAASQ,eAAeA,CAACP,MAAM,EAAE;EAC7B,OAAOE,MAAM,CAACM,OAAO,CAACR,MAAM,CAAC,CACxBS,MAAM,CAAC,CAAC,CAACC,GAAG,EAAEX,KAAK,CAAC,KAAKY,KAAK,CAACC,QAAQ,CAACF,GAAG,CAAC,CAAC,CAAC,CAC9CN,GAAG,CAAC,CAAC,CAACM,GAAG,EAAEX,KAAK,CAAC,KAAKA,KAAK,CAAC;AACrC;AACA;AACA;AACA;AACA,OAAO,SAASc,MAAMA,CAACb,MAAM,EAAEc,iBAAiB,EAAE;EAC9C,OAAOlB,UAAU,CAAC;IACdmB,IAAI,EAAElB,OAAO;IACbmB,WAAW,EAAE,CAAChB,MAAM,EAAEO,eAAe,CAACP,MAAM,CAAC,CAAC;IAC9CiB,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACnB,KAAK,EAAEoB,IAAI,KAAKrB,MAAM,CAACC,KAAK,EAAEoB,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MACzGI,cAAc,EAAEzB,YAAY,CAAC0B,UAAU,IAAIA,UAAU,GAAG,6DAA6D,EAAEP,iBAAiB;IAC5I;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}