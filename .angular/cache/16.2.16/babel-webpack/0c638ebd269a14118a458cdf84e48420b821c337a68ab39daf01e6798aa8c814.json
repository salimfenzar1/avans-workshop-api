{"ast":null,"code":"\"use strict\";\n\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InstanceWrapper = exports.INSTANCE_ID_SYMBOL = exports.INSTANCE_METADATA_SYMBOL = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst cli_colors_util_1 = require(\"@nestjs/common/utils/cli-colors.util\");\nconst random_string_generator_util_1 = require(\"@nestjs/common/utils/random-string-generator.util\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst uuid_factory_1 = require(\"../inspector/uuid-factory\");\nconst constants_1 = require(\"./constants\");\nconst provider_classifier_1 = require(\"./helpers/provider-classifier\");\nexports.INSTANCE_METADATA_SYMBOL = Symbol.for('instance_metadata:cache');\nexports.INSTANCE_ID_SYMBOL = Symbol.for('instance_metadata:id');\nclass InstanceWrapper {\n  constructor(metadata = {}) {\n    this.isAlias = false;\n    this.scope = common_1.Scope.DEFAULT;\n    this.values = new WeakMap();\n    this[_a] = {};\n    this.initialize(metadata);\n    this[exports.INSTANCE_ID_SYMBOL] = metadata[exports.INSTANCE_ID_SYMBOL] ?? this.generateUuid();\n  }\n  get id() {\n    return this[exports.INSTANCE_ID_SYMBOL];\n  }\n  set instance(value) {\n    this.values.set(constants_1.STATIC_CONTEXT, {\n      instance: value\n    });\n  }\n  get instance() {\n    const instancePerContext = this.getInstanceByContextId(constants_1.STATIC_CONTEXT);\n    return instancePerContext.instance;\n  }\n  get isNotMetatype() {\n    return !this.metatype || this.isFactory;\n  }\n  get isFactory() {\n    return this.metatype && !(0, shared_utils_1.isNil)(this.inject);\n  }\n  get isTransient() {\n    return this.scope === common_1.Scope.TRANSIENT;\n  }\n  getInstanceByContextId(contextId, inquirerId) {\n    if (this.scope === common_1.Scope.TRANSIENT && inquirerId) {\n      return this.getInstanceByInquirerId(contextId, inquirerId);\n    }\n    const instancePerContext = this.values.get(contextId);\n    return instancePerContext ? instancePerContext : this.cloneStaticInstance(contextId);\n  }\n  getInstanceByInquirerId(contextId, inquirerId) {\n    let collectionPerContext = this.transientMap.get(inquirerId);\n    if (!collectionPerContext) {\n      collectionPerContext = new WeakMap();\n      this.transientMap.set(inquirerId, collectionPerContext);\n    }\n    const instancePerContext = collectionPerContext.get(contextId);\n    return instancePerContext ? instancePerContext : this.cloneTransientInstance(contextId, inquirerId);\n  }\n  setInstanceByContextId(contextId, value, inquirerId) {\n    if (this.scope === common_1.Scope.TRANSIENT && inquirerId) {\n      return this.setInstanceByInquirerId(contextId, inquirerId, value);\n    }\n    this.values.set(contextId, value);\n  }\n  setInstanceByInquirerId(contextId, inquirerId, value) {\n    let collection = this.transientMap.get(inquirerId);\n    if (!collection) {\n      collection = new WeakMap();\n      this.transientMap.set(inquirerId, collection);\n    }\n    collection.set(contextId, value);\n  }\n  removeInstanceByContextId(contextId, inquirerId) {\n    if (this.scope === common_1.Scope.TRANSIENT && inquirerId) {\n      return this.removeInstanceByInquirerId(contextId, inquirerId);\n    }\n    this.values.delete(contextId);\n  }\n  removeInstanceByInquirerId(contextId, inquirerId) {\n    const collection = this.transientMap.get(inquirerId);\n    if (!collection) {\n      return;\n    }\n    collection.delete(contextId);\n  }\n  addCtorMetadata(index, wrapper) {\n    if (!this[exports.INSTANCE_METADATA_SYMBOL].dependencies) {\n      this[exports.INSTANCE_METADATA_SYMBOL].dependencies = [];\n    }\n    this[exports.INSTANCE_METADATA_SYMBOL].dependencies[index] = wrapper;\n  }\n  getCtorMetadata() {\n    return this[exports.INSTANCE_METADATA_SYMBOL].dependencies;\n  }\n  addPropertiesMetadata(key, wrapper) {\n    if (!this[exports.INSTANCE_METADATA_SYMBOL].properties) {\n      this[exports.INSTANCE_METADATA_SYMBOL].properties = [];\n    }\n    this[exports.INSTANCE_METADATA_SYMBOL].properties.push({\n      key,\n      wrapper\n    });\n  }\n  getPropertiesMetadata() {\n    return this[exports.INSTANCE_METADATA_SYMBOL].properties;\n  }\n  addEnhancerMetadata(wrapper) {\n    if (!this[exports.INSTANCE_METADATA_SYMBOL].enhancers) {\n      this[exports.INSTANCE_METADATA_SYMBOL].enhancers = [];\n    }\n    this[exports.INSTANCE_METADATA_SYMBOL].enhancers.push(wrapper);\n  }\n  getEnhancersMetadata() {\n    return this[exports.INSTANCE_METADATA_SYMBOL].enhancers;\n  }\n  isDependencyTreeDurable(lookupRegistry = []) {\n    if (!(0, shared_utils_1.isUndefined)(this.isTreeDurable)) {\n      return this.isTreeDurable;\n    }\n    if (this.scope === common_1.Scope.REQUEST) {\n      this.isTreeDurable = this.durable === undefined ? false : this.durable;\n      if (this.isTreeDurable) {\n        this.printIntrospectedAsDurable();\n      }\n      return this.isTreeDurable;\n    }\n    const isStatic = this.isDependencyTreeStatic();\n    if (isStatic) {\n      return false;\n    }\n    const isTreeNonDurable = this.introspectDepsAttribute((collection, registry) => collection.some(item => !item.isDependencyTreeStatic() && !item.isDependencyTreeDurable(registry)), lookupRegistry);\n    this.isTreeDurable = !isTreeNonDurable;\n    if (this.isTreeDurable) {\n      this.printIntrospectedAsDurable();\n    }\n    return this.isTreeDurable;\n  }\n  introspectDepsAttribute(callback, lookupRegistry = []) {\n    if (lookupRegistry.includes(this[exports.INSTANCE_ID_SYMBOL])) {\n      return false;\n    }\n    lookupRegistry = lookupRegistry.concat(this[exports.INSTANCE_ID_SYMBOL]);\n    const {\n      dependencies,\n      properties,\n      enhancers\n    } = this[exports.INSTANCE_METADATA_SYMBOL];\n    let introspectionResult = dependencies ? callback(dependencies, lookupRegistry) : false;\n    if (introspectionResult || !(properties || enhancers)) {\n      return introspectionResult;\n    }\n    introspectionResult = properties ? callback(properties.map(item => item.wrapper), lookupRegistry) : false;\n    if (introspectionResult || !enhancers) {\n      return introspectionResult;\n    }\n    return enhancers ? callback(enhancers, lookupRegistry) : false;\n  }\n  isDependencyTreeStatic(lookupRegistry = []) {\n    if (!(0, shared_utils_1.isUndefined)(this.isTreeStatic)) {\n      return this.isTreeStatic;\n    }\n    if (this.scope === common_1.Scope.REQUEST) {\n      this.isTreeStatic = false;\n      this.printIntrospectedAsRequestScoped();\n      return this.isTreeStatic;\n    }\n    this.isTreeStatic = !this.introspectDepsAttribute((collection, registry) => collection.some(item => !item.isDependencyTreeStatic(registry)), lookupRegistry);\n    if (!this.isTreeStatic) {\n      this.printIntrospectedAsRequestScoped();\n    }\n    return this.isTreeStatic;\n  }\n  cloneStaticInstance(contextId) {\n    const staticInstance = this.getInstanceByContextId(constants_1.STATIC_CONTEXT);\n    if (this.isDependencyTreeStatic()) {\n      return staticInstance;\n    }\n    const instancePerContext = {\n      ...staticInstance,\n      instance: undefined,\n      isResolved: false,\n      isPending: false\n    };\n    if (this.isNewable()) {\n      instancePerContext.instance = Object.create(this.metatype.prototype);\n    }\n    this.setInstanceByContextId(contextId, instancePerContext);\n    return instancePerContext;\n  }\n  cloneTransientInstance(contextId, inquirerId) {\n    const staticInstance = this.getInstanceByContextId(constants_1.STATIC_CONTEXT);\n    const instancePerContext = {\n      ...staticInstance,\n      instance: undefined,\n      isResolved: false,\n      isPending: false\n    };\n    if (this.isNewable()) {\n      instancePerContext.instance = Object.create(this.metatype.prototype);\n    }\n    this.setInstanceByInquirerId(contextId, inquirerId, instancePerContext);\n    return instancePerContext;\n  }\n  createPrototype(contextId) {\n    const host = this.getInstanceByContextId(contextId);\n    if (!this.isNewable() || host.isResolved) {\n      return;\n    }\n    return Object.create(this.metatype.prototype);\n  }\n  isInRequestScope(contextId, inquirer) {\n    const isDependencyTreeStatic = this.isDependencyTreeStatic();\n    return !isDependencyTreeStatic && contextId !== constants_1.STATIC_CONTEXT && (!this.isTransient || this.isTransient && !!inquirer);\n  }\n  isLazyTransient(contextId, inquirer) {\n    const isInquirerRequestScoped = inquirer && !inquirer.isDependencyTreeStatic();\n    return this.isDependencyTreeStatic() && contextId !== constants_1.STATIC_CONTEXT && this.isTransient && isInquirerRequestScoped;\n  }\n  isExplicitlyRequested(contextId, inquirer) {\n    const isSelfRequested = inquirer === this;\n    return this.isDependencyTreeStatic() && contextId !== constants_1.STATIC_CONTEXT && (isSelfRequested || inquirer && inquirer.scope === common_1.Scope.TRANSIENT);\n  }\n  isStatic(contextId, inquirer) {\n    const isInquirerRequestScoped = inquirer && !inquirer.isDependencyTreeStatic();\n    const isStaticTransient = this.isTransient && !isInquirerRequestScoped;\n    return this.isDependencyTreeStatic() && contextId === constants_1.STATIC_CONTEXT && (!this.isTransient || isStaticTransient && !!inquirer && !inquirer.isTransient);\n  }\n  getStaticTransientInstances() {\n    if (!this.transientMap) {\n      return [];\n    }\n    const instances = [...this.transientMap.values()];\n    return (0, iterare_1.iterate)(instances).map(item => item.get(constants_1.STATIC_CONTEXT)).filter(item => !!item).toArray();\n  }\n  mergeWith(provider) {\n    if ((0, provider_classifier_1.isValueProvider)(provider)) {\n      this.metatype = null;\n      this.inject = null;\n      this.scope = common_1.Scope.DEFAULT;\n      this.setInstanceByContextId(constants_1.STATIC_CONTEXT, {\n        instance: provider.useValue,\n        isResolved: true,\n        isPending: false\n      });\n    } else if ((0, provider_classifier_1.isClassProvider)(provider)) {\n      this.inject = null;\n      this.metatype = provider.useClass;\n    } else if ((0, provider_classifier_1.isFactoryProvider)(provider)) {\n      this.metatype = provider.useFactory;\n      this.inject = provider.inject || [];\n    }\n  }\n  isNewable() {\n    return (0, shared_utils_1.isNil)(this.inject) && this.metatype && this.metatype.prototype;\n  }\n  initialize(metadata) {\n    const {\n      instance,\n      isResolved,\n      ...wrapperPartial\n    } = metadata;\n    Object.assign(this, wrapperPartial);\n    this.setInstanceByContextId(constants_1.STATIC_CONTEXT, {\n      instance,\n      isResolved\n    });\n    this.scope === common_1.Scope.TRANSIENT && (this.transientMap = new Map());\n  }\n  printIntrospectedAsRequestScoped() {\n    if (!this.isDebugMode() || this.name === 'REQUEST') {\n      return;\n    }\n    if ((0, shared_utils_1.isString)(this.name)) {\n      InstanceWrapper.logger.log(`${cli_colors_util_1.clc.cyanBright(this.name)}${cli_colors_util_1.clc.green(' introspected as ')}${cli_colors_util_1.clc.magentaBright('request-scoped')}`);\n    }\n  }\n  printIntrospectedAsDurable() {\n    if (!this.isDebugMode()) {\n      return;\n    }\n    if ((0, shared_utils_1.isString)(this.name)) {\n      InstanceWrapper.logger.log(`${cli_colors_util_1.clc.cyanBright(this.name)}${cli_colors_util_1.clc.green(' introspected as ')}${cli_colors_util_1.clc.magentaBright('durable')}`);\n    }\n  }\n  isDebugMode() {\n    return !!process.env.NEST_DEBUG;\n  }\n  generateUuid() {\n    let key = this.name?.toString() ?? this.token?.toString();\n    key += this.host?.name ?? '';\n    return key ? uuid_factory_1.UuidFactory.get(key) : (0, random_string_generator_util_1.randomStringGenerator)();\n  }\n}\nexports.InstanceWrapper = InstanceWrapper;\n_a = exports.INSTANCE_METADATA_SYMBOL;\nInstanceWrapper.logger = new common_1.Logger(InstanceWrapper.name);","map":{"version":3,"names":["_a","Object","defineProperty","exports","value","InstanceWrapper","INSTANCE_ID_SYMBOL","INSTANCE_METADATA_SYMBOL","common_1","require","cli_colors_util_1","random_string_generator_util_1","shared_utils_1","iterare_1","uuid_factory_1","constants_1","provider_classifier_1","Symbol","for","constructor","metadata","isAlias","scope","Scope","DEFAULT","values","WeakMap","initialize","generateUuid","id","instance","set","STATIC_CONTEXT","instancePerContext","getInstanceByContextId","isNotMetatype","metatype","isFactory","isNil","inject","isTransient","TRANSIENT","contextId","inquirerId","getInstanceByInquirerId","get","cloneStaticInstance","collectionPerContext","transientMap","cloneTransientInstance","setInstanceByContextId","setInstanceByInquirerId","collection","removeInstanceByContextId","removeInstanceByInquirerId","delete","addCtorMetadata","index","wrapper","dependencies","getCtorMetadata","addPropertiesMetadata","key","properties","push","getPropertiesMetadata","addEnhancerMetadata","enhancers","getEnhancersMetadata","isDependencyTreeDurable","lookupRegistry","isUndefined","isTreeDurable","REQUEST","durable","undefined","printIntrospectedAsDurable","isStatic","isDependencyTreeStatic","isTreeNonDurable","introspectDepsAttribute","registry","some","item","callback","includes","concat","introspectionResult","map","isTreeStatic","printIntrospectedAsRequestScoped","staticInstance","isResolved","isPending","isNewable","create","prototype","createPrototype","host","isInRequestScope","inquirer","isLazyTransient","isInquirerRequestScoped","isExplicitlyRequested","isSelfRequested","isStaticTransient","getStaticTransientInstances","instances","iterate","filter","toArray","mergeWith","provider","isValueProvider","useValue","isClassProvider","useClass","isFactoryProvider","useFactory","wrapperPartial","assign","Map","isDebugMode","name","isString","logger","log","clc","cyanBright","green","magentaBright","process","env","NEST_DEBUG","toString","token","UuidFactory","randomStringGenerator","Logger"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/injector/instance-wrapper.js"],"sourcesContent":["\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InstanceWrapper = exports.INSTANCE_ID_SYMBOL = exports.INSTANCE_METADATA_SYMBOL = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst cli_colors_util_1 = require(\"@nestjs/common/utils/cli-colors.util\");\nconst random_string_generator_util_1 = require(\"@nestjs/common/utils/random-string-generator.util\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst uuid_factory_1 = require(\"../inspector/uuid-factory\");\nconst constants_1 = require(\"./constants\");\nconst provider_classifier_1 = require(\"./helpers/provider-classifier\");\nexports.INSTANCE_METADATA_SYMBOL = Symbol.for('instance_metadata:cache');\nexports.INSTANCE_ID_SYMBOL = Symbol.for('instance_metadata:id');\nclass InstanceWrapper {\n    constructor(metadata = {}) {\n        this.isAlias = false;\n        this.scope = common_1.Scope.DEFAULT;\n        this.values = new WeakMap();\n        this[_a] = {};\n        this.initialize(metadata);\n        this[exports.INSTANCE_ID_SYMBOL] =\n            metadata[exports.INSTANCE_ID_SYMBOL] ?? this.generateUuid();\n    }\n    get id() {\n        return this[exports.INSTANCE_ID_SYMBOL];\n    }\n    set instance(value) {\n        this.values.set(constants_1.STATIC_CONTEXT, { instance: value });\n    }\n    get instance() {\n        const instancePerContext = this.getInstanceByContextId(constants_1.STATIC_CONTEXT);\n        return instancePerContext.instance;\n    }\n    get isNotMetatype() {\n        return !this.metatype || this.isFactory;\n    }\n    get isFactory() {\n        return this.metatype && !(0, shared_utils_1.isNil)(this.inject);\n    }\n    get isTransient() {\n        return this.scope === common_1.Scope.TRANSIENT;\n    }\n    getInstanceByContextId(contextId, inquirerId) {\n        if (this.scope === common_1.Scope.TRANSIENT && inquirerId) {\n            return this.getInstanceByInquirerId(contextId, inquirerId);\n        }\n        const instancePerContext = this.values.get(contextId);\n        return instancePerContext\n            ? instancePerContext\n            : this.cloneStaticInstance(contextId);\n    }\n    getInstanceByInquirerId(contextId, inquirerId) {\n        let collectionPerContext = this.transientMap.get(inquirerId);\n        if (!collectionPerContext) {\n            collectionPerContext = new WeakMap();\n            this.transientMap.set(inquirerId, collectionPerContext);\n        }\n        const instancePerContext = collectionPerContext.get(contextId);\n        return instancePerContext\n            ? instancePerContext\n            : this.cloneTransientInstance(contextId, inquirerId);\n    }\n    setInstanceByContextId(contextId, value, inquirerId) {\n        if (this.scope === common_1.Scope.TRANSIENT && inquirerId) {\n            return this.setInstanceByInquirerId(contextId, inquirerId, value);\n        }\n        this.values.set(contextId, value);\n    }\n    setInstanceByInquirerId(contextId, inquirerId, value) {\n        let collection = this.transientMap.get(inquirerId);\n        if (!collection) {\n            collection = new WeakMap();\n            this.transientMap.set(inquirerId, collection);\n        }\n        collection.set(contextId, value);\n    }\n    removeInstanceByContextId(contextId, inquirerId) {\n        if (this.scope === common_1.Scope.TRANSIENT && inquirerId) {\n            return this.removeInstanceByInquirerId(contextId, inquirerId);\n        }\n        this.values.delete(contextId);\n    }\n    removeInstanceByInquirerId(contextId, inquirerId) {\n        const collection = this.transientMap.get(inquirerId);\n        if (!collection) {\n            return;\n        }\n        collection.delete(contextId);\n    }\n    addCtorMetadata(index, wrapper) {\n        if (!this[exports.INSTANCE_METADATA_SYMBOL].dependencies) {\n            this[exports.INSTANCE_METADATA_SYMBOL].dependencies = [];\n        }\n        this[exports.INSTANCE_METADATA_SYMBOL].dependencies[index] = wrapper;\n    }\n    getCtorMetadata() {\n        return this[exports.INSTANCE_METADATA_SYMBOL].dependencies;\n    }\n    addPropertiesMetadata(key, wrapper) {\n        if (!this[exports.INSTANCE_METADATA_SYMBOL].properties) {\n            this[exports.INSTANCE_METADATA_SYMBOL].properties = [];\n        }\n        this[exports.INSTANCE_METADATA_SYMBOL].properties.push({\n            key,\n            wrapper,\n        });\n    }\n    getPropertiesMetadata() {\n        return this[exports.INSTANCE_METADATA_SYMBOL].properties;\n    }\n    addEnhancerMetadata(wrapper) {\n        if (!this[exports.INSTANCE_METADATA_SYMBOL].enhancers) {\n            this[exports.INSTANCE_METADATA_SYMBOL].enhancers = [];\n        }\n        this[exports.INSTANCE_METADATA_SYMBOL].enhancers.push(wrapper);\n    }\n    getEnhancersMetadata() {\n        return this[exports.INSTANCE_METADATA_SYMBOL].enhancers;\n    }\n    isDependencyTreeDurable(lookupRegistry = []) {\n        if (!(0, shared_utils_1.isUndefined)(this.isTreeDurable)) {\n            return this.isTreeDurable;\n        }\n        if (this.scope === common_1.Scope.REQUEST) {\n            this.isTreeDurable = this.durable === undefined ? false : this.durable;\n            if (this.isTreeDurable) {\n                this.printIntrospectedAsDurable();\n            }\n            return this.isTreeDurable;\n        }\n        const isStatic = this.isDependencyTreeStatic();\n        if (isStatic) {\n            return false;\n        }\n        const isTreeNonDurable = this.introspectDepsAttribute((collection, registry) => collection.some((item) => !item.isDependencyTreeStatic() &&\n            !item.isDependencyTreeDurable(registry)), lookupRegistry);\n        this.isTreeDurable = !isTreeNonDurable;\n        if (this.isTreeDurable) {\n            this.printIntrospectedAsDurable();\n        }\n        return this.isTreeDurable;\n    }\n    introspectDepsAttribute(callback, lookupRegistry = []) {\n        if (lookupRegistry.includes(this[exports.INSTANCE_ID_SYMBOL])) {\n            return false;\n        }\n        lookupRegistry = lookupRegistry.concat(this[exports.INSTANCE_ID_SYMBOL]);\n        const { dependencies, properties, enhancers } = this[exports.INSTANCE_METADATA_SYMBOL];\n        let introspectionResult = dependencies\n            ? callback(dependencies, lookupRegistry)\n            : false;\n        if (introspectionResult || !(properties || enhancers)) {\n            return introspectionResult;\n        }\n        introspectionResult = properties\n            ? callback(properties.map(item => item.wrapper), lookupRegistry)\n            : false;\n        if (introspectionResult || !enhancers) {\n            return introspectionResult;\n        }\n        return enhancers ? callback(enhancers, lookupRegistry) : false;\n    }\n    isDependencyTreeStatic(lookupRegistry = []) {\n        if (!(0, shared_utils_1.isUndefined)(this.isTreeStatic)) {\n            return this.isTreeStatic;\n        }\n        if (this.scope === common_1.Scope.REQUEST) {\n            this.isTreeStatic = false;\n            this.printIntrospectedAsRequestScoped();\n            return this.isTreeStatic;\n        }\n        this.isTreeStatic = !this.introspectDepsAttribute((collection, registry) => collection.some((item) => !item.isDependencyTreeStatic(registry)), lookupRegistry);\n        if (!this.isTreeStatic) {\n            this.printIntrospectedAsRequestScoped();\n        }\n        return this.isTreeStatic;\n    }\n    cloneStaticInstance(contextId) {\n        const staticInstance = this.getInstanceByContextId(constants_1.STATIC_CONTEXT);\n        if (this.isDependencyTreeStatic()) {\n            return staticInstance;\n        }\n        const instancePerContext = {\n            ...staticInstance,\n            instance: undefined,\n            isResolved: false,\n            isPending: false,\n        };\n        if (this.isNewable()) {\n            instancePerContext.instance = Object.create(this.metatype.prototype);\n        }\n        this.setInstanceByContextId(contextId, instancePerContext);\n        return instancePerContext;\n    }\n    cloneTransientInstance(contextId, inquirerId) {\n        const staticInstance = this.getInstanceByContextId(constants_1.STATIC_CONTEXT);\n        const instancePerContext = {\n            ...staticInstance,\n            instance: undefined,\n            isResolved: false,\n            isPending: false,\n        };\n        if (this.isNewable()) {\n            instancePerContext.instance = Object.create(this.metatype.prototype);\n        }\n        this.setInstanceByInquirerId(contextId, inquirerId, instancePerContext);\n        return instancePerContext;\n    }\n    createPrototype(contextId) {\n        const host = this.getInstanceByContextId(contextId);\n        if (!this.isNewable() || host.isResolved) {\n            return;\n        }\n        return Object.create(this.metatype.prototype);\n    }\n    isInRequestScope(contextId, inquirer) {\n        const isDependencyTreeStatic = this.isDependencyTreeStatic();\n        return (!isDependencyTreeStatic &&\n            contextId !== constants_1.STATIC_CONTEXT &&\n            (!this.isTransient || (this.isTransient && !!inquirer)));\n    }\n    isLazyTransient(contextId, inquirer) {\n        const isInquirerRequestScoped = inquirer && !inquirer.isDependencyTreeStatic();\n        return (this.isDependencyTreeStatic() &&\n            contextId !== constants_1.STATIC_CONTEXT &&\n            this.isTransient &&\n            isInquirerRequestScoped);\n    }\n    isExplicitlyRequested(contextId, inquirer) {\n        const isSelfRequested = inquirer === this;\n        return (this.isDependencyTreeStatic() &&\n            contextId !== constants_1.STATIC_CONTEXT &&\n            (isSelfRequested || (inquirer && inquirer.scope === common_1.Scope.TRANSIENT)));\n    }\n    isStatic(contextId, inquirer) {\n        const isInquirerRequestScoped = inquirer && !inquirer.isDependencyTreeStatic();\n        const isStaticTransient = this.isTransient && !isInquirerRequestScoped;\n        return (this.isDependencyTreeStatic() &&\n            contextId === constants_1.STATIC_CONTEXT &&\n            (!this.isTransient ||\n                (isStaticTransient && !!inquirer && !inquirer.isTransient)));\n    }\n    getStaticTransientInstances() {\n        if (!this.transientMap) {\n            return [];\n        }\n        const instances = [...this.transientMap.values()];\n        return (0, iterare_1.iterate)(instances)\n            .map(item => item.get(constants_1.STATIC_CONTEXT))\n            .filter(item => !!item)\n            .toArray();\n    }\n    mergeWith(provider) {\n        if ((0, provider_classifier_1.isValueProvider)(provider)) {\n            this.metatype = null;\n            this.inject = null;\n            this.scope = common_1.Scope.DEFAULT;\n            this.setInstanceByContextId(constants_1.STATIC_CONTEXT, {\n                instance: provider.useValue,\n                isResolved: true,\n                isPending: false,\n            });\n        }\n        else if ((0, provider_classifier_1.isClassProvider)(provider)) {\n            this.inject = null;\n            this.metatype = provider.useClass;\n        }\n        else if ((0, provider_classifier_1.isFactoryProvider)(provider)) {\n            this.metatype = provider.useFactory;\n            this.inject = provider.inject || [];\n        }\n    }\n    isNewable() {\n        return (0, shared_utils_1.isNil)(this.inject) && this.metatype && this.metatype.prototype;\n    }\n    initialize(metadata) {\n        const { instance, isResolved, ...wrapperPartial } = metadata;\n        Object.assign(this, wrapperPartial);\n        this.setInstanceByContextId(constants_1.STATIC_CONTEXT, {\n            instance,\n            isResolved,\n        });\n        this.scope === common_1.Scope.TRANSIENT && (this.transientMap = new Map());\n    }\n    printIntrospectedAsRequestScoped() {\n        if (!this.isDebugMode() || this.name === 'REQUEST') {\n            return;\n        }\n        if ((0, shared_utils_1.isString)(this.name)) {\n            InstanceWrapper.logger.log(`${cli_colors_util_1.clc.cyanBright(this.name)}${cli_colors_util_1.clc.green(' introspected as ')}${cli_colors_util_1.clc.magentaBright('request-scoped')}`);\n        }\n    }\n    printIntrospectedAsDurable() {\n        if (!this.isDebugMode()) {\n            return;\n        }\n        if ((0, shared_utils_1.isString)(this.name)) {\n            InstanceWrapper.logger.log(`${cli_colors_util_1.clc.cyanBright(this.name)}${cli_colors_util_1.clc.green(' introspected as ')}${cli_colors_util_1.clc.magentaBright('durable')}`);\n        }\n    }\n    isDebugMode() {\n        return !!process.env.NEST_DEBUG;\n    }\n    generateUuid() {\n        let key = this.name?.toString() ?? this.token?.toString();\n        key += this.host?.name ?? '';\n        return key ? uuid_factory_1.UuidFactory.get(key) : (0, random_string_generator_util_1.randomStringGenerator)();\n    }\n}\nexports.InstanceWrapper = InstanceWrapper;\n_a = exports.INSTANCE_METADATA_SYMBOL;\nInstanceWrapper.logger = new common_1.Logger(InstanceWrapper.name);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}