{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport matchesValidator from 'validator/lib/matches';\nexport const IS_MILITARY_TIME = 'isMilitaryTime';\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n */\nexport function isMilitaryTime(value) {\n  const militaryTimeRegex = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n  return typeof value === 'string' && matchesValidator(value, militaryTimeRegex);\n}\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n */\nexport function IsMilitaryTime(validationOptions) {\n  return ValidateBy({\n    name: IS_MILITARY_TIME,\n    validator: {\n      validate: (value, args) => isMilitaryTime(value),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a valid representation of military time in the format HH:MM', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","matchesValidator","IS_MILITARY_TIME","isMilitaryTime","value","militaryTimeRegex","IsMilitaryTime","validationOptions","name","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsMilitaryTime.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport matchesValidator from 'validator/lib/matches';\nexport const IS_MILITARY_TIME = 'isMilitaryTime';\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n */\nexport function isMilitaryTime(value) {\n    const militaryTimeRegex = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    return typeof value === 'string' && matchesValidator(value, militaryTimeRegex);\n}\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n */\nexport function IsMilitaryTime(validationOptions) {\n    return ValidateBy({\n        name: IS_MILITARY_TIME,\n        validator: {\n            validate: (value, args) => isMilitaryTime(value),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a valid representation of military time in the format HH:MM', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,gBAAgB,MAAM,uBAAuB;AACpD,OAAO,MAAMC,gBAAgB,GAAG,gBAAgB;AAChD;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAE;EAClC,MAAMC,iBAAiB,GAAG,8BAA8B;EACxD,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,gBAAgB,CAACG,KAAK,EAAEC,iBAAiB,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,iBAAiB,EAAE;EAC9C,OAAOP,UAAU,CAAC;IACdQ,IAAI,EAAEN,gBAAgB;IACtBO,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACN,KAAK,EAAEO,IAAI,KAAKR,cAAc,CAACC,KAAK,CAAC;MAChDQ,cAAc,EAAEb,YAAY,CAACc,UAAU,IAAIA,UAAU,GAAG,+EAA+E,EAAEN,iBAAiB;IAC9J;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}