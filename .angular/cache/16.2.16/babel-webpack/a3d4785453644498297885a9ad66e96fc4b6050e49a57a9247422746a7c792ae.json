{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst iterare_1 = require(\"iterare\");\nconst util_1 = require(\"util\");\nconst decorators_1 = require(\"../decorators\");\nconst core_1 = require(\"../decorators/core\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst load_package_util_1 = require(\"../utils/load-package.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nlet classValidator = {};\nlet classTransformer = {};\n/**\n * @see [Validation](https://docs.nestjs.com/techniques/validation)\n *\n * @publicApi\n */\nlet ValidationPipe = class ValidationPipe {\n  constructor(options) {\n    options = options || {};\n    const {\n      transform,\n      disableErrorMessages,\n      errorHttpStatusCode,\n      expectedType,\n      transformOptions,\n      validateCustomDecorators,\n      ...validatorOptions\n    } = options;\n    // @see https://github.com/nestjs/nest/issues/10683#issuecomment-1413690508\n    this.validatorOptions = {\n      forbidUnknownValues: false,\n      ...validatorOptions\n    };\n    this.isTransformEnabled = !!transform;\n    this.transformOptions = transformOptions;\n    this.isDetailedOutputDisabled = disableErrorMessages;\n    this.validateCustomDecorators = validateCustomDecorators || false;\n    this.errorHttpStatusCode = errorHttpStatusCode || http_status_enum_1.HttpStatus.BAD_REQUEST;\n    this.expectedType = expectedType;\n    this.exceptionFactory = options.exceptionFactory || this.createExceptionFactory();\n    classValidator = this.loadValidator(options.validatorPackage);\n    classTransformer = this.loadTransformer(options.transformerPackage);\n  }\n  loadValidator(validatorPackage) {\n    return validatorPackage ?? (0, load_package_util_1.loadPackage)('class-validator', 'ValidationPipe', () => require('class-validator'));\n  }\n  loadTransformer(transformerPackage) {\n    return transformerPackage ?? (0, load_package_util_1.loadPackage)('class-transformer', 'ValidationPipe', () => require('class-transformer'));\n  }\n  transform(value, metadata) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.expectedType) {\n        metadata = {\n          ...metadata,\n          metatype: _this.expectedType\n        };\n      }\n      const metatype = metadata.metatype;\n      if (!metatype || !_this.toValidate(metadata)) {\n        return _this.isTransformEnabled ? _this.transformPrimitive(value, metadata) : value;\n      }\n      const originalValue = value;\n      value = _this.toEmptyIfNil(value);\n      const isNil = value !== originalValue;\n      const isPrimitive = _this.isPrimitive(value);\n      _this.stripProtoKeys(value);\n      let entity = classTransformer.plainToClass(metatype, value, _this.transformOptions);\n      const originalEntity = entity;\n      const isCtorNotEqual = entity.constructor !== metatype;\n      if (isCtorNotEqual && !isPrimitive) {\n        entity.constructor = metatype;\n      } else if (isCtorNotEqual) {\n        // when \"entity\" is a primitive value, we have to temporarily\n        // replace the entity to perform the validation against the original\n        // metatype defined inside the handler\n        entity = {\n          constructor: metatype\n        };\n      }\n      const errors = yield _this.validate(entity, _this.validatorOptions);\n      if (errors.length > 0) {\n        throw yield _this.exceptionFactory(errors);\n      }\n      if (isPrimitive) {\n        // if the value is a primitive value and the validation process has been successfully completed\n        // we have to revert the original value passed through the pipe\n        entity = originalEntity;\n      }\n      if (_this.isTransformEnabled) {\n        return entity;\n      }\n      if (isNil) {\n        // if the value was originally undefined or null, revert it back\n        return originalValue;\n      }\n      // we check if the number of keys of the \"validatorOptions\" is higher than 1 (instead of 0)\n      // because the \"forbidUnknownValues\" now fallbacks to \"false\" (in case it wasn't explicitly specified)\n      const shouldTransformToPlain = Object.keys(_this.validatorOptions).length > 1;\n      return shouldTransformToPlain ? classTransformer.classToPlain(entity, _this.transformOptions) : value;\n    })();\n  }\n  createExceptionFactory() {\n    return (validationErrors = []) => {\n      if (this.isDetailedOutputDisabled) {\n        return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode]();\n      }\n      const errors = this.flattenValidationErrors(validationErrors);\n      return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode](errors);\n    };\n  }\n  toValidate(metadata) {\n    const {\n      metatype,\n      type\n    } = metadata;\n    if (type === 'custom' && !this.validateCustomDecorators) {\n      return false;\n    }\n    const types = [String, Boolean, Number, Array, Object, Buffer, Date];\n    return !types.some(t => metatype === t) && !(0, shared_utils_1.isNil)(metatype);\n  }\n  transformPrimitive(value, metadata) {\n    if (!metadata.data) {\n      // leave top-level query/param objects unmodified\n      return value;\n    }\n    const {\n      type,\n      metatype\n    } = metadata;\n    if (type !== 'param' && type !== 'query') {\n      return value;\n    }\n    if (metatype === Boolean) {\n      if ((0, shared_utils_1.isUndefined)(value)) {\n        // This is an workaround to deal with optional boolean values since\n        // optional booleans shouldn't be parsed to a valid boolean when\n        // they were not defined\n        return undefined;\n      }\n      // Any fasly value but `undefined` will be parsed to `false`\n      return value === true || value === 'true';\n    }\n    if (metatype === Number) {\n      return +value;\n    }\n    return value;\n  }\n  toEmptyIfNil(value) {\n    return (0, shared_utils_1.isNil)(value) ? {} : value;\n  }\n  stripProtoKeys(value) {\n    if (value == null || typeof value !== 'object' || util_1.types.isTypedArray(value)) {\n      return;\n    }\n    if (Array.isArray(value)) {\n      for (const v of value) {\n        this.stripProtoKeys(v);\n      }\n      return;\n    }\n    delete value.__proto__;\n    for (const key in value) {\n      this.stripProtoKeys(value[key]);\n    }\n  }\n  isPrimitive(value) {\n    return ['number', 'boolean', 'string'].includes(typeof value);\n  }\n  validate(object, validatorOptions) {\n    return classValidator.validate(object, validatorOptions);\n  }\n  flattenValidationErrors(validationErrors) {\n    return (0, iterare_1.iterate)(validationErrors).map(error => this.mapChildrenToValidationErrors(error)).flatten().filter(item => !!item.constraints).map(item => Object.values(item.constraints)).flatten().toArray();\n  }\n  mapChildrenToValidationErrors(error, parentPath) {\n    if (!(error.children && error.children.length)) {\n      return [error];\n    }\n    const validationErrors = [];\n    parentPath = parentPath ? `${parentPath}.${error.property}` : error.property;\n    for (const item of error.children) {\n      if (item.children && item.children.length) {\n        validationErrors.push(...this.mapChildrenToValidationErrors(item, parentPath));\n      }\n      validationErrors.push(this.prependConstraintsWithParentProp(parentPath, item));\n    }\n    return validationErrors;\n  }\n  prependConstraintsWithParentProp(parentPath, error) {\n    const constraints = {};\n    for (const key in error.constraints) {\n      constraints[key] = `${parentPath}.${error.constraints[key]}`;\n    }\n    return {\n      ...error,\n      constraints\n    };\n  }\n};\nexports.ValidationPipe = ValidationPipe;\nexports.ValidationPipe = ValidationPipe = tslib_1.__decorate([(0, core_1.Injectable)(), tslib_1.__param(0, (0, decorators_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ValidationPipe);","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","ValidationPipe","tslib_1","iterare_1","util_1","decorators_1","core_1","http_status_enum_1","http_error_by_code_util_1","load_package_util_1","shared_utils_1","classValidator","classTransformer","constructor","options","transform","disableErrorMessages","errorHttpStatusCode","expectedType","transformOptions","validateCustomDecorators","validatorOptions","forbidUnknownValues","isTransformEnabled","isDetailedOutputDisabled","HttpStatus","BAD_REQUEST","exceptionFactory","createExceptionFactory","loadValidator","validatorPackage","loadTransformer","transformerPackage","loadPackage","metadata","_this","metatype","toValidate","transformPrimitive","originalValue","toEmptyIfNil","isNil","isPrimitive","stripProtoKeys","entity","plainToClass","originalEntity","isCtorNotEqual","errors","validate","length","shouldTransformToPlain","keys","classToPlain","validationErrors","HttpErrorByCode","flattenValidationErrors","type","types","String","Boolean","Number","Array","Buffer","Date","some","t","data","isUndefined","undefined","isTypedArray","isArray","v","__proto__","key","includes","object","iterate","map","error","mapChildrenToValidationErrors","flatten","filter","item","constraints","values","toArray","parentPath","children","property","push","prependConstraintsWithParentProp","__decorate","Injectable","__param","Optional","__metadata"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/common/pipes/validation.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidationPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst iterare_1 = require(\"iterare\");\nconst util_1 = require(\"util\");\nconst decorators_1 = require(\"../decorators\");\nconst core_1 = require(\"../decorators/core\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst load_package_util_1 = require(\"../utils/load-package.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nlet classValidator = {};\nlet classTransformer = {};\n/**\n * @see [Validation](https://docs.nestjs.com/techniques/validation)\n *\n * @publicApi\n */\nlet ValidationPipe = class ValidationPipe {\n    constructor(options) {\n        options = options || {};\n        const { transform, disableErrorMessages, errorHttpStatusCode, expectedType, transformOptions, validateCustomDecorators, ...validatorOptions } = options;\n        // @see https://github.com/nestjs/nest/issues/10683#issuecomment-1413690508\n        this.validatorOptions = { forbidUnknownValues: false, ...validatorOptions };\n        this.isTransformEnabled = !!transform;\n        this.transformOptions = transformOptions;\n        this.isDetailedOutputDisabled = disableErrorMessages;\n        this.validateCustomDecorators = validateCustomDecorators || false;\n        this.errorHttpStatusCode = errorHttpStatusCode || http_status_enum_1.HttpStatus.BAD_REQUEST;\n        this.expectedType = expectedType;\n        this.exceptionFactory =\n            options.exceptionFactory || this.createExceptionFactory();\n        classValidator = this.loadValidator(options.validatorPackage);\n        classTransformer = this.loadTransformer(options.transformerPackage);\n    }\n    loadValidator(validatorPackage) {\n        return (validatorPackage ??\n            (0, load_package_util_1.loadPackage)('class-validator', 'ValidationPipe', () => require('class-validator')));\n    }\n    loadTransformer(transformerPackage) {\n        return (transformerPackage ??\n            (0, load_package_util_1.loadPackage)('class-transformer', 'ValidationPipe', () => require('class-transformer')));\n    }\n    async transform(value, metadata) {\n        if (this.expectedType) {\n            metadata = { ...metadata, metatype: this.expectedType };\n        }\n        const metatype = metadata.metatype;\n        if (!metatype || !this.toValidate(metadata)) {\n            return this.isTransformEnabled\n                ? this.transformPrimitive(value, metadata)\n                : value;\n        }\n        const originalValue = value;\n        value = this.toEmptyIfNil(value);\n        const isNil = value !== originalValue;\n        const isPrimitive = this.isPrimitive(value);\n        this.stripProtoKeys(value);\n        let entity = classTransformer.plainToClass(metatype, value, this.transformOptions);\n        const originalEntity = entity;\n        const isCtorNotEqual = entity.constructor !== metatype;\n        if (isCtorNotEqual && !isPrimitive) {\n            entity.constructor = metatype;\n        }\n        else if (isCtorNotEqual) {\n            // when \"entity\" is a primitive value, we have to temporarily\n            // replace the entity to perform the validation against the original\n            // metatype defined inside the handler\n            entity = { constructor: metatype };\n        }\n        const errors = await this.validate(entity, this.validatorOptions);\n        if (errors.length > 0) {\n            throw await this.exceptionFactory(errors);\n        }\n        if (isPrimitive) {\n            // if the value is a primitive value and the validation process has been successfully completed\n            // we have to revert the original value passed through the pipe\n            entity = originalEntity;\n        }\n        if (this.isTransformEnabled) {\n            return entity;\n        }\n        if (isNil) {\n            // if the value was originally undefined or null, revert it back\n            return originalValue;\n        }\n        // we check if the number of keys of the \"validatorOptions\" is higher than 1 (instead of 0)\n        // because the \"forbidUnknownValues\" now fallbacks to \"false\" (in case it wasn't explicitly specified)\n        const shouldTransformToPlain = Object.keys(this.validatorOptions).length > 1;\n        return shouldTransformToPlain\n            ? classTransformer.classToPlain(entity, this.transformOptions)\n            : value;\n    }\n    createExceptionFactory() {\n        return (validationErrors = []) => {\n            if (this.isDetailedOutputDisabled) {\n                return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode]();\n            }\n            const errors = this.flattenValidationErrors(validationErrors);\n            return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode](errors);\n        };\n    }\n    toValidate(metadata) {\n        const { metatype, type } = metadata;\n        if (type === 'custom' && !this.validateCustomDecorators) {\n            return false;\n        }\n        const types = [String, Boolean, Number, Array, Object, Buffer, Date];\n        return !types.some(t => metatype === t) && !(0, shared_utils_1.isNil)(metatype);\n    }\n    transformPrimitive(value, metadata) {\n        if (!metadata.data) {\n            // leave top-level query/param objects unmodified\n            return value;\n        }\n        const { type, metatype } = metadata;\n        if (type !== 'param' && type !== 'query') {\n            return value;\n        }\n        if (metatype === Boolean) {\n            if ((0, shared_utils_1.isUndefined)(value)) {\n                // This is an workaround to deal with optional boolean values since\n                // optional booleans shouldn't be parsed to a valid boolean when\n                // they were not defined\n                return undefined;\n            }\n            // Any fasly value but `undefined` will be parsed to `false`\n            return value === true || value === 'true';\n        }\n        if (metatype === Number) {\n            return +value;\n        }\n        return value;\n    }\n    toEmptyIfNil(value) {\n        return (0, shared_utils_1.isNil)(value) ? {} : value;\n    }\n    stripProtoKeys(value) {\n        if (value == null ||\n            typeof value !== 'object' ||\n            util_1.types.isTypedArray(value)) {\n            return;\n        }\n        if (Array.isArray(value)) {\n            for (const v of value) {\n                this.stripProtoKeys(v);\n            }\n            return;\n        }\n        delete value.__proto__;\n        for (const key in value) {\n            this.stripProtoKeys(value[key]);\n        }\n    }\n    isPrimitive(value) {\n        return ['number', 'boolean', 'string'].includes(typeof value);\n    }\n    validate(object, validatorOptions) {\n        return classValidator.validate(object, validatorOptions);\n    }\n    flattenValidationErrors(validationErrors) {\n        return (0, iterare_1.iterate)(validationErrors)\n            .map(error => this.mapChildrenToValidationErrors(error))\n            .flatten()\n            .filter(item => !!item.constraints)\n            .map(item => Object.values(item.constraints))\n            .flatten()\n            .toArray();\n    }\n    mapChildrenToValidationErrors(error, parentPath) {\n        if (!(error.children && error.children.length)) {\n            return [error];\n        }\n        const validationErrors = [];\n        parentPath = parentPath\n            ? `${parentPath}.${error.property}`\n            : error.property;\n        for (const item of error.children) {\n            if (item.children && item.children.length) {\n                validationErrors.push(...this.mapChildrenToValidationErrors(item, parentPath));\n            }\n            validationErrors.push(this.prependConstraintsWithParentProp(parentPath, item));\n        }\n        return validationErrors;\n    }\n    prependConstraintsWithParentProp(parentPath, error) {\n        const constraints = {};\n        for (const key in error.constraints) {\n            constraints[key] = `${parentPath}.${error.constraints[key]}`;\n        }\n        return {\n            ...error,\n            constraints,\n        };\n    }\n};\nexports.ValidationPipe = ValidationPipe;\nexports.ValidationPipe = ValidationPipe = tslib_1.__decorate([\n    (0, core_1.Injectable)(),\n    tslib_1.__param(0, (0, decorators_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ValidationPipe);\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,iBAAA,GAAAC,OAAA,wHAAAC,OAAA;AACbC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,MAAMC,OAAO,GAAGP,OAAO,CAAC,OAAO,CAAC;AAChC,MAAMQ,SAAS,GAAGR,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMS,MAAM,GAAGT,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMU,YAAY,GAAGV,OAAO,CAAC,eAAe,CAAC;AAC7C,MAAMW,MAAM,GAAGX,OAAO,CAAC,oBAAoB,CAAC;AAC5C,MAAMY,kBAAkB,GAAGZ,OAAO,CAAC,2BAA2B,CAAC;AAC/D,MAAMa,yBAAyB,GAAGb,OAAO,CAAC,kCAAkC,CAAC;AAC7E,MAAMc,mBAAmB,GAAGd,OAAO,CAAC,4BAA4B,CAAC;AACjE,MAAMe,cAAc,GAAGf,OAAO,CAAC,uBAAuB,CAAC;AACvD,IAAIgB,cAAc,GAAG,CAAC,CAAC;AACvB,IAAIC,gBAAgB,GAAG,CAAC,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA,IAAIX,cAAc,GAAG,MAAMA,cAAc,CAAC;EACtCY,WAAWA,CAACC,OAAO,EAAE;IACjBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,MAAM;MAAEC,SAAS;MAAEC,oBAAoB;MAAEC,mBAAmB;MAAEC,YAAY;MAAEC,gBAAgB;MAAEC,wBAAwB;MAAE,GAAGC;IAAiB,CAAC,GAAGP,OAAO;IACvJ;IACA,IAAI,CAACO,gBAAgB,GAAG;MAAEC,mBAAmB,EAAE,KAAK;MAAE,GAAGD;IAAiB,CAAC;IAC3E,IAAI,CAACE,kBAAkB,GAAG,CAAC,CAACR,SAAS;IACrC,IAAI,CAACI,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACK,wBAAwB,GAAGR,oBAAoB;IACpD,IAAI,CAACI,wBAAwB,GAAGA,wBAAwB,IAAI,KAAK;IACjE,IAAI,CAACH,mBAAmB,GAAGA,mBAAmB,IAAIV,kBAAkB,CAACkB,UAAU,CAACC,WAAW;IAC3F,IAAI,CAACR,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACS,gBAAgB,GACjBb,OAAO,CAACa,gBAAgB,IAAI,IAAI,CAACC,sBAAsB,CAAC,CAAC;IAC7DjB,cAAc,GAAG,IAAI,CAACkB,aAAa,CAACf,OAAO,CAACgB,gBAAgB,CAAC;IAC7DlB,gBAAgB,GAAG,IAAI,CAACmB,eAAe,CAACjB,OAAO,CAACkB,kBAAkB,CAAC;EACvE;EACAH,aAAaA,CAACC,gBAAgB,EAAE;IAC5B,OAAQA,gBAAgB,IACpB,CAAC,CAAC,EAAErB,mBAAmB,CAACwB,WAAW,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,MAAMtC,OAAO,CAAC,iBAAiB,CAAC,CAAC;EACnH;EACAoC,eAAeA,CAACC,kBAAkB,EAAE;IAChC,OAAQA,kBAAkB,IACtB,CAAC,CAAC,EAAEvB,mBAAmB,CAACwB,WAAW,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,MAAMtC,OAAO,CAAC,mBAAmB,CAAC,CAAC;EACvH;EACMoB,SAASA,CAACf,KAAK,EAAEkC,QAAQ,EAAE;IAAA,IAAAC,KAAA;IAAA,OAAAzC,iBAAA;MAC7B,IAAIyC,KAAI,CAACjB,YAAY,EAAE;QACnBgB,QAAQ,GAAG;UAAE,GAAGA,QAAQ;UAAEE,QAAQ,EAAED,KAAI,CAACjB;QAAa,CAAC;MAC3D;MACA,MAAMkB,QAAQ,GAAGF,QAAQ,CAACE,QAAQ;MAClC,IAAI,CAACA,QAAQ,IAAI,CAACD,KAAI,CAACE,UAAU,CAACH,QAAQ,CAAC,EAAE;QACzC,OAAOC,KAAI,CAACZ,kBAAkB,GACxBY,KAAI,CAACG,kBAAkB,CAACtC,KAAK,EAAEkC,QAAQ,CAAC,GACxClC,KAAK;MACf;MACA,MAAMuC,aAAa,GAAGvC,KAAK;MAC3BA,KAAK,GAAGmC,KAAI,CAACK,YAAY,CAACxC,KAAK,CAAC;MAChC,MAAMyC,KAAK,GAAGzC,KAAK,KAAKuC,aAAa;MACrC,MAAMG,WAAW,GAAGP,KAAI,CAACO,WAAW,CAAC1C,KAAK,CAAC;MAC3CmC,KAAI,CAACQ,cAAc,CAAC3C,KAAK,CAAC;MAC1B,IAAI4C,MAAM,GAAGhC,gBAAgB,CAACiC,YAAY,CAACT,QAAQ,EAAEpC,KAAK,EAAEmC,KAAI,CAAChB,gBAAgB,CAAC;MAClF,MAAM2B,cAAc,GAAGF,MAAM;MAC7B,MAAMG,cAAc,GAAGH,MAAM,CAAC/B,WAAW,KAAKuB,QAAQ;MACtD,IAAIW,cAAc,IAAI,CAACL,WAAW,EAAE;QAChCE,MAAM,CAAC/B,WAAW,GAAGuB,QAAQ;MACjC,CAAC,MACI,IAAIW,cAAc,EAAE;QACrB;QACA;QACA;QACAH,MAAM,GAAG;UAAE/B,WAAW,EAAEuB;QAAS,CAAC;MACtC;MACA,MAAMY,MAAM,SAASb,KAAI,CAACc,QAAQ,CAACL,MAAM,EAAET,KAAI,CAACd,gBAAgB,CAAC;MACjE,IAAI2B,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;QACnB,YAAYf,KAAI,CAACR,gBAAgB,CAACqB,MAAM,CAAC;MAC7C;MACA,IAAIN,WAAW,EAAE;QACb;QACA;QACAE,MAAM,GAAGE,cAAc;MAC3B;MACA,IAAIX,KAAI,CAACZ,kBAAkB,EAAE;QACzB,OAAOqB,MAAM;MACjB;MACA,IAAIH,KAAK,EAAE;QACP;QACA,OAAOF,aAAa;MACxB;MACA;MACA;MACA,MAAMY,sBAAsB,GAAGtD,MAAM,CAACuD,IAAI,CAACjB,KAAI,CAACd,gBAAgB,CAAC,CAAC6B,MAAM,GAAG,CAAC;MAC5E,OAAOC,sBAAsB,GACvBvC,gBAAgB,CAACyC,YAAY,CAACT,MAAM,EAAET,KAAI,CAAChB,gBAAgB,CAAC,GAC5DnB,KAAK;IAAC;EAChB;EACA4B,sBAAsBA,CAAA,EAAG;IACrB,OAAO,CAAC0B,gBAAgB,GAAG,EAAE,KAAK;MAC9B,IAAI,IAAI,CAAC9B,wBAAwB,EAAE;QAC/B,OAAO,IAAIhB,yBAAyB,CAAC+C,eAAe,CAAC,IAAI,CAACtC,mBAAmB,CAAC,CAAC,CAAC;MACpF;MACA,MAAM+B,MAAM,GAAG,IAAI,CAACQ,uBAAuB,CAACF,gBAAgB,CAAC;MAC7D,OAAO,IAAI9C,yBAAyB,CAAC+C,eAAe,CAAC,IAAI,CAACtC,mBAAmB,CAAC,CAAC+B,MAAM,CAAC;IAC1F,CAAC;EACL;EACAX,UAAUA,CAACH,QAAQ,EAAE;IACjB,MAAM;MAAEE,QAAQ;MAAEqB;IAAK,CAAC,GAAGvB,QAAQ;IACnC,IAAIuB,IAAI,KAAK,QAAQ,IAAI,CAAC,IAAI,CAACrC,wBAAwB,EAAE;MACrD,OAAO,KAAK;IAChB;IACA,MAAMsC,KAAK,GAAG,CAACC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,KAAK,EAAEjE,MAAM,EAAEkE,MAAM,EAAEC,IAAI,CAAC;IACpE,OAAO,CAACN,KAAK,CAACO,IAAI,CAACC,CAAC,IAAI9B,QAAQ,KAAK8B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAExD,cAAc,CAAC+B,KAAK,EAAEL,QAAQ,CAAC;EACnF;EACAE,kBAAkBA,CAACtC,KAAK,EAAEkC,QAAQ,EAAE;IAChC,IAAI,CAACA,QAAQ,CAACiC,IAAI,EAAE;MAChB;MACA,OAAOnE,KAAK;IAChB;IACA,MAAM;MAAEyD,IAAI;MAAErB;IAAS,CAAC,GAAGF,QAAQ;IACnC,IAAIuB,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,EAAE;MACtC,OAAOzD,KAAK;IAChB;IACA,IAAIoC,QAAQ,KAAKwB,OAAO,EAAE;MACtB,IAAI,CAAC,CAAC,EAAElD,cAAc,CAAC0D,WAAW,EAAEpE,KAAK,CAAC,EAAE;QACxC;QACA;QACA;QACA,OAAOqE,SAAS;MACpB;MACA;MACA,OAAOrE,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,MAAM;IAC7C;IACA,IAAIoC,QAAQ,KAAKyB,MAAM,EAAE;MACrB,OAAO,CAAC7D,KAAK;IACjB;IACA,OAAOA,KAAK;EAChB;EACAwC,YAAYA,CAACxC,KAAK,EAAE;IAChB,OAAO,CAAC,CAAC,EAAEU,cAAc,CAAC+B,KAAK,EAAEzC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,KAAK;EACxD;EACA2C,cAAcA,CAAC3C,KAAK,EAAE;IAClB,IAAIA,KAAK,IAAI,IAAI,IACb,OAAOA,KAAK,KAAK,QAAQ,IACzBI,MAAM,CAACsD,KAAK,CAACY,YAAY,CAACtE,KAAK,CAAC,EAAE;MAClC;IACJ;IACA,IAAI8D,KAAK,CAACS,OAAO,CAACvE,KAAK,CAAC,EAAE;MACtB,KAAK,MAAMwE,CAAC,IAAIxE,KAAK,EAAE;QACnB,IAAI,CAAC2C,cAAc,CAAC6B,CAAC,CAAC;MAC1B;MACA;IACJ;IACA,OAAOxE,KAAK,CAACyE,SAAS;IACtB,KAAK,MAAMC,GAAG,IAAI1E,KAAK,EAAE;MACrB,IAAI,CAAC2C,cAAc,CAAC3C,KAAK,CAAC0E,GAAG,CAAC,CAAC;IACnC;EACJ;EACAhC,WAAWA,CAAC1C,KAAK,EAAE;IACf,OAAO,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC2E,QAAQ,CAAC,OAAO3E,KAAK,CAAC;EACjE;EACAiD,QAAQA,CAAC2B,MAAM,EAAEvD,gBAAgB,EAAE;IAC/B,OAAOV,cAAc,CAACsC,QAAQ,CAAC2B,MAAM,EAAEvD,gBAAgB,CAAC;EAC5D;EACAmC,uBAAuBA,CAACF,gBAAgB,EAAE;IACtC,OAAO,CAAC,CAAC,EAAEnD,SAAS,CAAC0E,OAAO,EAAEvB,gBAAgB,CAAC,CAC1CwB,GAAG,CAACC,KAAK,IAAI,IAAI,CAACC,6BAA6B,CAACD,KAAK,CAAC,CAAC,CACvDE,OAAO,CAAC,CAAC,CACTC,MAAM,CAACC,IAAI,IAAI,CAAC,CAACA,IAAI,CAACC,WAAW,CAAC,CAClCN,GAAG,CAACK,IAAI,IAAItF,MAAM,CAACwF,MAAM,CAACF,IAAI,CAACC,WAAW,CAAC,CAAC,CAC5CH,OAAO,CAAC,CAAC,CACTK,OAAO,CAAC,CAAC;EAClB;EACAN,6BAA6BA,CAACD,KAAK,EAAEQ,UAAU,EAAE;IAC7C,IAAI,EAAER,KAAK,CAACS,QAAQ,IAAIT,KAAK,CAACS,QAAQ,CAACtC,MAAM,CAAC,EAAE;MAC5C,OAAO,CAAC6B,KAAK,CAAC;IAClB;IACA,MAAMzB,gBAAgB,GAAG,EAAE;IAC3BiC,UAAU,GAAGA,UAAU,GAChB,GAAEA,UAAW,IAAGR,KAAK,CAACU,QAAS,EAAC,GACjCV,KAAK,CAACU,QAAQ;IACpB,KAAK,MAAMN,IAAI,IAAIJ,KAAK,CAACS,QAAQ,EAAE;MAC/B,IAAIL,IAAI,CAACK,QAAQ,IAAIL,IAAI,CAACK,QAAQ,CAACtC,MAAM,EAAE;QACvCI,gBAAgB,CAACoC,IAAI,CAAC,GAAG,IAAI,CAACV,6BAA6B,CAACG,IAAI,EAAEI,UAAU,CAAC,CAAC;MAClF;MACAjC,gBAAgB,CAACoC,IAAI,CAAC,IAAI,CAACC,gCAAgC,CAACJ,UAAU,EAAEJ,IAAI,CAAC,CAAC;IAClF;IACA,OAAO7B,gBAAgB;EAC3B;EACAqC,gCAAgCA,CAACJ,UAAU,EAAER,KAAK,EAAE;IAChD,MAAMK,WAAW,GAAG,CAAC,CAAC;IACtB,KAAK,MAAMV,GAAG,IAAIK,KAAK,CAACK,WAAW,EAAE;MACjCA,WAAW,CAACV,GAAG,CAAC,GAAI,GAAEa,UAAW,IAAGR,KAAK,CAACK,WAAW,CAACV,GAAG,CAAE,EAAC;IAChE;IACA,OAAO;MACH,GAAGK,KAAK;MACRK;IACJ,CAAC;EACL;AACJ,CAAC;AACDrF,OAAO,CAACE,cAAc,GAAGA,cAAc;AACvCF,OAAO,CAACE,cAAc,GAAGA,cAAc,GAAGC,OAAO,CAAC0F,UAAU,CAAC,CACzD,CAAC,CAAC,EAAEtF,MAAM,CAACuF,UAAU,EAAE,CAAC,EACxB3F,OAAO,CAAC4F,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEzF,YAAY,CAAC0F,QAAQ,EAAE,CAAC,CAAC,EAChD7F,OAAO,CAAC8F,UAAU,CAAC,mBAAmB,EAAE,CAACnG,MAAM,CAAC,CAAC,CACpD,EAAEI,cAAc,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}