{"ast":null,"code":"\"use strict\";\n\nvar ConsoleLogger_1;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConsoleLogger = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"../decorators/core\");\nconst cli_colors_util_1 = require(\"../utils/cli-colors.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nconst utils_1 = require(\"./utils\");\nconst DEFAULT_LOG_LEVELS = ['log', 'error', 'warn', 'debug', 'verbose', 'fatal'];\nconst dateTimeFormatter = new Intl.DateTimeFormat(undefined, {\n  year: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n  day: '2-digit',\n  month: '2-digit'\n});\nlet ConsoleLogger = ConsoleLogger_1 = class ConsoleLogger {\n  constructor(context, options = {}) {\n    this.context = context;\n    this.options = options;\n    if (!options.logLevels) {\n      options.logLevels = DEFAULT_LOG_LEVELS;\n    }\n    if (context) {\n      this.originalContext = context;\n    }\n  }\n  log(message, ...optionalParams) {\n    if (!this.isLevelEnabled('log')) {\n      return;\n    }\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'log');\n  }\n  error(message, ...optionalParams) {\n    if (!this.isLevelEnabled('error')) {\n      return;\n    }\n    const {\n      messages,\n      context,\n      stack\n    } = this.getContextAndStackAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'error', 'stderr');\n    this.printStackTrace(stack);\n  }\n  warn(message, ...optionalParams) {\n    if (!this.isLevelEnabled('warn')) {\n      return;\n    }\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'warn');\n  }\n  debug(message, ...optionalParams) {\n    if (!this.isLevelEnabled('debug')) {\n      return;\n    }\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'debug');\n  }\n  verbose(message, ...optionalParams) {\n    if (!this.isLevelEnabled('verbose')) {\n      return;\n    }\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'verbose');\n  }\n  fatal(message, ...optionalParams) {\n    if (!this.isLevelEnabled('fatal')) {\n      return;\n    }\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'fatal');\n  }\n  /**\n   * Set log levels\n   * @param levels log levels\n   */\n  setLogLevels(levels) {\n    if (!this.options) {\n      this.options = {};\n    }\n    this.options.logLevels = levels;\n  }\n  /**\n   * Set logger context\n   * @param context context\n   */\n  setContext(context) {\n    this.context = context;\n  }\n  /**\n   * Resets the logger context to the value that was passed in the constructor.\n   */\n  resetContext() {\n    this.context = this.originalContext;\n  }\n  isLevelEnabled(level) {\n    const logLevels = this.options?.logLevels;\n    return (0, utils_1.isLogLevelEnabled)(level, logLevels);\n  }\n  getTimestamp() {\n    return dateTimeFormatter.format(Date.now());\n  }\n  printMessages(messages, context = '', logLevel = 'log', writeStreamType) {\n    messages.forEach(message => {\n      const pidMessage = this.formatPid(process.pid);\n      const contextMessage = this.formatContext(context);\n      const timestampDiff = this.updateAndGetTimestampDiff();\n      const formattedLogLevel = logLevel.toUpperCase().padStart(7, ' ');\n      const formattedMessage = this.formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff);\n      process[writeStreamType ?? 'stdout'].write(formattedMessage);\n    });\n  }\n  formatPid(pid) {\n    return `[Nest] ${pid}  - `;\n  }\n  formatContext(context) {\n    return context ? (0, cli_colors_util_1.yellow)(`[${context}] `) : '';\n  }\n  formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff) {\n    const output = this.stringifyMessage(message, logLevel);\n    pidMessage = this.colorize(pidMessage, logLevel);\n    formattedLogLevel = this.colorize(formattedLogLevel, logLevel);\n    return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n  }\n  stringifyMessage(message, logLevel) {\n    if ((0, shared_utils_1.isFunction)(message)) {\n      const messageAsStr = Function.prototype.toString.call(message);\n      const isClass = messageAsStr.startsWith('class ');\n      if (isClass) {\n        // If the message is a class, we will display the class name.\n        return this.stringifyMessage(message.name, logLevel);\n      }\n      // If the message is a non-class function, call it and re-resolve its value.\n      return this.stringifyMessage(message(), logLevel);\n    }\n    return (0, shared_utils_1.isPlainObject)(message) || Array.isArray(message) ? `${this.colorize('Object:', logLevel)}\\n${JSON.stringify(message, (key, value) => typeof value === 'bigint' ? value.toString() : value, 2)}\\n` : this.colorize(message, logLevel);\n  }\n  colorize(message, logLevel) {\n    const color = this.getColorByLogLevel(logLevel);\n    return color(message);\n  }\n  printStackTrace(stack) {\n    if (!stack) {\n      return;\n    }\n    process.stderr.write(`${stack}\\n`);\n  }\n  updateAndGetTimestampDiff() {\n    const includeTimestamp = ConsoleLogger_1.lastTimestampAt && this.options?.timestamp;\n    const result = includeTimestamp ? this.formatTimestampDiff(Date.now() - ConsoleLogger_1.lastTimestampAt) : '';\n    ConsoleLogger_1.lastTimestampAt = Date.now();\n    return result;\n  }\n  formatTimestampDiff(timestampDiff) {\n    return (0, cli_colors_util_1.yellow)(` +${timestampDiff}ms`);\n  }\n  getContextAndMessagesToPrint(args) {\n    if (args?.length <= 1) {\n      return {\n        messages: args,\n        context: this.context\n      };\n    }\n    const lastElement = args[args.length - 1];\n    const isContext = (0, shared_utils_1.isString)(lastElement);\n    if (!isContext) {\n      return {\n        messages: args,\n        context: this.context\n      };\n    }\n    return {\n      context: lastElement,\n      messages: args.slice(0, args.length - 1)\n    };\n  }\n  getContextAndStackAndMessagesToPrint(args) {\n    if (args.length === 2) {\n      return this.isStackFormat(args[1]) ? {\n        messages: [args[0]],\n        stack: args[1],\n        context: this.context\n      } : {\n        messages: [args[0]],\n        context: args[1]\n      };\n    }\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint(args);\n    if (messages?.length <= 1) {\n      return {\n        messages,\n        context\n      };\n    }\n    const lastElement = messages[messages.length - 1];\n    const isStack = (0, shared_utils_1.isString)(lastElement);\n    // https://github.com/nestjs/nest/issues/11074#issuecomment-1421680060\n    if (!isStack && !(0, shared_utils_1.isUndefined)(lastElement)) {\n      return {\n        messages,\n        context\n      };\n    }\n    return {\n      stack: lastElement,\n      messages: messages.slice(0, messages.length - 1),\n      context\n    };\n  }\n  isStackFormat(stack) {\n    if (!(0, shared_utils_1.isString)(stack) && !(0, shared_utils_1.isUndefined)(stack)) {\n      return false;\n    }\n    return /^(.)+\\n\\s+at .+:\\d+:\\d+/.test(stack);\n  }\n  getColorByLogLevel(level) {\n    switch (level) {\n      case 'debug':\n        return cli_colors_util_1.clc.magentaBright;\n      case 'warn':\n        return cli_colors_util_1.clc.yellow;\n      case 'error':\n        return cli_colors_util_1.clc.red;\n      case 'verbose':\n        return cli_colors_util_1.clc.cyanBright;\n      case 'fatal':\n        return cli_colors_util_1.clc.bold;\n      default:\n        return cli_colors_util_1.clc.green;\n    }\n  }\n};\nexports.ConsoleLogger = ConsoleLogger;\nexports.ConsoleLogger = ConsoleLogger = ConsoleLogger_1 = tslib_1.__decorate([(0, core_1.Injectable)(), tslib_1.__param(0, (0, core_1.Optional)()), tslib_1.__param(1, (0, core_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [String, Object])], ConsoleLogger);","map":{"version":3,"names":["ConsoleLogger_1","Object","defineProperty","exports","value","ConsoleLogger","tslib_1","require","core_1","cli_colors_util_1","shared_utils_1","utils_1","DEFAULT_LOG_LEVELS","dateTimeFormatter","Intl","DateTimeFormat","undefined","year","hour","minute","second","day","month","constructor","context","options","logLevels","originalContext","log","message","optionalParams","isLevelEnabled","messages","getContextAndMessagesToPrint","printMessages","error","stack","getContextAndStackAndMessagesToPrint","printStackTrace","warn","debug","verbose","fatal","setLogLevels","levels","setContext","resetContext","level","isLogLevelEnabled","getTimestamp","format","Date","now","logLevel","writeStreamType","forEach","pidMessage","formatPid","process","pid","contextMessage","formatContext","timestampDiff","updateAndGetTimestampDiff","formattedLogLevel","toUpperCase","padStart","formattedMessage","formatMessage","write","yellow","output","stringifyMessage","colorize","isFunction","messageAsStr","Function","prototype","toString","call","isClass","startsWith","name","isPlainObject","Array","isArray","JSON","stringify","key","color","getColorByLogLevel","stderr","includeTimestamp","lastTimestampAt","timestamp","result","formatTimestampDiff","args","length","lastElement","isContext","isString","slice","isStackFormat","isStack","isUndefined","test","clc","magentaBright","red","cyanBright","bold","green","__decorate","Injectable","__param","Optional","__metadata","String"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/common/services/console-logger.service.js"],"sourcesContent":["\"use strict\";\nvar ConsoleLogger_1;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsoleLogger = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"../decorators/core\");\nconst cli_colors_util_1 = require(\"../utils/cli-colors.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nconst utils_1 = require(\"./utils\");\nconst DEFAULT_LOG_LEVELS = [\n    'log',\n    'error',\n    'warn',\n    'debug',\n    'verbose',\n    'fatal',\n];\nconst dateTimeFormatter = new Intl.DateTimeFormat(undefined, {\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    day: '2-digit',\n    month: '2-digit',\n});\nlet ConsoleLogger = ConsoleLogger_1 = class ConsoleLogger {\n    constructor(context, options = {}) {\n        this.context = context;\n        this.options = options;\n        if (!options.logLevels) {\n            options.logLevels = DEFAULT_LOG_LEVELS;\n        }\n        if (context) {\n            this.originalContext = context;\n        }\n    }\n    log(message, ...optionalParams) {\n        if (!this.isLevelEnabled('log')) {\n            return;\n        }\n        const { messages, context } = this.getContextAndMessagesToPrint([\n            message,\n            ...optionalParams,\n        ]);\n        this.printMessages(messages, context, 'log');\n    }\n    error(message, ...optionalParams) {\n        if (!this.isLevelEnabled('error')) {\n            return;\n        }\n        const { messages, context, stack } = this.getContextAndStackAndMessagesToPrint([message, ...optionalParams]);\n        this.printMessages(messages, context, 'error', 'stderr');\n        this.printStackTrace(stack);\n    }\n    warn(message, ...optionalParams) {\n        if (!this.isLevelEnabled('warn')) {\n            return;\n        }\n        const { messages, context } = this.getContextAndMessagesToPrint([\n            message,\n            ...optionalParams,\n        ]);\n        this.printMessages(messages, context, 'warn');\n    }\n    debug(message, ...optionalParams) {\n        if (!this.isLevelEnabled('debug')) {\n            return;\n        }\n        const { messages, context } = this.getContextAndMessagesToPrint([\n            message,\n            ...optionalParams,\n        ]);\n        this.printMessages(messages, context, 'debug');\n    }\n    verbose(message, ...optionalParams) {\n        if (!this.isLevelEnabled('verbose')) {\n            return;\n        }\n        const { messages, context } = this.getContextAndMessagesToPrint([\n            message,\n            ...optionalParams,\n        ]);\n        this.printMessages(messages, context, 'verbose');\n    }\n    fatal(message, ...optionalParams) {\n        if (!this.isLevelEnabled('fatal')) {\n            return;\n        }\n        const { messages, context } = this.getContextAndMessagesToPrint([\n            message,\n            ...optionalParams,\n        ]);\n        this.printMessages(messages, context, 'fatal');\n    }\n    /**\n     * Set log levels\n     * @param levels log levels\n     */\n    setLogLevels(levels) {\n        if (!this.options) {\n            this.options = {};\n        }\n        this.options.logLevels = levels;\n    }\n    /**\n     * Set logger context\n     * @param context context\n     */\n    setContext(context) {\n        this.context = context;\n    }\n    /**\n     * Resets the logger context to the value that was passed in the constructor.\n     */\n    resetContext() {\n        this.context = this.originalContext;\n    }\n    isLevelEnabled(level) {\n        const logLevels = this.options?.logLevels;\n        return (0, utils_1.isLogLevelEnabled)(level, logLevels);\n    }\n    getTimestamp() {\n        return dateTimeFormatter.format(Date.now());\n    }\n    printMessages(messages, context = '', logLevel = 'log', writeStreamType) {\n        messages.forEach(message => {\n            const pidMessage = this.formatPid(process.pid);\n            const contextMessage = this.formatContext(context);\n            const timestampDiff = this.updateAndGetTimestampDiff();\n            const formattedLogLevel = logLevel.toUpperCase().padStart(7, ' ');\n            const formattedMessage = this.formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff);\n            process[writeStreamType ?? 'stdout'].write(formattedMessage);\n        });\n    }\n    formatPid(pid) {\n        return `[Nest] ${pid}  - `;\n    }\n    formatContext(context) {\n        return context ? (0, cli_colors_util_1.yellow)(`[${context}] `) : '';\n    }\n    formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff) {\n        const output = this.stringifyMessage(message, logLevel);\n        pidMessage = this.colorize(pidMessage, logLevel);\n        formattedLogLevel = this.colorize(formattedLogLevel, logLevel);\n        return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n    }\n    stringifyMessage(message, logLevel) {\n        if ((0, shared_utils_1.isFunction)(message)) {\n            const messageAsStr = Function.prototype.toString.call(message);\n            const isClass = messageAsStr.startsWith('class ');\n            if (isClass) {\n                // If the message is a class, we will display the class name.\n                return this.stringifyMessage(message.name, logLevel);\n            }\n            // If the message is a non-class function, call it and re-resolve its value.\n            return this.stringifyMessage(message(), logLevel);\n        }\n        return (0, shared_utils_1.isPlainObject)(message) || Array.isArray(message)\n            ? `${this.colorize('Object:', logLevel)}\\n${JSON.stringify(message, (key, value) => typeof value === 'bigint' ? value.toString() : value, 2)}\\n`\n            : this.colorize(message, logLevel);\n    }\n    colorize(message, logLevel) {\n        const color = this.getColorByLogLevel(logLevel);\n        return color(message);\n    }\n    printStackTrace(stack) {\n        if (!stack) {\n            return;\n        }\n        process.stderr.write(`${stack}\\n`);\n    }\n    updateAndGetTimestampDiff() {\n        const includeTimestamp = ConsoleLogger_1.lastTimestampAt && this.options?.timestamp;\n        const result = includeTimestamp\n            ? this.formatTimestampDiff(Date.now() - ConsoleLogger_1.lastTimestampAt)\n            : '';\n        ConsoleLogger_1.lastTimestampAt = Date.now();\n        return result;\n    }\n    formatTimestampDiff(timestampDiff) {\n        return (0, cli_colors_util_1.yellow)(` +${timestampDiff}ms`);\n    }\n    getContextAndMessagesToPrint(args) {\n        if (args?.length <= 1) {\n            return { messages: args, context: this.context };\n        }\n        const lastElement = args[args.length - 1];\n        const isContext = (0, shared_utils_1.isString)(lastElement);\n        if (!isContext) {\n            return { messages: args, context: this.context };\n        }\n        return {\n            context: lastElement,\n            messages: args.slice(0, args.length - 1),\n        };\n    }\n    getContextAndStackAndMessagesToPrint(args) {\n        if (args.length === 2) {\n            return this.isStackFormat(args[1])\n                ? {\n                    messages: [args[0]],\n                    stack: args[1],\n                    context: this.context,\n                }\n                : {\n                    messages: [args[0]],\n                    context: args[1],\n                };\n        }\n        const { messages, context } = this.getContextAndMessagesToPrint(args);\n        if (messages?.length <= 1) {\n            return { messages, context };\n        }\n        const lastElement = messages[messages.length - 1];\n        const isStack = (0, shared_utils_1.isString)(lastElement);\n        // https://github.com/nestjs/nest/issues/11074#issuecomment-1421680060\n        if (!isStack && !(0, shared_utils_1.isUndefined)(lastElement)) {\n            return { messages, context };\n        }\n        return {\n            stack: lastElement,\n            messages: messages.slice(0, messages.length - 1),\n            context,\n        };\n    }\n    isStackFormat(stack) {\n        if (!(0, shared_utils_1.isString)(stack) && !(0, shared_utils_1.isUndefined)(stack)) {\n            return false;\n        }\n        return /^(.)+\\n\\s+at .+:\\d+:\\d+/.test(stack);\n    }\n    getColorByLogLevel(level) {\n        switch (level) {\n            case 'debug':\n                return cli_colors_util_1.clc.magentaBright;\n            case 'warn':\n                return cli_colors_util_1.clc.yellow;\n            case 'error':\n                return cli_colors_util_1.clc.red;\n            case 'verbose':\n                return cli_colors_util_1.clc.cyanBright;\n            case 'fatal':\n                return cli_colors_util_1.clc.bold;\n            default:\n                return cli_colors_util_1.clc.green;\n        }\n    }\n};\nexports.ConsoleLogger = ConsoleLogger;\nexports.ConsoleLogger = ConsoleLogger = ConsoleLogger_1 = tslib_1.__decorate([\n    (0, core_1.Injectable)(),\n    tslib_1.__param(0, (0, core_1.Optional)()),\n    tslib_1.__param(1, (0, core_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object])\n], ConsoleLogger);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}