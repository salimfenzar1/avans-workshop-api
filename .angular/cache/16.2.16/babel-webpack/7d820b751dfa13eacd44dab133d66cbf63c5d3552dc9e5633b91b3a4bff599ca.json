{"ast":null,"code":"/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp;\nmodule.exports.match = match;\nmodule.exports.regexpToFunction = regexpToFunction;\nmodule.exports.parse = parse;\nmodule.exports.compile = compile;\nmodule.exports.tokensToFunction = tokensToFunction;\nmodule.exports.tokensToRegExp = tokensToRegExp;\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/';\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n// Match escaped characters that would otherwise appear in future matches.\n// This allows the user to escape special characters that won't transform.\n'(\\\\\\\\.)',\n// Match Express-style parameters and un-named parameters with a prefix\n// and optional suffixes. Matches appear as:\n//\n// \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n// \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n'(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse(str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || DEFAULT_DELIMITER;\n  var whitelist = options && options.whitelist || undefined;\n  var pathEscaped = false;\n  var res;\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      pathEscaped = true;\n      continue;\n    }\n    var prev = '';\n    var name = res[2];\n    var capture = res[3];\n    var group = res[4];\n    var modifier = res[5];\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1;\n      var c = path[k];\n      var matches = whitelist ? whitelist.indexOf(c) > -1 : true;\n      if (matches) {\n        prev = c;\n        path = path.slice(0, k);\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n      pathEscaped = false;\n    }\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var pattern = capture || group;\n    var delimiter = prev || defaultDelimiter;\n    var prevText = prev || (typeof tokens[tokens.length - 1] === 'string' ? tokens[tokens.length - 1] : '');\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      pattern: pattern ? escapeGroup(pattern) : restrictBacktrack(delimiter, defaultDelimiter, prevText)\n    });\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index));\n  }\n  return tokens;\n}\nfunction restrictBacktrack(delimiter, defaultDelimiter, prevText) {\n  var charGroup = '[^' + escapeString(delimiter === defaultDelimiter ? delimiter : delimiter + defaultDelimiter) + ']';\n  if (!prevText || prevText.indexOf(delimiter) > -1 || prevText.indexOf(defaultDelimiter) > -1) {\n    return charGroup + '+?';\n  }\n  return escapeString(prevText) + '|(?:(?!' + escapeString(prevText) + ')' + charGroup + ')+?';\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile(str, options) {\n  return tokensToFunction(parse(str, options), options);\n}\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nfunction match(str, options) {\n  var keys = [];\n  var re = pathToRegexp(str, keys, options);\n  return regexpToFunction(re, keys);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nfunction regexpToFunction(re, keys) {\n  return function (pathname, options) {\n    var m = re.exec(pathname);\n    if (!m) return false;\n    var path = m[0];\n    var index = m.index;\n    var params = {};\n    var decode = options && options.decode || decodeURIComponent;\n    for (var i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n      var key = keys[i - 1];\n      if (key.repeat) {\n        params[key.name] = m[i].split(key.delimiter).map(function (value) {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n    return {\n      path: path,\n      index: index,\n      params: params\n    };\n  };\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction(tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));\n    }\n  }\n  return function (data, options) {\n    var path = '';\n    var encode = options && options.encode || encodeURIComponent;\n    var validate = options ? options.validate !== false : true;\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      if (typeof token === 'string') {\n        path += token;\n        continue;\n      }\n      var value = data ? data[token.name] : undefined;\n      var segment;\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array');\n        }\n        if (value.length === 0) {\n          if (token.optional) continue;\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty');\n        }\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token);\n          if (validate && !matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"');\n          }\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n        continue;\n      }\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token);\n        if (validate && !matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"');\n        }\n        path += token.prefix + segment;\n        continue;\n      }\n      if (token.optional) continue;\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'));\n    }\n    return path;\n  };\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup(group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1');\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags(options) {\n  return options && options.sensitive ? '' : 'i';\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp(path, keys) {\n  if (!keys) return path;\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        pattern: null\n      });\n    }\n  }\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp(path, keys, options) {\n  var parts = [];\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options);\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp(tokens, keys, options) {\n  options = options || {};\n  var strict = options.strict;\n  var start = options.start !== false;\n  var end = options.end !== false;\n  var delimiter = options.delimiter || DEFAULT_DELIMITER;\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');\n  var route = start ? '^' : '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var capture = token.repeat ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*' : token.pattern;\n      if (keys) keys.push(token);\n      if (token.optional) {\n        if (!token.prefix) {\n          route += '(' + capture + ')?';\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?';\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')';\n      }\n    }\n  }\n  if (end) {\n    if (!strict) route += '(?:' + escapeString(delimiter) + ')?';\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';\n  } else {\n    var endToken = tokens[tokens.length - 1];\n    var isEndDelimited = typeof endToken === 'string' ? endToken[endToken.length - 1] === delimiter : endToken === undefined;\n    if (!strict) route += '(?:' + escapeString(delimiter) + '(?=' + endsWith + '))?';\n    if (!isEndDelimited) route += '(?=' + escapeString(delimiter) + '|' + endsWith + ')';\n  }\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys);\n  }\n  if (Array.isArray(path)) {\n    return arrayToRegexp( /** @type {!Array} */path, keys, options);\n  }\n  return stringToRegexp( /** @type {string} */path, keys, options);\n}","map":{"version":3,"names":["module","exports","pathToRegexp","match","regexpToFunction","parse","compile","tokensToFunction","tokensToRegExp","DEFAULT_DELIMITER","PATH_REGEXP","RegExp","join","str","options","tokens","key","index","path","defaultDelimiter","delimiter","whitelist","undefined","pathEscaped","res","exec","m","escaped","offset","slice","length","prev","name","capture","group","modifier","k","c","matches","indexOf","push","repeat","optional","pattern","prevText","prefix","escapeGroup","restrictBacktrack","substr","charGroup","escapeString","keys","re","pathname","params","decode","decodeURIComponent","i","split","map","value","Array","flags","data","encode","encodeURIComponent","validate","token","segment","isArray","TypeError","j","test","String","replace","sensitive","regexpToRegexp","groups","source","arrayToRegexp","parts","stringToRegexp","strict","start","end","endsWith","concat","route","endToken","isEndDelimited"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/path-to-regexp/index.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.match = match\nmodule.exports.regexpToFunction = regexpToFunction\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var whitelist = (options && options.whitelist) || undefined\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n      var c = path[k]\n      var matches = whitelist ? whitelist.indexOf(c) > -1 : true\n\n      if (matches) {\n        prev = c\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var pattern = capture || group\n    var delimiter = prev || defaultDelimiter\n    var prevText = prev || (typeof tokens[tokens.length - 1] === 'string' ? tokens[tokens.length - 1] : '')\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      pattern: pattern\n        ? escapeGroup(pattern)\n        : restrictBacktrack(delimiter, defaultDelimiter, prevText)\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\nfunction restrictBacktrack (delimiter, defaultDelimiter, prevText) {\n  var charGroup = '[^' + escapeString(delimiter === defaultDelimiter ? delimiter : (delimiter + defaultDelimiter)) + ']'\n\n  if (!prevText || prevText.indexOf(delimiter) > -1 || prevText.indexOf(defaultDelimiter) > -1) {\n    return charGroup + '+?'\n  }\n\n  return escapeString(prevText) + '|(?:(?!' + escapeString(prevText) + ')' + charGroup + ')+?'\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nfunction match (str, options) {\n  var keys = []\n  var re = pathToRegexp(str, keys, options)\n  return regexpToFunction(re, keys)\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nfunction regexpToFunction (re, keys) {\n  return function (pathname, options) {\n    var m = re.exec(pathname)\n    if (!m) return false\n\n    var path = m[0]\n    var index = m.index\n    var params = {}\n    var decode = (options && options.decode) || decodeURIComponent\n\n    for (var i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue\n\n      var key = keys[i - 1]\n\n      if (key.repeat) {\n        params[key.name] = m[i].split(key.delimiter).map(function (value) {\n          return decode(value, key)\n        })\n      } else {\n        params[key.name] = decode(m[i], key)\n      }\n    }\n\n    return { path: path, index: index, params: params }\n  }\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n    var validate = options ? options.validate !== false : true\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (validate && !matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (validate && !matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) continue\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = options.delimiter || DEFAULT_DELIMITER\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (!token.prefix) {\n          route += '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + escapeString(delimiter) + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    var endToken = tokens[tokens.length - 1]\n    var isEndDelimited = typeof endToken === 'string'\n      ? endToken[endToken.length - 1] === delimiter\n      : endToken === undefined\n\n    if (!strict) route += '(?:' + escapeString(delimiter) + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + escapeString(delimiter) + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}