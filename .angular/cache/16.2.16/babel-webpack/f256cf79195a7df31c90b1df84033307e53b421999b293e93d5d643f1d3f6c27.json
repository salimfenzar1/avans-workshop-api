{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_ARRAY = 'isArray';\n/**\n * Checks if a given value is an array\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n/**\n * Checks if a given value is an array\n */\nexport function IsArray(validationOptions) {\n  return ValidateBy({\n    name: IS_ARRAY,\n    validator: {\n      validate: (value, args) => isArray(value),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an array', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","IS_ARRAY","isArray","value","Array","IsArray","validationOptions","name","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/typechecker/IsArray.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_ARRAY = 'isArray';\n/**\n * Checks if a given value is an array\n */\nexport function isArray(value) {\n    return Array.isArray(value);\n}\n/**\n * Checks if a given value is an array\n */\nexport function IsArray(validationOptions) {\n    return ValidateBy({\n        name: IS_ARRAY,\n        validator: {\n            validate: (value, args) => isArray(value),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an array', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAO,MAAMC,QAAQ,GAAG,SAAS;AACjC;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,KAAK,EAAE;EAC3B,OAAOC,KAAK,CAACF,OAAO,CAACC,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AACA,OAAO,SAASE,OAAOA,CAACC,iBAAiB,EAAE;EACvC,OAAON,UAAU,CAAC;IACdO,IAAI,EAAEN,QAAQ;IACdO,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACN,KAAK,EAAEO,IAAI,KAAKR,OAAO,CAACC,KAAK,CAAC;MACzCQ,cAAc,EAAEZ,YAAY,CAACa,UAAU,IAAIA,UAAU,GAAG,4BAA4B,EAAEN,iBAAiB;IAC3G;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}