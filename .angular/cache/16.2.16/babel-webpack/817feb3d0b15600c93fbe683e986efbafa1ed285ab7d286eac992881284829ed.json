{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { parsePhoneNumber } from 'libphonenumber-js/max';\nexport const IS_PHONE_NUMBER = 'isPhoneNumber';\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param value the potential phone number string to test\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function isPhoneNumber(value, region) {\n  if (typeof value !== 'string' || value.trim() !== value) {\n    return false;\n  }\n  try {\n    const phoneNumber = parsePhoneNumber(value, region);\n    /**\n     * We fail the validation if the user provided a region code\n     * and it doesn't match with the country code of the parsed number.\n     **/\n    if (region && phoneNumber.country !== region) {\n      return false;\n    }\n    return phoneNumber.isValid();\n  } catch (error) {\n    return false;\n  }\n}\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function IsPhoneNumber(region, validationOptions) {\n  return ValidateBy({\n    name: IS_PHONE_NUMBER,\n    constraints: [region],\n    validator: {\n      validate: (value, args) => isPhoneNumber(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a valid phone number', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","parsePhoneNumber","IS_PHONE_NUMBER","isPhoneNumber","value","region","trim","phoneNumber","country","isValid","error","IsPhoneNumber","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsPhoneNumber.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { parsePhoneNumber } from 'libphonenumber-js/max';\nexport const IS_PHONE_NUMBER = 'isPhoneNumber';\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param value the potential phone number string to test\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function isPhoneNumber(value, region) {\n    if (typeof value !== 'string' || value.trim() !== value) {\n        return false;\n    }\n    try {\n        const phoneNumber = parsePhoneNumber(value, region);\n        /**\n         * We fail the validation if the user provided a region code\n         * and it doesn't match with the country code of the parsed number.\n         **/\n        if (region && phoneNumber.country !== region) {\n            return false;\n        }\n        return phoneNumber.isValid();\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function IsPhoneNumber(region, validationOptions) {\n    return ValidateBy({\n        name: IS_PHONE_NUMBER,\n        constraints: [region],\n        validator: {\n            validate: (value, args) => isPhoneNumber(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a valid phone number', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,OAAO,MAAMC,eAAe,GAAG,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACzC,IAAI,OAAOD,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACE,IAAI,CAAC,CAAC,KAAKF,KAAK,EAAE;IACrD,OAAO,KAAK;EAChB;EACA,IAAI;IACA,MAAMG,WAAW,GAAGN,gBAAgB,CAACG,KAAK,EAAEC,MAAM,CAAC;IACnD;AACR;AACA;AACA;IACQ,IAAIA,MAAM,IAAIE,WAAW,CAACC,OAAO,KAAKH,MAAM,EAAE;MAC1C,OAAO,KAAK;IAChB;IACA,OAAOE,WAAW,CAACE,OAAO,CAAC,CAAC;EAChC,CAAC,CACD,OAAOC,KAAK,EAAE;IACV,OAAO,KAAK;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACN,MAAM,EAAEO,iBAAiB,EAAE;EACrD,OAAOZ,UAAU,CAAC;IACda,IAAI,EAAEX,eAAe;IACrBY,WAAW,EAAE,CAACT,MAAM,CAAC;IACrBU,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACZ,KAAK,EAAEa,IAAI,KAAKd,aAAa,CAACC,KAAK,EAAEa,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MAChHI,cAAc,EAAEnB,YAAY,CAACoB,UAAU,IAAIA,UAAU,GAAG,wCAAwC,EAAEP,iBAAiB;IACvH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}