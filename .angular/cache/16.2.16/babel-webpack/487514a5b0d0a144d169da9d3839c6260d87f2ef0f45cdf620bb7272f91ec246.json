{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InterceptorsContextCreator = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst context_creator_1 = require(\"../helpers/context-creator\");\nconst constants_2 = require(\"../injector/constants\");\nclass InterceptorsContextCreator extends context_creator_1.ContextCreator {\n  constructor(container, config) {\n    super();\n    this.container = container;\n    this.config = config;\n  }\n  create(instance, callback, module, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    this.moduleContext = module;\n    return this.createContext(instance, callback, constants_1.INTERCEPTORS_METADATA, contextId, inquirerId);\n  }\n  createConcreteContext(metadata, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    if ((0, shared_utils_1.isEmpty)(metadata)) {\n      return [];\n    }\n    return (0, iterare_1.iterate)(metadata).filter(interceptor => interceptor && (interceptor.name || interceptor.intercept)).map(interceptor => this.getInterceptorInstance(interceptor, contextId, inquirerId)).filter(interceptor => interceptor && (0, shared_utils_1.isFunction)(interceptor.intercept)).toArray();\n  }\n  getInterceptorInstance(metatype, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    const isObject = metatype.intercept;\n    if (isObject) {\n      return metatype;\n    }\n    const instanceWrapper = this.getInstanceByMetatype(metatype);\n    if (!instanceWrapper) {\n      return null;\n    }\n    const instanceHost = instanceWrapper.getInstanceByContextId(this.getContextId(contextId, instanceWrapper), inquirerId);\n    return instanceHost && instanceHost.instance;\n  }\n  getInstanceByMetatype(metatype) {\n    if (!this.moduleContext) {\n      return;\n    }\n    const collection = this.container.getModules();\n    const moduleRef = collection.get(this.moduleContext);\n    if (!moduleRef) {\n      return;\n    }\n    return moduleRef.injectables.get(metatype);\n  }\n  getGlobalMetadata(contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n    if (!this.config) {\n      return [];\n    }\n    const globalInterceptors = this.config.getGlobalInterceptors();\n    if (contextId === constants_2.STATIC_CONTEXT && !inquirerId) {\n      return globalInterceptors;\n    }\n    const scopedInterceptorWrappers = this.config.getGlobalRequestInterceptors();\n    const scopedInterceptors = (0, iterare_1.iterate)(scopedInterceptorWrappers).map(wrapper => wrapper.getInstanceByContextId(this.getContextId(contextId, wrapper), inquirerId)).filter(host => !!host).map(host => host.instance).toArray();\n    return globalInterceptors.concat(scopedInterceptors);\n  }\n}\nexports.InterceptorsContextCreator = InterceptorsContextCreator;","map":{"version":3,"names":["Object","defineProperty","exports","value","InterceptorsContextCreator","constants_1","require","shared_utils_1","iterare_1","context_creator_1","constants_2","ContextCreator","constructor","container","config","create","instance","callback","module","contextId","STATIC_CONTEXT","inquirerId","moduleContext","createContext","INTERCEPTORS_METADATA","createConcreteContext","metadata","isEmpty","iterate","filter","interceptor","name","intercept","map","getInterceptorInstance","isFunction","toArray","metatype","isObject","instanceWrapper","getInstanceByMetatype","instanceHost","getInstanceByContextId","getContextId","collection","getModules","moduleRef","get","injectables","getGlobalMetadata","globalInterceptors","getGlobalInterceptors","scopedInterceptorWrappers","getGlobalRequestInterceptors","scopedInterceptors","wrapper","host","concat"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/interceptors/interceptors-context-creator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InterceptorsContextCreator = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst context_creator_1 = require(\"../helpers/context-creator\");\nconst constants_2 = require(\"../injector/constants\");\nclass InterceptorsContextCreator extends context_creator_1.ContextCreator {\n    constructor(container, config) {\n        super();\n        this.container = container;\n        this.config = config;\n    }\n    create(instance, callback, module, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n        this.moduleContext = module;\n        return this.createContext(instance, callback, constants_1.INTERCEPTORS_METADATA, contextId, inquirerId);\n    }\n    createConcreteContext(metadata, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n        if ((0, shared_utils_1.isEmpty)(metadata)) {\n            return [];\n        }\n        return (0, iterare_1.iterate)(metadata)\n            .filter(interceptor => interceptor && (interceptor.name || interceptor.intercept))\n            .map(interceptor => this.getInterceptorInstance(interceptor, contextId, inquirerId))\n            .filter((interceptor) => interceptor && (0, shared_utils_1.isFunction)(interceptor.intercept))\n            .toArray();\n    }\n    getInterceptorInstance(metatype, contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n        const isObject = metatype.intercept;\n        if (isObject) {\n            return metatype;\n        }\n        const instanceWrapper = this.getInstanceByMetatype(metatype);\n        if (!instanceWrapper) {\n            return null;\n        }\n        const instanceHost = instanceWrapper.getInstanceByContextId(this.getContextId(contextId, instanceWrapper), inquirerId);\n        return instanceHost && instanceHost.instance;\n    }\n    getInstanceByMetatype(metatype) {\n        if (!this.moduleContext) {\n            return;\n        }\n        const collection = this.container.getModules();\n        const moduleRef = collection.get(this.moduleContext);\n        if (!moduleRef) {\n            return;\n        }\n        return moduleRef.injectables.get(metatype);\n    }\n    getGlobalMetadata(contextId = constants_2.STATIC_CONTEXT, inquirerId) {\n        if (!this.config) {\n            return [];\n        }\n        const globalInterceptors = this.config.getGlobalInterceptors();\n        if (contextId === constants_2.STATIC_CONTEXT && !inquirerId) {\n            return globalInterceptors;\n        }\n        const scopedInterceptorWrappers = this.config.getGlobalRequestInterceptors();\n        const scopedInterceptors = (0, iterare_1.iterate)(scopedInterceptorWrappers)\n            .map(wrapper => wrapper.getInstanceByContextId(this.getContextId(contextId, wrapper), inquirerId))\n            .filter(host => !!host)\n            .map(host => host.instance)\n            .toArray();\n        return globalInterceptors.concat(scopedInterceptors);\n    }\n}\nexports.InterceptorsContextCreator = InterceptorsContextCreator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}