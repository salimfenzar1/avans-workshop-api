{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isDivisibleByValidator from 'validator/lib/isDivisibleBy';\nexport const IS_DIVISIBLE_BY = 'isDivisibleBy';\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function isDivisibleBy(value, num) {\n  return typeof value === 'number' && typeof num === 'number' && isDivisibleByValidator(String(value), num);\n}\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function IsDivisibleBy(num, validationOptions) {\n  return ValidateBy({\n    name: IS_DIVISIBLE_BY,\n    constraints: [num],\n    validator: {\n      validate: (value, args) => isDivisibleBy(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be divisible by $constraint1', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isDivisibleByValidator","IS_DIVISIBLE_BY","isDivisibleBy","value","num","String","IsDivisibleBy","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/number/IsDivisibleBy.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isDivisibleByValidator from 'validator/lib/isDivisibleBy';\nexport const IS_DIVISIBLE_BY = 'isDivisibleBy';\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function isDivisibleBy(value, num) {\n    return typeof value === 'number' && typeof num === 'number' && isDivisibleByValidator(String(value), num);\n}\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function IsDivisibleBy(num, validationOptions) {\n    return ValidateBy({\n        name: IS_DIVISIBLE_BY,\n        constraints: [num],\n        validator: {\n            validate: (value, args) => isDivisibleBy(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be divisible by $constraint1', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,sBAAsB,MAAM,6BAA6B;AAChE,OAAO,MAAMC,eAAe,GAAG,eAAe;AAC9C;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAEC,GAAG,EAAE;EACtC,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAI,OAAOC,GAAG,KAAK,QAAQ,IAAIJ,sBAAsB,CAACK,MAAM,CAACF,KAAK,CAAC,EAAEC,GAAG,CAAC;AAC7G;AACA;AACA;AACA;AACA,OAAO,SAASE,aAAaA,CAACF,GAAG,EAAEG,iBAAiB,EAAE;EAClD,OAAOR,UAAU,CAAC;IACdS,IAAI,EAAEP,eAAe;IACrBQ,WAAW,EAAE,CAACL,GAAG,CAAC;IAClBM,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACR,KAAK,EAAES,IAAI,KAAKV,aAAa,CAACC,KAAK,EAAES,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MAChHI,cAAc,EAAEf,YAAY,CAACgB,UAAU,IAAIA,UAAU,GAAG,6CAA6C,EAAEP,iBAAiB;IAC5H;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}