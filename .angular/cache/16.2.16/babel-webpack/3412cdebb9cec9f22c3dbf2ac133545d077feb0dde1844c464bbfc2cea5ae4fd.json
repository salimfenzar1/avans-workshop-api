{"ast":null,"code":"import { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate() {\n    const token = localStorage.getItem('token'); // Check if token exists\n    if (token) {\n      return true; // Allow access\n    } else {\n      // Redirect to the login page if no token is found\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Router","AuthGuard","constructor","router","canActivate","token","localStorage","getItem","navigate","i0","ɵɵinject","i1","factory","ɵfac","providedIn"],"sources":["C:\\Users\\salim\\Dev\\avans-nx-workshop-2024\\avans-nx-workshop\\libs\\backend\\auth\\src\\lib\\auth\\auth.guards.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private router: Router) {}\r\n\r\n  canActivate(): boolean {\r\n    const token = localStorage.getItem('token'); // Check if token exists\r\n    if (token) {\r\n      return true; // Allow access\r\n    } else {\r\n      // Redirect to the login page if no token is found\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAsBA,MAAM,QAAQ,iBAAiB;;;AAKrD,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,WAAWA,CAAA;IACT,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7C,IAAIF,KAAK,EAAE;MACT,OAAO,IAAI,CAAC,CAAC;KACd,MAAM;MACL;MACA,IAAI,CAACF,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;;;uBAZWP,SAAS,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAX,MAAA;IAAA;EAAA;;;aAATC,SAAS;MAAAW,OAAA,EAATX,SAAS,CAAAY,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}