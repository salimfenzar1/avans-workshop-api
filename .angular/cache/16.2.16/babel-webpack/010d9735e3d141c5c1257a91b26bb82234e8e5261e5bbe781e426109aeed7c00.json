{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NestApplicationContext = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst constants_1 = require(\"./constants\");\nconst exceptions_1 = require(\"./errors/exceptions\");\nconst context_id_factory_1 = require(\"./helpers/context-id-factory\");\nconst hooks_1 = require(\"./hooks\");\nconst abstract_instance_resolver_1 = require(\"./injector/abstract-instance-resolver\");\nconst compiler_1 = require(\"./injector/compiler\");\nconst injector_1 = require(\"./injector/injector\");\nconst instance_links_host_1 = require(\"./injector/instance-links-host\");\n/**\n * @publicApi\n */\nclass NestApplicationContext extends abstract_instance_resolver_1.AbstractInstanceResolver {\n  get instanceLinksHost() {\n    if (!this._instanceLinksHost) {\n      this._instanceLinksHost = new instance_links_host_1.InstanceLinksHost(this.container);\n    }\n    return this._instanceLinksHost;\n  }\n  constructor(container, appOptions = {}, contextModule = null, scope = new Array()) {\n    super();\n    this.container = container;\n    this.appOptions = appOptions;\n    this.contextModule = contextModule;\n    this.scope = scope;\n    this.isInitialized = false;\n    this.logger = new common_1.Logger(NestApplicationContext.name, {\n      timestamp: true\n    });\n    this.shouldFlushLogsOnOverride = false;\n    this.activeShutdownSignals = new Array();\n    this.moduleCompiler = new compiler_1.ModuleCompiler();\n    this.injector = new injector_1.Injector();\n    if (this.appOptions.preview) {\n      this.printInPreviewModeWarning();\n    }\n  }\n  selectContextModule() {\n    const modules = this.container.getModules().values();\n    this.contextModule = modules.next().value;\n  }\n  /**\n   * Allows navigating through the modules tree, for example, to pull out a specific instance from the selected module.\n   * @returns {INestApplicationContext}\n   */\n  select(moduleType) {\n    const modulesContainer = this.container.getModules();\n    const contextModuleCtor = this.contextModule.metatype;\n    const scope = this.scope.concat(contextModuleCtor);\n    const moduleTokenFactory = this.container.getModuleTokenFactory();\n    const {\n      type,\n      dynamicMetadata\n    } = this.moduleCompiler.extractMetadata(moduleType);\n    const token = moduleTokenFactory.create(type, dynamicMetadata);\n    const selectedModule = modulesContainer.get(token);\n    if (!selectedModule) {\n      throw new exceptions_1.UnknownModuleException(type.name);\n    }\n    return new NestApplicationContext(this.container, this.appOptions, selectedModule, scope);\n  }\n  /**\n   * Retrieves an instance (or a list of instances) of either injectable or controller, otherwise, throws exception.\n   * @returns {TResult | Array<TResult>}\n   */\n  get(typeOrToken, options = {\n    strict: false\n  }) {\n    return !(options && options.strict) ? this.find(typeOrToken, options) : this.find(typeOrToken, {\n      moduleId: this.contextModule?.id,\n      each: options.each\n    });\n  }\n  /**\n   * Resolves transient or request-scoped instance (or a list of instances) of either injectable or controller, otherwise, throws exception.\n   * @returns {Promise<TResult | Array<TResult>>}\n   */\n  resolve(typeOrToken, contextId = (0, context_id_factory_1.createContextId)(), options = {\n    strict: false\n  }) {\n    return this.resolvePerContext(typeOrToken, this.contextModule, contextId, options);\n  }\n  /**\n   * Registers the request/context object for a given context ID (DI container sub-tree).\n   * @returns {void}\n   */\n  registerRequestByContextId(request, contextId) {\n    this.container.registerRequestProvider(request, contextId);\n  }\n  /**\n   * Initializes the Nest application.\n   * Calls the Nest lifecycle events.\n   *\n   * @returns {Promise<this>} The NestApplicationContext instance as Promise\n   */\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.isInitialized) {\n        return _this;\n      }\n      _this.initializationPromise = new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            yield _this.callInitHook();\n            yield _this.callBootstrapHook();\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      yield _this.initializationPromise;\n      _this.isInitialized = true;\n      return _this;\n    })();\n  }\n  /**\n   * Terminates the application\n   * @returns {Promise<void>}\n   */\n  close(signal) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.initializationPromise;\n      yield _this2.callDestroyHook();\n      yield _this2.callBeforeShutdownHook(signal);\n      yield _this2.dispose();\n      yield _this2.callShutdownHook(signal);\n      _this2.unsubscribeFromProcessSignals();\n    })();\n  }\n  /**\n   * Sets custom logger service.\n   * Flushes buffered logs if auto flush is on.\n   * @returns {void}\n   */\n  useLogger(logger) {\n    common_1.Logger.overrideLogger(logger);\n    if (this.shouldFlushLogsOnOverride) {\n      this.flushLogs();\n    }\n  }\n  /**\n   * Prints buffered logs and detaches buffer.\n   * @returns {void}\n   */\n  flushLogs() {\n    common_1.Logger.flush();\n  }\n  /**\n   * Define that it must flush logs right after defining a custom logger.\n   */\n  flushLogsOnOverride() {\n    this.shouldFlushLogsOnOverride = true;\n  }\n  /**\n   * Enables the usage of shutdown hooks. Will call the\n   * `onApplicationShutdown` function of a provider if the\n   * process receives a shutdown signal.\n   *\n   * @param {ShutdownSignal[]} [signals=[]] The system signals it should listen to\n   *\n   * @returns {this} The Nest application context instance\n   */\n  enableShutdownHooks(signals = []) {\n    if ((0, shared_utils_1.isEmpty)(signals)) {\n      signals = Object.keys(common_1.ShutdownSignal).map(key => common_1.ShutdownSignal[key]);\n    } else {\n      // given signals array should be unique because\n      // process shouldn't listen to the same signal more than once.\n      signals = Array.from(new Set(signals));\n    }\n    signals = (0, iterare_1.iterate)(signals).map(signal => signal.toString().toUpperCase().trim())\n    // filter out the signals which is already listening to\n    .filter(signal => !this.activeShutdownSignals.includes(signal)).toArray();\n    this.listenToShutdownSignals(signals);\n    return this;\n  }\n  dispose() {\n    return _asyncToGenerator(function* () {\n      // Nest application context has no server\n      // to dispose, therefore just call a noop\n      return Promise.resolve();\n    })();\n  }\n  /**\n   * Listens to shutdown signals by listening to\n   * process events\n   *\n   * @param {string[]} signals The system signals it should listen to\n   */\n  listenToShutdownSignals(signals) {\n    var _this3 = this;\n    let receivedSignal = false;\n    const _cleanup = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (signal) {\n        try {\n          if (receivedSignal) {\n            // If we receive another signal while we're waiting\n            // for the server to stop, just ignore it.\n            return;\n          }\n          receivedSignal = true;\n          yield _this3.initializationPromise;\n          yield _this3.callDestroyHook();\n          yield _this3.callBeforeShutdownHook(signal);\n          yield _this3.dispose();\n          yield _this3.callShutdownHook(signal);\n          signals.forEach(sig => process.removeListener(sig, _cleanup));\n          process.kill(process.pid, signal);\n        } catch (err) {\n          common_1.Logger.error(constants_1.MESSAGES.ERROR_DURING_SHUTDOWN, err?.stack, NestApplicationContext.name);\n          process.exit(1);\n        }\n      });\n      return function cleanup(_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    this.shutdownCleanupRef = _cleanup;\n    signals.forEach(signal => {\n      this.activeShutdownSignals.push(signal);\n      process.on(signal, _cleanup);\n    });\n  }\n  /**\n   * Unsubscribes from shutdown signals (process events)\n   */\n  unsubscribeFromProcessSignals() {\n    if (!this.shutdownCleanupRef) {\n      return;\n    }\n    this.activeShutdownSignals.forEach(signal => {\n      process.removeListener(signal, this.shutdownCleanupRef);\n    });\n  }\n  /**\n   * Calls the `onModuleInit` function on the registered\n   * modules and its children.\n   */\n  callInitHook() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const modulesSortedByDistance = _this4.getModulesToTriggerHooksOn();\n      for (const module of modulesSortedByDistance) {\n        yield (0, hooks_1.callModuleInitHook)(module);\n      }\n    })();\n  }\n  /**\n   * Calls the `onModuleDestroy` function on the registered\n   * modules and its children.\n   */\n  callDestroyHook() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const modulesSortedByDistance = _this5.getModulesToTriggerHooksOn();\n      for (const module of modulesSortedByDistance) {\n        yield (0, hooks_1.callModuleDestroyHook)(module);\n      }\n    })();\n  }\n  /**\n   * Calls the `onApplicationBootstrap` function on the registered\n   * modules and its children.\n   */\n  callBootstrapHook() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const modulesSortedByDistance = _this6.getModulesToTriggerHooksOn();\n      for (const module of modulesSortedByDistance) {\n        yield (0, hooks_1.callModuleBootstrapHook)(module);\n      }\n    })();\n  }\n  /**\n   * Calls the `onApplicationShutdown` function on the registered\n   * modules and children.\n   */\n  callShutdownHook(signal) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const modulesSortedByDistance = _this7.getModulesToTriggerHooksOn();\n      for (const module of modulesSortedByDistance) {\n        yield (0, hooks_1.callAppShutdownHook)(module, signal);\n      }\n    })();\n  }\n  /**\n   * Calls the `beforeApplicationShutdown` function on the registered\n   * modules and children.\n   */\n  callBeforeShutdownHook(signal) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const modulesSortedByDistance = _this8.getModulesToTriggerHooksOn();\n      for (const module of modulesSortedByDistance) {\n        yield (0, hooks_1.callBeforeAppShutdownHook)(module, signal);\n      }\n    })();\n  }\n  assertNotInPreviewMode(methodName) {\n    if (this.appOptions.preview) {\n      const error = `Calling the \"${methodName}\" in the preview mode is not supported.`;\n      this.logger.error(error);\n      throw new Error(error);\n    }\n  }\n  getModulesToTriggerHooksOn() {\n    if (this._moduleRefsForHooksByDistance) {\n      return this._moduleRefsForHooksByDistance;\n    }\n    const modulesContainer = this.container.getModules();\n    const compareFn = (a, b) => b.distance - a.distance;\n    const modulesSortedByDistance = Array.from(modulesContainer.values()).sort(compareFn);\n    this._moduleRefsForHooksByDistance = this.appOptions?.preview ? modulesSortedByDistance.filter(moduleRef => moduleRef.initOnPreview) : modulesSortedByDistance;\n    return this._moduleRefsForHooksByDistance;\n  }\n  printInPreviewModeWarning() {\n    this.logger.warn('------------------------------------------------');\n    this.logger.warn('Application is running in the PREVIEW mode!');\n    this.logger.warn('Providers/controllers will not be instantiated.');\n    this.logger.warn('------------------------------------------------');\n  }\n}\nexports.NestApplicationContext = NestApplicationContext;","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","NestApplicationContext","common_1","shared_utils_1","iterare_1","constants_1","exceptions_1","context_id_factory_1","hooks_1","abstract_instance_resolver_1","compiler_1","injector_1","instance_links_host_1","AbstractInstanceResolver","instanceLinksHost","_instanceLinksHost","InstanceLinksHost","container","constructor","appOptions","contextModule","scope","Array","isInitialized","logger","Logger","name","timestamp","shouldFlushLogsOnOverride","activeShutdownSignals","moduleCompiler","ModuleCompiler","injector","Injector","preview","printInPreviewModeWarning","selectContextModule","modules","getModules","values","next","select","moduleType","modulesContainer","contextModuleCtor","metatype","concat","moduleTokenFactory","getModuleTokenFactory","type","dynamicMetadata","extractMetadata","token","create","selectedModule","get","UnknownModuleException","typeOrToken","options","strict","find","moduleId","id","each","resolve","contextId","createContextId","resolvePerContext","registerRequestByContextId","request","registerRequestProvider","init","_this","initializationPromise","Promise","_ref","reject","callInitHook","callBootstrapHook","err","_x","_x2","apply","arguments","close","signal","_this2","callDestroyHook","callBeforeShutdownHook","dispose","callShutdownHook","unsubscribeFromProcessSignals","useLogger","overrideLogger","flushLogs","flush","flushLogsOnOverride","enableShutdownHooks","signals","isEmpty","keys","ShutdownSignal","map","key","from","Set","iterate","toString","toUpperCase","trim","filter","includes","toArray","listenToShutdownSignals","_this3","receivedSignal","cleanup","_ref2","forEach","sig","process","removeListener","kill","pid","error","MESSAGES","ERROR_DURING_SHUTDOWN","stack","exit","_x3","shutdownCleanupRef","push","on","_this4","modulesSortedByDistance","getModulesToTriggerHooksOn","module","callModuleInitHook","_this5","callModuleDestroyHook","_this6","callModuleBootstrapHook","_this7","callAppShutdownHook","_this8","callBeforeAppShutdownHook","assertNotInPreviewMode","methodName","Error","_moduleRefsForHooksByDistance","compareFn","a","b","distance","sort","moduleRef","initOnPreview","warn"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/nest-application-context.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NestApplicationContext = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst constants_1 = require(\"./constants\");\nconst exceptions_1 = require(\"./errors/exceptions\");\nconst context_id_factory_1 = require(\"./helpers/context-id-factory\");\nconst hooks_1 = require(\"./hooks\");\nconst abstract_instance_resolver_1 = require(\"./injector/abstract-instance-resolver\");\nconst compiler_1 = require(\"./injector/compiler\");\nconst injector_1 = require(\"./injector/injector\");\nconst instance_links_host_1 = require(\"./injector/instance-links-host\");\n/**\n * @publicApi\n */\nclass NestApplicationContext extends abstract_instance_resolver_1.AbstractInstanceResolver {\n    get instanceLinksHost() {\n        if (!this._instanceLinksHost) {\n            this._instanceLinksHost = new instance_links_host_1.InstanceLinksHost(this.container);\n        }\n        return this._instanceLinksHost;\n    }\n    constructor(container, appOptions = {}, contextModule = null, scope = new Array()) {\n        super();\n        this.container = container;\n        this.appOptions = appOptions;\n        this.contextModule = contextModule;\n        this.scope = scope;\n        this.isInitialized = false;\n        this.logger = new common_1.Logger(NestApplicationContext.name, {\n            timestamp: true,\n        });\n        this.shouldFlushLogsOnOverride = false;\n        this.activeShutdownSignals = new Array();\n        this.moduleCompiler = new compiler_1.ModuleCompiler();\n        this.injector = new injector_1.Injector();\n        if (this.appOptions.preview) {\n            this.printInPreviewModeWarning();\n        }\n    }\n    selectContextModule() {\n        const modules = this.container.getModules().values();\n        this.contextModule = modules.next().value;\n    }\n    /**\n     * Allows navigating through the modules tree, for example, to pull out a specific instance from the selected module.\n     * @returns {INestApplicationContext}\n     */\n    select(moduleType) {\n        const modulesContainer = this.container.getModules();\n        const contextModuleCtor = this.contextModule.metatype;\n        const scope = this.scope.concat(contextModuleCtor);\n        const moduleTokenFactory = this.container.getModuleTokenFactory();\n        const { type, dynamicMetadata } = this.moduleCompiler.extractMetadata(moduleType);\n        const token = moduleTokenFactory.create(type, dynamicMetadata);\n        const selectedModule = modulesContainer.get(token);\n        if (!selectedModule) {\n            throw new exceptions_1.UnknownModuleException(type.name);\n        }\n        return new NestApplicationContext(this.container, this.appOptions, selectedModule, scope);\n    }\n    /**\n     * Retrieves an instance (or a list of instances) of either injectable or controller, otherwise, throws exception.\n     * @returns {TResult | Array<TResult>}\n     */\n    get(typeOrToken, options = { strict: false }) {\n        return !(options && options.strict)\n            ? this.find(typeOrToken, options)\n            : this.find(typeOrToken, {\n                moduleId: this.contextModule?.id,\n                each: options.each,\n            });\n    }\n    /**\n     * Resolves transient or request-scoped instance (or a list of instances) of either injectable or controller, otherwise, throws exception.\n     * @returns {Promise<TResult | Array<TResult>>}\n     */\n    resolve(typeOrToken, contextId = (0, context_id_factory_1.createContextId)(), options = { strict: false }) {\n        return this.resolvePerContext(typeOrToken, this.contextModule, contextId, options);\n    }\n    /**\n     * Registers the request/context object for a given context ID (DI container sub-tree).\n     * @returns {void}\n     */\n    registerRequestByContextId(request, contextId) {\n        this.container.registerRequestProvider(request, contextId);\n    }\n    /**\n     * Initializes the Nest application.\n     * Calls the Nest lifecycle events.\n     *\n     * @returns {Promise<this>} The NestApplicationContext instance as Promise\n     */\n    async init() {\n        if (this.isInitialized) {\n            return this;\n        }\n        this.initializationPromise = new Promise(async (resolve, reject) => {\n            try {\n                await this.callInitHook();\n                await this.callBootstrapHook();\n                resolve();\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n        await this.initializationPromise;\n        this.isInitialized = true;\n        return this;\n    }\n    /**\n     * Terminates the application\n     * @returns {Promise<void>}\n     */\n    async close(signal) {\n        await this.initializationPromise;\n        await this.callDestroyHook();\n        await this.callBeforeShutdownHook(signal);\n        await this.dispose();\n        await this.callShutdownHook(signal);\n        this.unsubscribeFromProcessSignals();\n    }\n    /**\n     * Sets custom logger service.\n     * Flushes buffered logs if auto flush is on.\n     * @returns {void}\n     */\n    useLogger(logger) {\n        common_1.Logger.overrideLogger(logger);\n        if (this.shouldFlushLogsOnOverride) {\n            this.flushLogs();\n        }\n    }\n    /**\n     * Prints buffered logs and detaches buffer.\n     * @returns {void}\n     */\n    flushLogs() {\n        common_1.Logger.flush();\n    }\n    /**\n     * Define that it must flush logs right after defining a custom logger.\n     */\n    flushLogsOnOverride() {\n        this.shouldFlushLogsOnOverride = true;\n    }\n    /**\n     * Enables the usage of shutdown hooks. Will call the\n     * `onApplicationShutdown` function of a provider if the\n     * process receives a shutdown signal.\n     *\n     * @param {ShutdownSignal[]} [signals=[]] The system signals it should listen to\n     *\n     * @returns {this} The Nest application context instance\n     */\n    enableShutdownHooks(signals = []) {\n        if ((0, shared_utils_1.isEmpty)(signals)) {\n            signals = Object.keys(common_1.ShutdownSignal).map((key) => common_1.ShutdownSignal[key]);\n        }\n        else {\n            // given signals array should be unique because\n            // process shouldn't listen to the same signal more than once.\n            signals = Array.from(new Set(signals));\n        }\n        signals = (0, iterare_1.iterate)(signals)\n            .map((signal) => signal.toString().toUpperCase().trim())\n            // filter out the signals which is already listening to\n            .filter(signal => !this.activeShutdownSignals.includes(signal))\n            .toArray();\n        this.listenToShutdownSignals(signals);\n        return this;\n    }\n    async dispose() {\n        // Nest application context has no server\n        // to dispose, therefore just call a noop\n        return Promise.resolve();\n    }\n    /**\n     * Listens to shutdown signals by listening to\n     * process events\n     *\n     * @param {string[]} signals The system signals it should listen to\n     */\n    listenToShutdownSignals(signals) {\n        let receivedSignal = false;\n        const cleanup = async (signal) => {\n            try {\n                if (receivedSignal) {\n                    // If we receive another signal while we're waiting\n                    // for the server to stop, just ignore it.\n                    return;\n                }\n                receivedSignal = true;\n                await this.initializationPromise;\n                await this.callDestroyHook();\n                await this.callBeforeShutdownHook(signal);\n                await this.dispose();\n                await this.callShutdownHook(signal);\n                signals.forEach(sig => process.removeListener(sig, cleanup));\n                process.kill(process.pid, signal);\n            }\n            catch (err) {\n                common_1.Logger.error(constants_1.MESSAGES.ERROR_DURING_SHUTDOWN, err?.stack, NestApplicationContext.name);\n                process.exit(1);\n            }\n        };\n        this.shutdownCleanupRef = cleanup;\n        signals.forEach((signal) => {\n            this.activeShutdownSignals.push(signal);\n            process.on(signal, cleanup);\n        });\n    }\n    /**\n     * Unsubscribes from shutdown signals (process events)\n     */\n    unsubscribeFromProcessSignals() {\n        if (!this.shutdownCleanupRef) {\n            return;\n        }\n        this.activeShutdownSignals.forEach(signal => {\n            process.removeListener(signal, this.shutdownCleanupRef);\n        });\n    }\n    /**\n     * Calls the `onModuleInit` function on the registered\n     * modules and its children.\n     */\n    async callInitHook() {\n        const modulesSortedByDistance = this.getModulesToTriggerHooksOn();\n        for (const module of modulesSortedByDistance) {\n            await (0, hooks_1.callModuleInitHook)(module);\n        }\n    }\n    /**\n     * Calls the `onModuleDestroy` function on the registered\n     * modules and its children.\n     */\n    async callDestroyHook() {\n        const modulesSortedByDistance = this.getModulesToTriggerHooksOn();\n        for (const module of modulesSortedByDistance) {\n            await (0, hooks_1.callModuleDestroyHook)(module);\n        }\n    }\n    /**\n     * Calls the `onApplicationBootstrap` function on the registered\n     * modules and its children.\n     */\n    async callBootstrapHook() {\n        const modulesSortedByDistance = this.getModulesToTriggerHooksOn();\n        for (const module of modulesSortedByDistance) {\n            await (0, hooks_1.callModuleBootstrapHook)(module);\n        }\n    }\n    /**\n     * Calls the `onApplicationShutdown` function on the registered\n     * modules and children.\n     */\n    async callShutdownHook(signal) {\n        const modulesSortedByDistance = this.getModulesToTriggerHooksOn();\n        for (const module of modulesSortedByDistance) {\n            await (0, hooks_1.callAppShutdownHook)(module, signal);\n        }\n    }\n    /**\n     * Calls the `beforeApplicationShutdown` function on the registered\n     * modules and children.\n     */\n    async callBeforeShutdownHook(signal) {\n        const modulesSortedByDistance = this.getModulesToTriggerHooksOn();\n        for (const module of modulesSortedByDistance) {\n            await (0, hooks_1.callBeforeAppShutdownHook)(module, signal);\n        }\n    }\n    assertNotInPreviewMode(methodName) {\n        if (this.appOptions.preview) {\n            const error = `Calling the \"${methodName}\" in the preview mode is not supported.`;\n            this.logger.error(error);\n            throw new Error(error);\n        }\n    }\n    getModulesToTriggerHooksOn() {\n        if (this._moduleRefsForHooksByDistance) {\n            return this._moduleRefsForHooksByDistance;\n        }\n        const modulesContainer = this.container.getModules();\n        const compareFn = (a, b) => b.distance - a.distance;\n        const modulesSortedByDistance = Array.from(modulesContainer.values()).sort(compareFn);\n        this._moduleRefsForHooksByDistance = this.appOptions?.preview\n            ? modulesSortedByDistance.filter(moduleRef => moduleRef.initOnPreview)\n            : modulesSortedByDistance;\n        return this._moduleRefsForHooksByDistance;\n    }\n    printInPreviewModeWarning() {\n        this.logger.warn('------------------------------------------------');\n        this.logger.warn('Application is running in the PREVIEW mode!');\n        this.logger.warn('Providers/controllers will not be instantiated.');\n        this.logger.warn('------------------------------------------------');\n    }\n}\nexports.NestApplicationContext = NestApplicationContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}