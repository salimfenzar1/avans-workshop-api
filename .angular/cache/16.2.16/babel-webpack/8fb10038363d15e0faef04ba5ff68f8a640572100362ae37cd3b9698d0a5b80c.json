{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isPassportNumberValidator from 'validator/lib/isPassportNumber';\nexport const IS_PASSPORT_NUMBER = 'isPassportNumber';\n/**\n * Check if the string is a valid passport number relative to a specific country code.\n * If given value is not a string, then it returns false.\n */\nexport function isPassportNumber(value, countryCode) {\n  return typeof value === 'string' && isPassportNumberValidator(value, countryCode);\n}\n/**\n * Check if the string is a valid passport number relative to a specific country code.\n * If given value is not a string, then it returns false.\n */\nexport function IsPassportNumber(countryCode, validationOptions) {\n  return ValidateBy({\n    name: IS_PASSPORT_NUMBER,\n    constraints: [countryCode],\n    validator: {\n      validate: (value, args) => isPassportNumber(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be valid passport number', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isPassportNumberValidator","IS_PASSPORT_NUMBER","isPassportNumber","value","countryCode","IsPassportNumber","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsPassportNumber.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isPassportNumberValidator from 'validator/lib/isPassportNumber';\nexport const IS_PASSPORT_NUMBER = 'isPassportNumber';\n/**\n * Check if the string is a valid passport number relative to a specific country code.\n * If given value is not a string, then it returns false.\n */\nexport function isPassportNumber(value, countryCode) {\n    return typeof value === 'string' && isPassportNumberValidator(value, countryCode);\n}\n/**\n * Check if the string is a valid passport number relative to a specific country code.\n * If given value is not a string, then it returns false.\n */\nexport function IsPassportNumber(countryCode, validationOptions) {\n    return ValidateBy({\n        name: IS_PASSPORT_NUMBER,\n        constraints: [countryCode],\n        validator: {\n            validate: (value, args) => isPassportNumber(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be valid passport number', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,yBAAyB,MAAM,gCAAgC;AACtE,OAAO,MAAMC,kBAAkB,GAAG,kBAAkB;AACpD;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,WAAW,EAAE;EACjD,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,yBAAyB,CAACG,KAAK,EAAEC,WAAW,CAAC;AACrF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACD,WAAW,EAAEE,iBAAiB,EAAE;EAC7D,OAAOP,UAAU,CAAC;IACdQ,IAAI,EAAEN,kBAAkB;IACxBO,WAAW,EAAE,CAACJ,WAAW,CAAC;IAC1BK,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACP,KAAK,EAAEQ,IAAI,KAAKT,gBAAgB,CAACC,KAAK,EAAEQ,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MACnHI,cAAc,EAAEd,YAAY,CAACe,UAAU,IAAIA,UAAU,GAAG,yCAAyC,EAAEP,iBAAiB;IACxH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}