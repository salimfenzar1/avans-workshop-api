{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RoutesMapper = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst interfaces_1 = require(\"@nestjs/common/interfaces\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst metadata_scanner_1 = require(\"../metadata-scanner\");\nconst paths_explorer_1 = require(\"../router/paths-explorer\");\nconst router_module_1 = require(\"../router/router-module\");\nclass RoutesMapper {\n  constructor(container, applicationConfig) {\n    this.container = container;\n    this.applicationConfig = applicationConfig;\n    this.pathsExplorer = new paths_explorer_1.PathsExplorer(new metadata_scanner_1.MetadataScanner());\n  }\n  mapRouteToRouteInfo(controllerOrRoute) {\n    if ((0, shared_utils_1.isString)(controllerOrRoute)) {\n      return this.getRouteInfoFromPath(controllerOrRoute);\n    }\n    const routePathOrPaths = this.getRoutePath(controllerOrRoute);\n    if (this.isRouteInfo(routePathOrPaths, controllerOrRoute)) {\n      return this.getRouteInfoFromObject(controllerOrRoute);\n    }\n    return this.getRouteInfoFromController(controllerOrRoute, routePathOrPaths);\n  }\n  getRouteInfoFromPath(routePath) {\n    const defaultRequestMethod = -1;\n    return [{\n      path: (0, shared_utils_1.addLeadingSlash)(routePath),\n      method: defaultRequestMethod\n    }];\n  }\n  getRouteInfoFromObject(routeInfoObject) {\n    const routeInfo = {\n      path: (0, shared_utils_1.addLeadingSlash)(routeInfoObject.path),\n      method: routeInfoObject.method\n    };\n    if (routeInfoObject.version) {\n      routeInfo.version = routeInfoObject.version;\n    }\n    return [routeInfo];\n  }\n  getRouteInfoFromController(controller, routePath) {\n    const controllerPaths = this.pathsExplorer.scanForPaths(Object.create(controller), controller.prototype);\n    const controllerVersion = this.getVersionMetadata(controller);\n    const versioningConfig = this.applicationConfig.getVersioning();\n    const moduleRef = this.getHostModuleOfController(controller);\n    const modulePath = this.getModulePath(moduleRef?.metatype);\n    const concatPaths = (acc, currentValue) => acc.concat(currentValue);\n    const toUndefinedIfNeural = version => version === interfaces_1.VERSION_NEUTRAL ? undefined : version;\n    const toRouteInfo = (item, prefix) => item.path?.flatMap(p => {\n      let endpointPath = modulePath ?? '';\n      endpointPath += this.normalizeGlobalPath(prefix) + (0, shared_utils_1.addLeadingSlash)(p);\n      const routeInfo = {\n        path: endpointPath,\n        method: item.requestMethod\n      };\n      const version = item.version ?? controllerVersion;\n      if (version && versioningConfig) {\n        if (typeof version !== 'string' && Array.isArray(version)) {\n          return version.map(v => ({\n            ...routeInfo,\n            version: toUndefinedIfNeural(v)\n          }));\n        }\n        routeInfo.version = toUndefinedIfNeural(version);\n      }\n      return routeInfo;\n    });\n    return [].concat(routePath).map(routePath => controllerPaths.map(item => toRouteInfo(item, routePath)).reduce(concatPaths, [])).reduce(concatPaths, []);\n  }\n  isRouteInfo(path, objectOrClass) {\n    return (0, shared_utils_1.isUndefined)(path);\n  }\n  normalizeGlobalPath(path) {\n    const prefix = (0, shared_utils_1.addLeadingSlash)(path);\n    return prefix === '/' ? '' : prefix;\n  }\n  getRoutePath(route) {\n    return Reflect.getMetadata(constants_1.PATH_METADATA, route);\n  }\n  getHostModuleOfController(metatype) {\n    if (!metatype) {\n      return;\n    }\n    const modulesContainer = this.container.getModules();\n    const moduleRefsSet = router_module_1.targetModulesByContainer.get(modulesContainer);\n    if (!moduleRefsSet) {\n      return;\n    }\n    const modules = Array.from(modulesContainer.values()).filter(moduleRef => moduleRefsSet.has(moduleRef));\n    return modules.find(({\n      controllers\n    }) => controllers.has(metatype));\n  }\n  getModulePath(metatype) {\n    if (!metatype) {\n      return;\n    }\n    const modulesContainer = this.container.getModules();\n    const modulePath = Reflect.getMetadata(constants_1.MODULE_PATH + modulesContainer.applicationId, metatype);\n    return modulePath ?? Reflect.getMetadata(constants_1.MODULE_PATH, metatype);\n  }\n  getVersionMetadata(metatype) {\n    const versioningConfig = this.applicationConfig.getVersioning();\n    if (versioningConfig) {\n      return Reflect.getMetadata(constants_1.VERSION_METADATA, metatype) ?? versioningConfig.defaultVersion;\n    }\n  }\n}\nexports.RoutesMapper = RoutesMapper;","map":{"version":3,"names":["Object","defineProperty","exports","value","RoutesMapper","constants_1","require","interfaces_1","shared_utils_1","metadata_scanner_1","paths_explorer_1","router_module_1","constructor","container","applicationConfig","pathsExplorer","PathsExplorer","MetadataScanner","mapRouteToRouteInfo","controllerOrRoute","isString","getRouteInfoFromPath","routePathOrPaths","getRoutePath","isRouteInfo","getRouteInfoFromObject","getRouteInfoFromController","routePath","defaultRequestMethod","path","addLeadingSlash","method","routeInfoObject","routeInfo","version","controller","controllerPaths","scanForPaths","create","prototype","controllerVersion","getVersionMetadata","versioningConfig","getVersioning","moduleRef","getHostModuleOfController","modulePath","getModulePath","metatype","concatPaths","acc","currentValue","concat","toUndefinedIfNeural","VERSION_NEUTRAL","undefined","toRouteInfo","item","prefix","flatMap","p","endpointPath","normalizeGlobalPath","requestMethod","Array","isArray","map","v","reduce","objectOrClass","isUndefined","route","Reflect","getMetadata","PATH_METADATA","modulesContainer","getModules","moduleRefsSet","targetModulesByContainer","get","modules","from","values","filter","has","find","controllers","MODULE_PATH","applicationId","VERSION_METADATA","defaultVersion"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/middleware/routes-mapper.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RoutesMapper = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst interfaces_1 = require(\"@nestjs/common/interfaces\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst metadata_scanner_1 = require(\"../metadata-scanner\");\nconst paths_explorer_1 = require(\"../router/paths-explorer\");\nconst router_module_1 = require(\"../router/router-module\");\nclass RoutesMapper {\n    constructor(container, applicationConfig) {\n        this.container = container;\n        this.applicationConfig = applicationConfig;\n        this.pathsExplorer = new paths_explorer_1.PathsExplorer(new metadata_scanner_1.MetadataScanner());\n    }\n    mapRouteToRouteInfo(controllerOrRoute) {\n        if ((0, shared_utils_1.isString)(controllerOrRoute)) {\n            return this.getRouteInfoFromPath(controllerOrRoute);\n        }\n        const routePathOrPaths = this.getRoutePath(controllerOrRoute);\n        if (this.isRouteInfo(routePathOrPaths, controllerOrRoute)) {\n            return this.getRouteInfoFromObject(controllerOrRoute);\n        }\n        return this.getRouteInfoFromController(controllerOrRoute, routePathOrPaths);\n    }\n    getRouteInfoFromPath(routePath) {\n        const defaultRequestMethod = -1;\n        return [\n            {\n                path: (0, shared_utils_1.addLeadingSlash)(routePath),\n                method: defaultRequestMethod,\n            },\n        ];\n    }\n    getRouteInfoFromObject(routeInfoObject) {\n        const routeInfo = {\n            path: (0, shared_utils_1.addLeadingSlash)(routeInfoObject.path),\n            method: routeInfoObject.method,\n        };\n        if (routeInfoObject.version) {\n            routeInfo.version = routeInfoObject.version;\n        }\n        return [routeInfo];\n    }\n    getRouteInfoFromController(controller, routePath) {\n        const controllerPaths = this.pathsExplorer.scanForPaths(Object.create(controller), controller.prototype);\n        const controllerVersion = this.getVersionMetadata(controller);\n        const versioningConfig = this.applicationConfig.getVersioning();\n        const moduleRef = this.getHostModuleOfController(controller);\n        const modulePath = this.getModulePath(moduleRef?.metatype);\n        const concatPaths = (acc, currentValue) => acc.concat(currentValue);\n        const toUndefinedIfNeural = (version) => version === interfaces_1.VERSION_NEUTRAL ? undefined : version;\n        const toRouteInfo = (item, prefix) => item.path?.flatMap(p => {\n            let endpointPath = modulePath ?? '';\n            endpointPath += this.normalizeGlobalPath(prefix) + (0, shared_utils_1.addLeadingSlash)(p);\n            const routeInfo = {\n                path: endpointPath,\n                method: item.requestMethod,\n            };\n            const version = item.version ?? controllerVersion;\n            if (version && versioningConfig) {\n                if (typeof version !== 'string' && Array.isArray(version)) {\n                    return version.map(v => ({\n                        ...routeInfo,\n                        version: toUndefinedIfNeural(v),\n                    }));\n                }\n                routeInfo.version = toUndefinedIfNeural(version);\n            }\n            return routeInfo;\n        });\n        return []\n            .concat(routePath)\n            .map(routePath => controllerPaths\n            .map(item => toRouteInfo(item, routePath))\n            .reduce(concatPaths, []))\n            .reduce(concatPaths, []);\n    }\n    isRouteInfo(path, objectOrClass) {\n        return (0, shared_utils_1.isUndefined)(path);\n    }\n    normalizeGlobalPath(path) {\n        const prefix = (0, shared_utils_1.addLeadingSlash)(path);\n        return prefix === '/' ? '' : prefix;\n    }\n    getRoutePath(route) {\n        return Reflect.getMetadata(constants_1.PATH_METADATA, route);\n    }\n    getHostModuleOfController(metatype) {\n        if (!metatype) {\n            return;\n        }\n        const modulesContainer = this.container.getModules();\n        const moduleRefsSet = router_module_1.targetModulesByContainer.get(modulesContainer);\n        if (!moduleRefsSet) {\n            return;\n        }\n        const modules = Array.from(modulesContainer.values()).filter(moduleRef => moduleRefsSet.has(moduleRef));\n        return modules.find(({ controllers }) => controllers.has(metatype));\n    }\n    getModulePath(metatype) {\n        if (!metatype) {\n            return;\n        }\n        const modulesContainer = this.container.getModules();\n        const modulePath = Reflect.getMetadata(constants_1.MODULE_PATH + modulesContainer.applicationId, metatype);\n        return modulePath ?? Reflect.getMetadata(constants_1.MODULE_PATH, metatype);\n    }\n    getVersionMetadata(metatype) {\n        const versioningConfig = this.applicationConfig.getVersioning();\n        if (versioningConfig) {\n            return (Reflect.getMetadata(constants_1.VERSION_METADATA, metatype) ??\n                versioningConfig.defaultVersion);\n        }\n    }\n}\nexports.RoutesMapper = RoutesMapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}