{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isRgbColorValidator from 'validator/lib/isRgbColor';\nexport const IS_RGB_COLOR = 'isRgbColor';\n/**\n * Check if the string is a rgb or rgba color.\n * `includePercentValues` defaults to true. If you don't want to allow to set rgb or rgba values with percents, like rgb(5%,5%,5%), or rgba(90%,90%,90%,.3), then set it to false.\n * If given value is not a string, then it returns false.\n */\nexport function isRgbColor(value, includePercentValues) {\n  return typeof value === 'string' && isRgbColorValidator(value, includePercentValues);\n}\n/**\n * Check if the string is a rgb or rgba color.\n * `includePercentValues` defaults to true. If you don't want to allow to set rgb or rgba values with percents, like rgb(5%,5%,5%), or rgba(90%,90%,90%,.3), then set it to false.\n * If given value is not a string, then it returns false.\n */\nexport function IsRgbColor(includePercentValues, validationOptions) {\n  return ValidateBy({\n    name: IS_RGB_COLOR,\n    constraints: [includePercentValues],\n    validator: {\n      validate: (value, args) => isRgbColor(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be RGB color', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isRgbColorValidator","IS_RGB_COLOR","isRgbColor","value","includePercentValues","IsRgbColor","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsRgbColor.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isRgbColorValidator from 'validator/lib/isRgbColor';\nexport const IS_RGB_COLOR = 'isRgbColor';\n/**\n * Check if the string is a rgb or rgba color.\n * `includePercentValues` defaults to true. If you don't want to allow to set rgb or rgba values with percents, like rgb(5%,5%,5%), or rgba(90%,90%,90%,.3), then set it to false.\n * If given value is not a string, then it returns false.\n */\nexport function isRgbColor(value, includePercentValues) {\n    return typeof value === 'string' && isRgbColorValidator(value, includePercentValues);\n}\n/**\n * Check if the string is a rgb or rgba color.\n * `includePercentValues` defaults to true. If you don't want to allow to set rgb or rgba values with percents, like rgb(5%,5%,5%), or rgba(90%,90%,90%,.3), then set it to false.\n * If given value is not a string, then it returns false.\n */\nexport function IsRgbColor(includePercentValues, validationOptions) {\n    return ValidateBy({\n        name: IS_RGB_COLOR,\n        constraints: [includePercentValues],\n        validator: {\n            validate: (value, args) => isRgbColor(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be RGB color', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,mBAAmB,MAAM,0BAA0B;AAC1D,OAAO,MAAMC,YAAY,GAAG,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAEC,oBAAoB,EAAE;EACpD,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,mBAAmB,CAACG,KAAK,EAAEC,oBAAoB,CAAC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACD,oBAAoB,EAAEE,iBAAiB,EAAE;EAChE,OAAOP,UAAU,CAAC;IACdQ,IAAI,EAAEN,YAAY;IAClBO,WAAW,EAAE,CAACJ,oBAAoB,CAAC;IACnCK,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACP,KAAK,EAAEQ,IAAI,KAAKT,UAAU,CAACC,KAAK,EAAEQ,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MAC7GI,cAAc,EAAEd,YAAY,CAACe,UAAU,IAAIA,UAAU,GAAG,6BAA6B,EAAEP,iBAAiB;IAC5G;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}