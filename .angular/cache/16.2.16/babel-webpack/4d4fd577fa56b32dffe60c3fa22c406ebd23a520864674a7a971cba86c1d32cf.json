{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossible.js';\nimport isValidNumber from './isValid.js'; // import checkNumberLength from './helpers/checkNumberLength.js'\n\nimport getNumberType from './helpers/getNumberType.js';\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js';\nimport formatNumber from './format.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nvar PhoneNumber = /*#__PURE__*/function () {\n  /**\r\n   * @param  {string} countryOrCountryCallingCode\r\n   * @param  {string} nationalNumber\r\n   * @param  {object} metadata â€” Metadata JSON\r\n   * @return {PhoneNumber}\r\n   */\n  function PhoneNumber(countryOrCountryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n    if (!countryOrCountryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n    var _getCountryAndCountry = getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadata),\n      country = _getCountryAndCountry.country,\n      countryCallingCode = _getCountryAndCountry.countryCallingCode;\n    this.country = country;\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber; // Exclude `metadata` property output from `PhoneNumber.toString()`\n    // so that it doesn't clutter the console output of Node.js.\n    // Previously, when Node.js did `console.log(new PhoneNumber(...))`,\n    // it would output the whole internal structure of the `metadata` object.\n\n    this.getMetadata = function () {\n      return metadata;\n    };\n  }\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"getPossibleCountries\",\n    value: function getPossibleCountries() {\n      if (this.country) {\n        return [this.country];\n      }\n      return getPossibleCountriesForNumber(this.countryCallingCode, this.nationalNumber, this.getMetadata());\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.getMetadata());\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\n    // but later it was found out that it doesn't include the possible `TOO_SHORT` result\n    // returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\n    // so eventually I simply commented out this method from the `PhoneNumber` class\n    // and just left the `validatePhoneNumberLength()` function, even though that one would require\n    // and additional step to also validate the actual country / calling code of the phone number.\n    // validateLength() {\n    // \tconst metadata = new Metadata(this.getMetadata())\n    // \tmetadata.selectNumberingPlan(this.countryCallingCode)\n    // \tconst result = checkNumberLength(this.nationalNumber, metadata)\n    // \tif (result !== 'IS_POSSIBLE') {\n    // \t\treturn result\n    // \t}\n    // }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n  return PhoneNumber;\n}();\nexport { PhoneNumber as default };\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\n  var country;\n  var countryCallingCode;\n  var metadata = new Metadata(metadataJson); // If country code is passed then derive `countryCallingCode` from it.\n  // Also store the country code as `.country`.\n\n  if (isCountryCode(countryOrCountryCallingCode)) {\n    country = countryOrCountryCallingCode;\n    metadata.selectNumberingPlan(country);\n    countryCallingCode = metadata.countryCallingCode();\n  } else {\n    countryCallingCode = countryOrCountryCallingCode;\n    /* istanbul ignore if */\n\n    if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n      if (metadata.isNonGeographicCallingCode(countryCallingCode)) {\n        country = '001';\n      }\n    }\n  }\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode\n  };\n}","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","prototype","Metadata","isPossibleNumber","isValidNumber","getNumberType","getPossibleCountriesForNumber","formatNumber","USE_NON_GEOGRAPHIC_COUNTRY_CODE","PhoneNumber","countryOrCountryCallingCode","nationalNumber","metadata","_getCountryAndCountry","getCountryAndCountryCallingCode","country","countryCallingCode","number","getMetadata","setExt","ext","getPossibleCountries","isPossible","v2","isValid","isNonGeographic","isNonGeographicCallingCode","isEqual","phoneNumber","getType","format","_format","options","formatNational","formatInternational","getURI","default","isCountryCode","test","metadataJson","selectNumberingPlan"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/libphonenumber-js/es6/PhoneNumber.js"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossible.js';\nimport isValidNumber from './isValid.js'; // import checkNumberLength from './helpers/checkNumberLength.js'\n\nimport getNumberType from './helpers/getNumberType.js';\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js';\nimport formatNumber from './format.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  /**\r\n   * @param  {string} countryOrCountryCallingCode\r\n   * @param  {string} nationalNumber\r\n   * @param  {object} metadata â€” Metadata JSON\r\n   * @return {PhoneNumber}\r\n   */\n  function PhoneNumber(countryOrCountryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryOrCountryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _getCountryAndCountry = getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadata),\n        country = _getCountryAndCountry.country,\n        countryCallingCode = _getCountryAndCountry.countryCallingCode;\n\n    this.country = country;\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber; // Exclude `metadata` property output from `PhoneNumber.toString()`\n    // so that it doesn't clutter the console output of Node.js.\n    // Previously, when Node.js did `console.log(new PhoneNumber(...))`,\n    // it would output the whole internal structure of the `metadata` object.\n\n    this.getMetadata = function () {\n      return metadata;\n    };\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"getPossibleCountries\",\n    value: function getPossibleCountries() {\n      if (this.country) {\n        return [this.country];\n      }\n\n      return getPossibleCountriesForNumber(this.countryCallingCode, this.nationalNumber, this.getMetadata());\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.getMetadata());\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\n    // but later it was found out that it doesn't include the possible `TOO_SHORT` result\n    // returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\n    // so eventually I simply commented out this method from the `PhoneNumber` class\n    // and just left the `validatePhoneNumberLength()` function, even though that one would require\n    // and additional step to also validate the actual country / calling code of the phone number.\n    // validateLength() {\n    // \tconst metadata = new Metadata(this.getMetadata())\n    // \tmetadata.selectNumberingPlan(this.countryCallingCode)\n    // \tconst result = checkNumberLength(this.nationalNumber, metadata)\n    // \tif (result !== 'IS_POSSIBLE') {\n    // \t\treturn result\n    // \t}\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\n  var country;\n  var countryCallingCode;\n  var metadata = new Metadata(metadataJson); // If country code is passed then derive `countryCallingCode` from it.\n  // Also store the country code as `.country`.\n\n  if (isCountryCode(countryOrCountryCallingCode)) {\n    country = countryOrCountryCallingCode;\n    metadata.selectNumberingPlan(country);\n    countryCallingCode = metadata.countryCallingCode();\n  } else {\n    countryCallingCode = countryOrCountryCallingCode;\n    /* istanbul ignore if */\n\n    if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n      if (metadata.isNonGeographicCallingCode(countryCallingCode)) {\n        country = '001';\n      }\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}