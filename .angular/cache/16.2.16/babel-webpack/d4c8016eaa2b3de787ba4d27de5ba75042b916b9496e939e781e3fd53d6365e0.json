{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_NUMBER = 'isNumber';\n/**\n * Checks if a given value is a number.\n */\nexport function isNumber(value, options = {}) {\n  if (typeof value !== 'number') {\n    return false;\n  }\n  if (value === Infinity || value === -Infinity) {\n    return !!options.allowInfinity;\n  }\n  if (Number.isNaN(value)) {\n    return !!options.allowNaN;\n  }\n  if (options.maxDecimalPlaces !== undefined) {\n    let decimalPlaces = 0;\n    if (value % 1 !== 0) {\n      decimalPlaces = value.toString().split('.')[1].length;\n    }\n    if (decimalPlaces > options.maxDecimalPlaces) {\n      return false;\n    }\n  }\n  return Number.isFinite(value);\n}\n/**\n * Checks if a value is a number.\n */\nexport function IsNumber(options = {}, validationOptions) {\n  return ValidateBy({\n    name: IS_NUMBER,\n    constraints: [options],\n    validator: {\n      validate: (value, args) => isNumber(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a number conforming to the specified constraints', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","IS_NUMBER","isNumber","value","options","Infinity","allowInfinity","Number","isNaN","allowNaN","maxDecimalPlaces","undefined","decimalPlaces","toString","split","length","isFinite","IsNumber","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/typechecker/IsNumber.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_NUMBER = 'isNumber';\n/**\n * Checks if a given value is a number.\n */\nexport function isNumber(value, options = {}) {\n    if (typeof value !== 'number') {\n        return false;\n    }\n    if (value === Infinity || value === -Infinity) {\n        return !!options.allowInfinity;\n    }\n    if (Number.isNaN(value)) {\n        return !!options.allowNaN;\n    }\n    if (options.maxDecimalPlaces !== undefined) {\n        let decimalPlaces = 0;\n        if (value % 1 !== 0) {\n            decimalPlaces = value.toString().split('.')[1].length;\n        }\n        if (decimalPlaces > options.maxDecimalPlaces) {\n            return false;\n        }\n    }\n    return Number.isFinite(value);\n}\n/**\n * Checks if a value is a number.\n */\nexport function IsNumber(options = {}, validationOptions) {\n    return ValidateBy({\n        name: IS_NUMBER,\n        constraints: [options],\n        validator: {\n            validate: (value, args) => isNumber(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a number conforming to the specified constraints', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAO,MAAMC,SAAS,GAAG,UAAU;AACnC;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1C,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAO,KAAK;EAChB;EACA,IAAIA,KAAK,KAAKE,QAAQ,IAAIF,KAAK,KAAK,CAACE,QAAQ,EAAE;IAC3C,OAAO,CAAC,CAACD,OAAO,CAACE,aAAa;EAClC;EACA,IAAIC,MAAM,CAACC,KAAK,CAACL,KAAK,CAAC,EAAE;IACrB,OAAO,CAAC,CAACC,OAAO,CAACK,QAAQ;EAC7B;EACA,IAAIL,OAAO,CAACM,gBAAgB,KAAKC,SAAS,EAAE;IACxC,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIT,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;MACjBS,aAAa,GAAGT,KAAK,CAACU,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,MAAM;IACzD;IACA,IAAIH,aAAa,GAAGR,OAAO,CAACM,gBAAgB,EAAE;MAC1C,OAAO,KAAK;IAChB;EACJ;EACA,OAAOH,MAAM,CAACS,QAAQ,CAACb,KAAK,CAAC;AACjC;AACA;AACA;AACA;AACA,OAAO,SAASc,QAAQA,CAACb,OAAO,GAAG,CAAC,CAAC,EAAEc,iBAAiB,EAAE;EACtD,OAAOlB,UAAU,CAAC;IACdmB,IAAI,EAAElB,SAAS;IACfmB,WAAW,EAAE,CAAChB,OAAO,CAAC;IACtBiB,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACnB,KAAK,EAAEoB,IAAI,KAAKrB,QAAQ,CAACC,KAAK,EAAEoB,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MAC3GI,cAAc,EAAEzB,YAAY,CAAC0B,UAAU,IAAIA,UAAU,GAAG,oEAAoE,EAAEP,iBAAiB;IACnJ;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}