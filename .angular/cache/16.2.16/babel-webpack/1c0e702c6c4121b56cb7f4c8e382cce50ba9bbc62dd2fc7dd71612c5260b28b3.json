{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_TIMEZONE = 'isTimeZone';\n/**\n * Checks if the string represents a valid IANA timezone\n * If the given value is not a valid IANA timezone, then it returns false.\n */\nexport function isTimeZone(value) {\n  try {\n    if (typeof value !== 'string') {\n      return false;\n    }\n    /** Specifying an invalid time-zone will raise a `RangeError: Invalid time zone specified` error. */\n    Intl.DateTimeFormat(undefined, {\n      timeZone: value\n    });\n    return true;\n  } catch (exception) {\n    return false;\n  }\n}\n/**\n * Checks if the string represents a valid IANA timezone\n * If the given value is not a valid IANA timezone, then it returns false.\n */\nexport function IsTimeZone(validationOptions) {\n  return ValidateBy({\n    name: IS_TIMEZONE,\n    validator: {\n      validate: (value, args) => isTimeZone(value),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a valid IANA time-zone', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","IS_TIMEZONE","isTimeZone","value","Intl","DateTimeFormat","undefined","timeZone","exception","IsTimeZone","validationOptions","name","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsTimeZone.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_TIMEZONE = 'isTimeZone';\n/**\n * Checks if the string represents a valid IANA timezone\n * If the given value is not a valid IANA timezone, then it returns false.\n */\nexport function isTimeZone(value) {\n    try {\n        if (typeof value !== 'string') {\n            return false;\n        }\n        /** Specifying an invalid time-zone will raise a `RangeError: Invalid time zone specified` error. */\n        Intl.DateTimeFormat(undefined, { timeZone: value });\n        return true;\n    }\n    catch (exception) {\n        return false;\n    }\n}\n/**\n * Checks if the string represents a valid IANA timezone\n * If the given value is not a valid IANA timezone, then it returns false.\n */\nexport function IsTimeZone(validationOptions) {\n    return ValidateBy({\n        name: IS_TIMEZONE,\n        validator: {\n            validate: (value, args) => isTimeZone(value),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a valid IANA time-zone', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAO,MAAMC,WAAW,GAAG,YAAY;AACvC;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAE;EAC9B,IAAI;IACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,OAAO,KAAK;IAChB;IACA;IACAC,IAAI,CAACC,cAAc,CAACC,SAAS,EAAE;MAAEC,QAAQ,EAAEJ;IAAM,CAAC,CAAC;IACnD,OAAO,IAAI;EACf,CAAC,CACD,OAAOK,SAAS,EAAE;IACd,OAAO,KAAK;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,iBAAiB,EAAE;EAC1C,OAAOV,UAAU,CAAC;IACdW,IAAI,EAAEV,WAAW;IACjBW,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACV,KAAK,EAAEW,IAAI,KAAKZ,UAAU,CAACC,KAAK,CAAC;MAC5CY,cAAc,EAAEhB,YAAY,CAACiB,UAAU,IAAIA,UAAU,GAAG,0CAA0C,EAAEN,iBAAiB;IACzH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}