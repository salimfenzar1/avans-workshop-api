{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DependenciesScanner = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst interfaces_1 = require(\"@nestjs/common/interfaces\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst application_config_1 = require(\"./application-config\");\nconst constants_2 = require(\"./constants\");\nconst circular_dependency_exception_1 = require(\"./errors/exceptions/circular-dependency.exception\");\nconst invalid_class_module_exception_1 = require(\"./errors/exceptions/invalid-class-module.exception\");\nconst invalid_module_exception_1 = require(\"./errors/exceptions/invalid-module.exception\");\nconst undefined_module_exception_1 = require(\"./errors/exceptions/undefined-module.exception\");\nconst get_class_scope_1 = require(\"./helpers/get-class-scope\");\nconst internal_core_module_factory_1 = require(\"./injector/internal-core-module/internal-core-module-factory\");\nconst uuid_factory_1 = require(\"./inspector/uuid-factory\");\nclass DependenciesScanner {\n  constructor(container, metadataScanner, graphInspector, applicationConfig = new application_config_1.ApplicationConfig()) {\n    this.container = container;\n    this.metadataScanner = metadataScanner;\n    this.graphInspector = graphInspector;\n    this.applicationConfig = applicationConfig;\n    this.applicationProvidersApplyMap = [];\n  }\n  scan(module, options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.registerCoreModule(options?.overrides);\n      yield _this.scanForModules({\n        moduleDefinition: module,\n        overrides: options?.overrides\n      });\n      yield _this.scanModulesForDependencies();\n      _this.calculateModulesDistance();\n      _this.addScopedEnhancersMetadata();\n      _this.container.bindGlobalScope();\n    })();\n  }\n  scanForModules({\n    moduleDefinition,\n    lazy,\n    scope = [],\n    ctxRegistry = [],\n    overrides = []\n  }) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        moduleRef: moduleInstance,\n        inserted: moduleInserted\n      } = (yield _this2.insertOrOverrideModule(moduleDefinition, overrides, scope)) ?? {};\n      moduleDefinition = _this2.getOverrideModuleByModule(moduleDefinition, overrides)?.newModule ?? moduleDefinition;\n      moduleDefinition = moduleDefinition instanceof Promise ? yield moduleDefinition : moduleDefinition;\n      ctxRegistry.push(moduleDefinition);\n      if (_this2.isForwardReference(moduleDefinition)) {\n        moduleDefinition = moduleDefinition.forwardRef();\n      }\n      const modules = !_this2.isDynamicModule(moduleDefinition) ? _this2.reflectMetadata(constants_1.MODULE_METADATA.IMPORTS, moduleDefinition) : [..._this2.reflectMetadata(constants_1.MODULE_METADATA.IMPORTS, moduleDefinition.module), ...(moduleDefinition.imports || [])];\n      let registeredModuleRefs = [];\n      for (const [index, innerModule] of modules.entries()) {\n        // In case of a circular dependency (ES module system), JavaScript will resolve the type to `undefined`.\n        if (innerModule === undefined) {\n          throw new undefined_module_exception_1.UndefinedModuleException(moduleDefinition, index, scope);\n        }\n        if (!innerModule) {\n          throw new invalid_module_exception_1.InvalidModuleException(moduleDefinition, index, scope);\n        }\n        if (ctxRegistry.includes(innerModule)) {\n          continue;\n        }\n        const moduleRefs = yield _this2.scanForModules({\n          moduleDefinition: innerModule,\n          scope: [].concat(scope, moduleDefinition),\n          ctxRegistry,\n          overrides,\n          lazy\n        });\n        registeredModuleRefs = registeredModuleRefs.concat(moduleRefs);\n      }\n      if (!moduleInstance) {\n        return registeredModuleRefs;\n      }\n      if (lazy && moduleInserted) {\n        _this2.container.bindGlobalsToImports(moduleInstance);\n      }\n      return [moduleInstance].concat(registeredModuleRefs);\n    })();\n  }\n  insertModule(moduleDefinition, scope) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const moduleToAdd = _this3.isForwardReference(moduleDefinition) ? moduleDefinition.forwardRef() : moduleDefinition;\n      if (_this3.isInjectable(moduleToAdd) || _this3.isController(moduleToAdd) || _this3.isExceptionFilter(moduleToAdd)) {\n        throw new invalid_class_module_exception_1.InvalidClassModuleException(moduleDefinition, scope);\n      }\n      return _this3.container.addModule(moduleToAdd, scope);\n    })();\n  }\n  scanModulesForDependencies(modules = this.container.getModules()) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      for (const [token, {\n        metatype\n      }] of modules) {\n        yield _this4.reflectImports(metatype, token, metatype.name);\n        _this4.reflectProviders(metatype, token);\n        _this4.reflectControllers(metatype, token);\n        _this4.reflectExports(metatype, token);\n      }\n    })();\n  }\n  reflectImports(module, token, context) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const modules = [..._this5.reflectMetadata(constants_1.MODULE_METADATA.IMPORTS, module), ..._this5.container.getDynamicMetadataByToken(token, constants_1.MODULE_METADATA.IMPORTS)];\n      for (const related of modules) {\n        yield _this5.insertImport(related, token, context);\n      }\n    })();\n  }\n  reflectProviders(module, token) {\n    const providers = [...this.reflectMetadata(constants_1.MODULE_METADATA.PROVIDERS, module), ...this.container.getDynamicMetadataByToken(token, constants_1.MODULE_METADATA.PROVIDERS)];\n    providers.forEach(provider => {\n      this.insertProvider(provider, token);\n      this.reflectDynamicMetadata(provider, token);\n    });\n  }\n  reflectControllers(module, token) {\n    const controllers = [...this.reflectMetadata(constants_1.MODULE_METADATA.CONTROLLERS, module), ...this.container.getDynamicMetadataByToken(token, constants_1.MODULE_METADATA.CONTROLLERS)];\n    controllers.forEach(item => {\n      this.insertController(item, token);\n      this.reflectDynamicMetadata(item, token);\n    });\n  }\n  reflectDynamicMetadata(cls, token) {\n    if (!cls || !cls.prototype) {\n      return;\n    }\n    this.reflectInjectables(cls, token, constants_1.GUARDS_METADATA);\n    this.reflectInjectables(cls, token, constants_1.INTERCEPTORS_METADATA);\n    this.reflectInjectables(cls, token, constants_1.EXCEPTION_FILTERS_METADATA);\n    this.reflectInjectables(cls, token, constants_1.PIPES_METADATA);\n    this.reflectParamInjectables(cls, token, constants_1.ROUTE_ARGS_METADATA);\n  }\n  reflectExports(module, token) {\n    const exports = [...this.reflectMetadata(constants_1.MODULE_METADATA.EXPORTS, module), ...this.container.getDynamicMetadataByToken(token, constants_1.MODULE_METADATA.EXPORTS)];\n    exports.forEach(exportedProvider => this.insertExportedProvider(exportedProvider, token));\n  }\n  reflectInjectables(component, token, metadataKey) {\n    const controllerInjectables = this.reflectMetadata(metadataKey, component);\n    const methodInjectables = this.metadataScanner.getAllMethodNames(component.prototype).reduce((acc, method) => {\n      const methodInjectable = this.reflectKeyMetadata(component, metadataKey, method);\n      if (methodInjectable) {\n        acc.push(methodInjectable);\n      }\n      return acc;\n    }, []);\n    controllerInjectables.forEach(injectable => this.insertInjectable(injectable, token, component, constants_1.ENHANCER_KEY_TO_SUBTYPE_MAP[metadataKey]));\n    methodInjectables.forEach(methodInjectable => {\n      methodInjectable.metadata.forEach(injectable => this.insertInjectable(injectable, token, component, constants_1.ENHANCER_KEY_TO_SUBTYPE_MAP[metadataKey], methodInjectable.methodKey));\n    });\n  }\n  reflectParamInjectables(component, token, metadataKey) {\n    const paramsMethods = this.metadataScanner.getAllMethodNames(component.prototype);\n    paramsMethods.forEach(methodKey => {\n      const metadata = Reflect.getMetadata(metadataKey, component, methodKey);\n      if (!metadata) {\n        return;\n      }\n      const params = Object.values(metadata);\n      params.map(item => item.pipes).flat(1).forEach(injectable => this.insertInjectable(injectable, token, component, 'pipe', methodKey));\n    });\n  }\n  reflectKeyMetadata(component, key, methodKey) {\n    let prototype = component.prototype;\n    do {\n      const descriptor = Reflect.getOwnPropertyDescriptor(prototype, methodKey);\n      if (!descriptor) {\n        continue;\n      }\n      const metadata = Reflect.getMetadata(key, descriptor.value);\n      if (!metadata) {\n        return;\n      }\n      return {\n        methodKey,\n        metadata\n      };\n    } while ((prototype = Reflect.getPrototypeOf(prototype)) && prototype !== Object.prototype && prototype);\n    return undefined;\n  }\n  calculateModulesDistance() {\n    const modulesGenerator = this.container.getModules().values();\n    // Skip \"InternalCoreModule\" from calculating distance\n    modulesGenerator.next();\n    const modulesStack = [];\n    const calculateDistance = (moduleRef, distance = 1) => {\n      if (!moduleRef || modulesStack.includes(moduleRef)) {\n        return;\n      }\n      modulesStack.push(moduleRef);\n      const moduleImports = moduleRef.imports;\n      moduleImports.forEach(importedModuleRef => {\n        if (importedModuleRef) {\n          if (distance > importedModuleRef.distance) {\n            importedModuleRef.distance = distance;\n          }\n          calculateDistance(importedModuleRef, distance + 1);\n        }\n      });\n    };\n    const rootModule = modulesGenerator.next().value;\n    calculateDistance(rootModule);\n  }\n  insertImport(related, token, context) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if ((0, shared_utils_1.isUndefined)(related)) {\n        throw new circular_dependency_exception_1.CircularDependencyException(context);\n      }\n      if (_this6.isForwardReference(related)) {\n        return _this6.container.addImport(related.forwardRef(), token);\n      }\n      yield _this6.container.addImport(related, token);\n    })();\n  }\n  isCustomProvider(provider) {\n    return provider && !(0, shared_utils_1.isNil)(provider.provide);\n  }\n  insertProvider(provider, token) {\n    const isCustomProvider = this.isCustomProvider(provider);\n    if (!isCustomProvider) {\n      return this.container.addProvider(provider, token);\n    }\n    const applyProvidersMap = this.getApplyProvidersMap();\n    const providersKeys = Object.keys(applyProvidersMap);\n    const type = provider.provide;\n    if (!providersKeys.includes(type)) {\n      return this.container.addProvider(provider, token);\n    }\n    const uuid = uuid_factory_1.UuidFactory.get(type.toString());\n    const providerToken = `${type} (UUID: ${uuid})`;\n    let scope = provider.scope;\n    if ((0, shared_utils_1.isNil)(scope) && provider.useClass) {\n      scope = (0, get_class_scope_1.getClassScope)(provider.useClass);\n    }\n    this.applicationProvidersApplyMap.push({\n      type,\n      moduleKey: token,\n      providerKey: providerToken,\n      scope\n    });\n    const newProvider = {\n      ...provider,\n      provide: providerToken,\n      scope\n    };\n    const enhancerSubtype = constants_2.ENHANCER_TOKEN_TO_SUBTYPE_MAP[type];\n    const factoryOrClassProvider = newProvider;\n    if (this.isRequestOrTransient(factoryOrClassProvider.scope)) {\n      return this.container.addInjectable(newProvider, token, enhancerSubtype);\n    }\n    this.container.addProvider(newProvider, token, enhancerSubtype);\n  }\n  insertInjectable(injectable, token, host, subtype, methodKey) {\n    if ((0, shared_utils_1.isFunction)(injectable)) {\n      const instanceWrapper = this.container.addInjectable(injectable, token, subtype, host);\n      this.graphInspector.insertEnhancerMetadataCache({\n        moduleToken: token,\n        classRef: host,\n        enhancerInstanceWrapper: instanceWrapper,\n        targetNodeId: instanceWrapper.id,\n        subtype,\n        methodKey\n      });\n      return instanceWrapper;\n    } else {\n      this.graphInspector.insertEnhancerMetadataCache({\n        moduleToken: token,\n        classRef: host,\n        enhancerRef: injectable,\n        methodKey,\n        subtype\n      });\n    }\n  }\n  insertExportedProvider(\n  // TODO: improve the type definition below because it doesn't reflects the real usage of this method\n  exportedProvider, token) {\n    const fulfilledProvider = this.isForwardReference(exportedProvider) ? exportedProvider.forwardRef() : exportedProvider;\n    this.container.addExportedProvider(fulfilledProvider, token);\n  }\n  insertController(controller, token) {\n    this.container.addController(controller, token);\n  }\n  insertOrOverrideModule(moduleDefinition, overrides, scope) {\n    const overrideModule = this.getOverrideModuleByModule(moduleDefinition, overrides);\n    if (overrideModule !== undefined) {\n      return this.overrideModule(moduleDefinition, overrideModule.newModule, scope);\n    }\n    return this.insertModule(moduleDefinition, scope);\n  }\n  getOverrideModuleByModule(module, overrides) {\n    if (this.isForwardReference(module)) {\n      return overrides.find(moduleToOverride => {\n        return moduleToOverride.moduleToReplace === module.forwardRef() || moduleToOverride.moduleToReplace.forwardRef?.() === module.forwardRef();\n      });\n    }\n    return overrides.find(moduleToOverride => moduleToOverride.moduleToReplace === module);\n  }\n  overrideModule(moduleToOverride, newModule, scope) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return _this7.container.replaceModule(_this7.isForwardReference(moduleToOverride) ? moduleToOverride.forwardRef() : moduleToOverride, _this7.isForwardReference(newModule) ? newModule.forwardRef() : newModule, scope);\n    })();\n  }\n  reflectMetadata(metadataKey, metatype) {\n    return Reflect.getMetadata(metadataKey, metatype) || [];\n  }\n  registerCoreModule(overrides) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const moduleDefinition = internal_core_module_factory_1.InternalCoreModuleFactory.create(_this8.container, _this8, _this8.container.getModuleCompiler(), _this8.container.getHttpAdapterHostRef(), _this8.graphInspector, overrides);\n      const [instance] = yield _this8.scanForModules({\n        moduleDefinition,\n        overrides\n      });\n      _this8.container.registerCoreModuleRef(instance);\n    })();\n  }\n  /**\n   * Add either request or transient globally scoped enhancers\n   * to all controllers metadata storage\n   */\n  addScopedEnhancersMetadata() {\n    (0, iterare_1.iterate)(this.applicationProvidersApplyMap).filter(wrapper => this.isRequestOrTransient(wrapper.scope)).forEach(({\n      moduleKey,\n      providerKey\n    }) => {\n      const modulesContainer = this.container.getModules();\n      const {\n        injectables\n      } = modulesContainer.get(moduleKey);\n      const instanceWrapper = injectables.get(providerKey);\n      const iterableIterator = modulesContainer.values();\n      (0, iterare_1.iterate)(iterableIterator).map(moduleRef => Array.from(moduleRef.controllers.values()).concat(moduleRef.entryProviders)).flatten().forEach(controllerOrEntryProvider => controllerOrEntryProvider.addEnhancerMetadata(instanceWrapper));\n    });\n  }\n  applyApplicationProviders() {\n    const applyProvidersMap = this.getApplyProvidersMap();\n    const applyRequestProvidersMap = this.getApplyRequestProvidersMap();\n    const getInstanceWrapper = (moduleKey, providerKey, collectionKey) => {\n      const modules = this.container.getModules();\n      const collection = modules.get(moduleKey)[collectionKey];\n      return collection.get(providerKey);\n    };\n    // Add global enhancers to the application config\n    this.applicationProvidersApplyMap.forEach(({\n      moduleKey,\n      providerKey,\n      type,\n      scope\n    }) => {\n      let instanceWrapper;\n      if (this.isRequestOrTransient(scope)) {\n        instanceWrapper = getInstanceWrapper(moduleKey, providerKey, 'injectables');\n        this.graphInspector.insertAttachedEnhancer(instanceWrapper);\n        return applyRequestProvidersMap[type](instanceWrapper);\n      }\n      instanceWrapper = getInstanceWrapper(moduleKey, providerKey, 'providers');\n      this.graphInspector.insertAttachedEnhancer(instanceWrapper);\n      applyProvidersMap[type](instanceWrapper.instance);\n    });\n  }\n  getApplyProvidersMap() {\n    return {\n      [constants_2.APP_INTERCEPTOR]: interceptor => this.applicationConfig.addGlobalInterceptor(interceptor),\n      [constants_2.APP_PIPE]: pipe => this.applicationConfig.addGlobalPipe(pipe),\n      [constants_2.APP_GUARD]: guard => this.applicationConfig.addGlobalGuard(guard),\n      [constants_2.APP_FILTER]: filter => this.applicationConfig.addGlobalFilter(filter)\n    };\n  }\n  getApplyRequestProvidersMap() {\n    return {\n      [constants_2.APP_INTERCEPTOR]: interceptor => this.applicationConfig.addGlobalRequestInterceptor(interceptor),\n      [constants_2.APP_PIPE]: pipe => this.applicationConfig.addGlobalRequestPipe(pipe),\n      [constants_2.APP_GUARD]: guard => this.applicationConfig.addGlobalRequestGuard(guard),\n      [constants_2.APP_FILTER]: filter => this.applicationConfig.addGlobalRequestFilter(filter)\n    };\n  }\n  isDynamicModule(module) {\n    return module && !!module.module;\n  }\n  /**\n   * @param metatype\n   * @returns `true` if `metatype` is annotated with the `@Injectable()` decorator.\n   */\n  isInjectable(metatype) {\n    return !!Reflect.getMetadata(constants_1.INJECTABLE_WATERMARK, metatype);\n  }\n  /**\n   * @param metatype\n   * @returns `true` if `metatype` is annotated with the `@Controller()` decorator.\n   */\n  isController(metatype) {\n    return !!Reflect.getMetadata(constants_1.CONTROLLER_WATERMARK, metatype);\n  }\n  /**\n   * @param metatype\n   * @returns `true` if `metatype` is annotated with the `@Catch()` decorator.\n   */\n  isExceptionFilter(metatype) {\n    return !!Reflect.getMetadata(constants_1.CATCH_WATERMARK, metatype);\n  }\n  isForwardReference(module) {\n    return module && !!module.forwardRef;\n  }\n  isRequestOrTransient(scope) {\n    return scope === interfaces_1.Scope.REQUEST || scope === interfaces_1.Scope.TRANSIENT;\n  }\n}\nexports.DependenciesScanner = DependenciesScanner;","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","DependenciesScanner","constants_1","interfaces_1","shared_utils_1","iterare_1","application_config_1","constants_2","circular_dependency_exception_1","invalid_class_module_exception_1","invalid_module_exception_1","undefined_module_exception_1","get_class_scope_1","internal_core_module_factory_1","uuid_factory_1","constructor","container","metadataScanner","graphInspector","applicationConfig","ApplicationConfig","applicationProvidersApplyMap","scan","module","options","_this","registerCoreModule","overrides","scanForModules","moduleDefinition","scanModulesForDependencies","calculateModulesDistance","addScopedEnhancersMetadata","bindGlobalScope","lazy","scope","ctxRegistry","_this2","moduleRef","moduleInstance","inserted","moduleInserted","insertOrOverrideModule","getOverrideModuleByModule","newModule","Promise","push","isForwardReference","forwardRef","modules","isDynamicModule","reflectMetadata","MODULE_METADATA","IMPORTS","imports","registeredModuleRefs","index","innerModule","entries","undefined","UndefinedModuleException","InvalidModuleException","includes","moduleRefs","concat","bindGlobalsToImports","insertModule","_this3","moduleToAdd","isInjectable","isController","isExceptionFilter","InvalidClassModuleException","addModule","getModules","_this4","token","metatype","reflectImports","name","reflectProviders","reflectControllers","reflectExports","context","_this5","getDynamicMetadataByToken","related","insertImport","providers","PROVIDERS","forEach","provider","insertProvider","reflectDynamicMetadata","controllers","CONTROLLERS","item","insertController","cls","prototype","reflectInjectables","GUARDS_METADATA","INTERCEPTORS_METADATA","EXCEPTION_FILTERS_METADATA","PIPES_METADATA","reflectParamInjectables","ROUTE_ARGS_METADATA","EXPORTS","exportedProvider","insertExportedProvider","component","metadataKey","controllerInjectables","methodInjectables","getAllMethodNames","reduce","acc","method","methodInjectable","reflectKeyMetadata","injectable","insertInjectable","ENHANCER_KEY_TO_SUBTYPE_MAP","metadata","methodKey","paramsMethods","Reflect","getMetadata","params","values","map","pipes","flat","key","descriptor","getOwnPropertyDescriptor","getPrototypeOf","modulesGenerator","next","modulesStack","calculateDistance","distance","moduleImports","importedModuleRef","rootModule","_this6","isUndefined","CircularDependencyException","addImport","isCustomProvider","isNil","provide","addProvider","applyProvidersMap","getApplyProvidersMap","providersKeys","keys","type","uuid","UuidFactory","get","toString","providerToken","useClass","getClassScope","moduleKey","providerKey","newProvider","enhancerSubtype","ENHANCER_TOKEN_TO_SUBTYPE_MAP","factoryOrClassProvider","isRequestOrTransient","addInjectable","host","subtype","isFunction","instanceWrapper","insertEnhancerMetadataCache","moduleToken","classRef","enhancerInstanceWrapper","targetNodeId","id","enhancerRef","fulfilledProvider","addExportedProvider","controller","addController","overrideModule","find","moduleToOverride","moduleToReplace","_this7","replaceModule","_this8","InternalCoreModuleFactory","create","getModuleCompiler","getHttpAdapterHostRef","instance","registerCoreModuleRef","iterate","filter","wrapper","modulesContainer","injectables","iterableIterator","Array","from","entryProviders","flatten","controllerOrEntryProvider","addEnhancerMetadata","applyApplicationProviders","applyRequestProvidersMap","getApplyRequestProvidersMap","getInstanceWrapper","collectionKey","collection","insertAttachedEnhancer","APP_INTERCEPTOR","interceptor","addGlobalInterceptor","APP_PIPE","pipe","addGlobalPipe","APP_GUARD","guard","addGlobalGuard","APP_FILTER","addGlobalFilter","addGlobalRequestInterceptor","addGlobalRequestPipe","addGlobalRequestGuard","addGlobalRequestFilter","INJECTABLE_WATERMARK","CONTROLLER_WATERMARK","CATCH_WATERMARK","Scope","REQUEST","TRANSIENT"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/scanner.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DependenciesScanner = void 0;\nconst constants_1 = require(\"@nestjs/common/constants\");\nconst interfaces_1 = require(\"@nestjs/common/interfaces\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst iterare_1 = require(\"iterare\");\nconst application_config_1 = require(\"./application-config\");\nconst constants_2 = require(\"./constants\");\nconst circular_dependency_exception_1 = require(\"./errors/exceptions/circular-dependency.exception\");\nconst invalid_class_module_exception_1 = require(\"./errors/exceptions/invalid-class-module.exception\");\nconst invalid_module_exception_1 = require(\"./errors/exceptions/invalid-module.exception\");\nconst undefined_module_exception_1 = require(\"./errors/exceptions/undefined-module.exception\");\nconst get_class_scope_1 = require(\"./helpers/get-class-scope\");\nconst internal_core_module_factory_1 = require(\"./injector/internal-core-module/internal-core-module-factory\");\nconst uuid_factory_1 = require(\"./inspector/uuid-factory\");\nclass DependenciesScanner {\n    constructor(container, metadataScanner, graphInspector, applicationConfig = new application_config_1.ApplicationConfig()) {\n        this.container = container;\n        this.metadataScanner = metadataScanner;\n        this.graphInspector = graphInspector;\n        this.applicationConfig = applicationConfig;\n        this.applicationProvidersApplyMap = [];\n    }\n    async scan(module, options) {\n        await this.registerCoreModule(options?.overrides);\n        await this.scanForModules({\n            moduleDefinition: module,\n            overrides: options?.overrides,\n        });\n        await this.scanModulesForDependencies();\n        this.calculateModulesDistance();\n        this.addScopedEnhancersMetadata();\n        this.container.bindGlobalScope();\n    }\n    async scanForModules({ moduleDefinition, lazy, scope = [], ctxRegistry = [], overrides = [], }) {\n        const { moduleRef: moduleInstance, inserted: moduleInserted } = (await this.insertOrOverrideModule(moduleDefinition, overrides, scope)) ??\n            {};\n        moduleDefinition =\n            this.getOverrideModuleByModule(moduleDefinition, overrides)?.newModule ??\n                moduleDefinition;\n        moduleDefinition =\n            moduleDefinition instanceof Promise\n                ? await moduleDefinition\n                : moduleDefinition;\n        ctxRegistry.push(moduleDefinition);\n        if (this.isForwardReference(moduleDefinition)) {\n            moduleDefinition = moduleDefinition.forwardRef();\n        }\n        const modules = !this.isDynamicModule(moduleDefinition)\n            ? this.reflectMetadata(constants_1.MODULE_METADATA.IMPORTS, moduleDefinition)\n            : [\n                ...this.reflectMetadata(constants_1.MODULE_METADATA.IMPORTS, moduleDefinition.module),\n                ...(moduleDefinition.imports || []),\n            ];\n        let registeredModuleRefs = [];\n        for (const [index, innerModule] of modules.entries()) {\n            // In case of a circular dependency (ES module system), JavaScript will resolve the type to `undefined`.\n            if (innerModule === undefined) {\n                throw new undefined_module_exception_1.UndefinedModuleException(moduleDefinition, index, scope);\n            }\n            if (!innerModule) {\n                throw new invalid_module_exception_1.InvalidModuleException(moduleDefinition, index, scope);\n            }\n            if (ctxRegistry.includes(innerModule)) {\n                continue;\n            }\n            const moduleRefs = await this.scanForModules({\n                moduleDefinition: innerModule,\n                scope: [].concat(scope, moduleDefinition),\n                ctxRegistry,\n                overrides,\n                lazy,\n            });\n            registeredModuleRefs = registeredModuleRefs.concat(moduleRefs);\n        }\n        if (!moduleInstance) {\n            return registeredModuleRefs;\n        }\n        if (lazy && moduleInserted) {\n            this.container.bindGlobalsToImports(moduleInstance);\n        }\n        return [moduleInstance].concat(registeredModuleRefs);\n    }\n    async insertModule(moduleDefinition, scope) {\n        const moduleToAdd = this.isForwardReference(moduleDefinition)\n            ? moduleDefinition.forwardRef()\n            : moduleDefinition;\n        if (this.isInjectable(moduleToAdd) ||\n            this.isController(moduleToAdd) ||\n            this.isExceptionFilter(moduleToAdd)) {\n            throw new invalid_class_module_exception_1.InvalidClassModuleException(moduleDefinition, scope);\n        }\n        return this.container.addModule(moduleToAdd, scope);\n    }\n    async scanModulesForDependencies(modules = this.container.getModules()) {\n        for (const [token, { metatype }] of modules) {\n            await this.reflectImports(metatype, token, metatype.name);\n            this.reflectProviders(metatype, token);\n            this.reflectControllers(metatype, token);\n            this.reflectExports(metatype, token);\n        }\n    }\n    async reflectImports(module, token, context) {\n        const modules = [\n            ...this.reflectMetadata(constants_1.MODULE_METADATA.IMPORTS, module),\n            ...this.container.getDynamicMetadataByToken(token, constants_1.MODULE_METADATA.IMPORTS),\n        ];\n        for (const related of modules) {\n            await this.insertImport(related, token, context);\n        }\n    }\n    reflectProviders(module, token) {\n        const providers = [\n            ...this.reflectMetadata(constants_1.MODULE_METADATA.PROVIDERS, module),\n            ...this.container.getDynamicMetadataByToken(token, constants_1.MODULE_METADATA.PROVIDERS),\n        ];\n        providers.forEach(provider => {\n            this.insertProvider(provider, token);\n            this.reflectDynamicMetadata(provider, token);\n        });\n    }\n    reflectControllers(module, token) {\n        const controllers = [\n            ...this.reflectMetadata(constants_1.MODULE_METADATA.CONTROLLERS, module),\n            ...this.container.getDynamicMetadataByToken(token, constants_1.MODULE_METADATA.CONTROLLERS),\n        ];\n        controllers.forEach(item => {\n            this.insertController(item, token);\n            this.reflectDynamicMetadata(item, token);\n        });\n    }\n    reflectDynamicMetadata(cls, token) {\n        if (!cls || !cls.prototype) {\n            return;\n        }\n        this.reflectInjectables(cls, token, constants_1.GUARDS_METADATA);\n        this.reflectInjectables(cls, token, constants_1.INTERCEPTORS_METADATA);\n        this.reflectInjectables(cls, token, constants_1.EXCEPTION_FILTERS_METADATA);\n        this.reflectInjectables(cls, token, constants_1.PIPES_METADATA);\n        this.reflectParamInjectables(cls, token, constants_1.ROUTE_ARGS_METADATA);\n    }\n    reflectExports(module, token) {\n        const exports = [\n            ...this.reflectMetadata(constants_1.MODULE_METADATA.EXPORTS, module),\n            ...this.container.getDynamicMetadataByToken(token, constants_1.MODULE_METADATA.EXPORTS),\n        ];\n        exports.forEach(exportedProvider => this.insertExportedProvider(exportedProvider, token));\n    }\n    reflectInjectables(component, token, metadataKey) {\n        const controllerInjectables = this.reflectMetadata(metadataKey, component);\n        const methodInjectables = this.metadataScanner\n            .getAllMethodNames(component.prototype)\n            .reduce((acc, method) => {\n            const methodInjectable = this.reflectKeyMetadata(component, metadataKey, method);\n            if (methodInjectable) {\n                acc.push(methodInjectable);\n            }\n            return acc;\n        }, []);\n        controllerInjectables.forEach(injectable => this.insertInjectable(injectable, token, component, constants_1.ENHANCER_KEY_TO_SUBTYPE_MAP[metadataKey]));\n        methodInjectables.forEach(methodInjectable => {\n            methodInjectable.metadata.forEach(injectable => this.insertInjectable(injectable, token, component, constants_1.ENHANCER_KEY_TO_SUBTYPE_MAP[metadataKey], methodInjectable.methodKey));\n        });\n    }\n    reflectParamInjectables(component, token, metadataKey) {\n        const paramsMethods = this.metadataScanner.getAllMethodNames(component.prototype);\n        paramsMethods.forEach(methodKey => {\n            const metadata = Reflect.getMetadata(metadataKey, component, methodKey);\n            if (!metadata) {\n                return;\n            }\n            const params = Object.values(metadata);\n            params\n                .map(item => item.pipes)\n                .flat(1)\n                .forEach(injectable => this.insertInjectable(injectable, token, component, 'pipe', methodKey));\n        });\n    }\n    reflectKeyMetadata(component, key, methodKey) {\n        let prototype = component.prototype;\n        do {\n            const descriptor = Reflect.getOwnPropertyDescriptor(prototype, methodKey);\n            if (!descriptor) {\n                continue;\n            }\n            const metadata = Reflect.getMetadata(key, descriptor.value);\n            if (!metadata) {\n                return;\n            }\n            return { methodKey, metadata };\n        } while ((prototype = Reflect.getPrototypeOf(prototype)) &&\n            prototype !== Object.prototype &&\n            prototype);\n        return undefined;\n    }\n    calculateModulesDistance() {\n        const modulesGenerator = this.container.getModules().values();\n        // Skip \"InternalCoreModule\" from calculating distance\n        modulesGenerator.next();\n        const modulesStack = [];\n        const calculateDistance = (moduleRef, distance = 1) => {\n            if (!moduleRef || modulesStack.includes(moduleRef)) {\n                return;\n            }\n            modulesStack.push(moduleRef);\n            const moduleImports = moduleRef.imports;\n            moduleImports.forEach(importedModuleRef => {\n                if (importedModuleRef) {\n                    if (distance > importedModuleRef.distance) {\n                        importedModuleRef.distance = distance;\n                    }\n                    calculateDistance(importedModuleRef, distance + 1);\n                }\n            });\n        };\n        const rootModule = modulesGenerator.next().value;\n        calculateDistance(rootModule);\n    }\n    async insertImport(related, token, context) {\n        if ((0, shared_utils_1.isUndefined)(related)) {\n            throw new circular_dependency_exception_1.CircularDependencyException(context);\n        }\n        if (this.isForwardReference(related)) {\n            return this.container.addImport(related.forwardRef(), token);\n        }\n        await this.container.addImport(related, token);\n    }\n    isCustomProvider(provider) {\n        return provider && !(0, shared_utils_1.isNil)(provider.provide);\n    }\n    insertProvider(provider, token) {\n        const isCustomProvider = this.isCustomProvider(provider);\n        if (!isCustomProvider) {\n            return this.container.addProvider(provider, token);\n        }\n        const applyProvidersMap = this.getApplyProvidersMap();\n        const providersKeys = Object.keys(applyProvidersMap);\n        const type = provider.provide;\n        if (!providersKeys.includes(type)) {\n            return this.container.addProvider(provider, token);\n        }\n        const uuid = uuid_factory_1.UuidFactory.get(type.toString());\n        const providerToken = `${type} (UUID: ${uuid})`;\n        let scope = provider.scope;\n        if ((0, shared_utils_1.isNil)(scope) && provider.useClass) {\n            scope = (0, get_class_scope_1.getClassScope)(provider.useClass);\n        }\n        this.applicationProvidersApplyMap.push({\n            type,\n            moduleKey: token,\n            providerKey: providerToken,\n            scope,\n        });\n        const newProvider = {\n            ...provider,\n            provide: providerToken,\n            scope,\n        };\n        const enhancerSubtype = constants_2.ENHANCER_TOKEN_TO_SUBTYPE_MAP[type];\n        const factoryOrClassProvider = newProvider;\n        if (this.isRequestOrTransient(factoryOrClassProvider.scope)) {\n            return this.container.addInjectable(newProvider, token, enhancerSubtype);\n        }\n        this.container.addProvider(newProvider, token, enhancerSubtype);\n    }\n    insertInjectable(injectable, token, host, subtype, methodKey) {\n        if ((0, shared_utils_1.isFunction)(injectable)) {\n            const instanceWrapper = this.container.addInjectable(injectable, token, subtype, host);\n            this.graphInspector.insertEnhancerMetadataCache({\n                moduleToken: token,\n                classRef: host,\n                enhancerInstanceWrapper: instanceWrapper,\n                targetNodeId: instanceWrapper.id,\n                subtype,\n                methodKey,\n            });\n            return instanceWrapper;\n        }\n        else {\n            this.graphInspector.insertEnhancerMetadataCache({\n                moduleToken: token,\n                classRef: host,\n                enhancerRef: injectable,\n                methodKey,\n                subtype,\n            });\n        }\n    }\n    insertExportedProvider(\n    // TODO: improve the type definition below because it doesn't reflects the real usage of this method\n    exportedProvider, token) {\n        const fulfilledProvider = this.isForwardReference(exportedProvider)\n            ? exportedProvider.forwardRef()\n            : exportedProvider;\n        this.container.addExportedProvider(fulfilledProvider, token);\n    }\n    insertController(controller, token) {\n        this.container.addController(controller, token);\n    }\n    insertOrOverrideModule(moduleDefinition, overrides, scope) {\n        const overrideModule = this.getOverrideModuleByModule(moduleDefinition, overrides);\n        if (overrideModule !== undefined) {\n            return this.overrideModule(moduleDefinition, overrideModule.newModule, scope);\n        }\n        return this.insertModule(moduleDefinition, scope);\n    }\n    getOverrideModuleByModule(module, overrides) {\n        if (this.isForwardReference(module)) {\n            return overrides.find(moduleToOverride => {\n                return (moduleToOverride.moduleToReplace === module.forwardRef() ||\n                    moduleToOverride.moduleToReplace.forwardRef?.() === module.forwardRef());\n            });\n        }\n        return overrides.find(moduleToOverride => moduleToOverride.moduleToReplace === module);\n    }\n    async overrideModule(moduleToOverride, newModule, scope) {\n        return this.container.replaceModule(this.isForwardReference(moduleToOverride)\n            ? moduleToOverride.forwardRef()\n            : moduleToOverride, this.isForwardReference(newModule) ? newModule.forwardRef() : newModule, scope);\n    }\n    reflectMetadata(metadataKey, metatype) {\n        return Reflect.getMetadata(metadataKey, metatype) || [];\n    }\n    async registerCoreModule(overrides) {\n        const moduleDefinition = internal_core_module_factory_1.InternalCoreModuleFactory.create(this.container, this, this.container.getModuleCompiler(), this.container.getHttpAdapterHostRef(), this.graphInspector, overrides);\n        const [instance] = await this.scanForModules({\n            moduleDefinition,\n            overrides,\n        });\n        this.container.registerCoreModuleRef(instance);\n    }\n    /**\n     * Add either request or transient globally scoped enhancers\n     * to all controllers metadata storage\n     */\n    addScopedEnhancersMetadata() {\n        (0, iterare_1.iterate)(this.applicationProvidersApplyMap)\n            .filter(wrapper => this.isRequestOrTransient(wrapper.scope))\n            .forEach(({ moduleKey, providerKey }) => {\n            const modulesContainer = this.container.getModules();\n            const { injectables } = modulesContainer.get(moduleKey);\n            const instanceWrapper = injectables.get(providerKey);\n            const iterableIterator = modulesContainer.values();\n            (0, iterare_1.iterate)(iterableIterator)\n                .map(moduleRef => Array.from(moduleRef.controllers.values()).concat(moduleRef.entryProviders))\n                .flatten()\n                .forEach(controllerOrEntryProvider => controllerOrEntryProvider.addEnhancerMetadata(instanceWrapper));\n        });\n    }\n    applyApplicationProviders() {\n        const applyProvidersMap = this.getApplyProvidersMap();\n        const applyRequestProvidersMap = this.getApplyRequestProvidersMap();\n        const getInstanceWrapper = (moduleKey, providerKey, collectionKey) => {\n            const modules = this.container.getModules();\n            const collection = modules.get(moduleKey)[collectionKey];\n            return collection.get(providerKey);\n        };\n        // Add global enhancers to the application config\n        this.applicationProvidersApplyMap.forEach(({ moduleKey, providerKey, type, scope }) => {\n            let instanceWrapper;\n            if (this.isRequestOrTransient(scope)) {\n                instanceWrapper = getInstanceWrapper(moduleKey, providerKey, 'injectables');\n                this.graphInspector.insertAttachedEnhancer(instanceWrapper);\n                return applyRequestProvidersMap[type](instanceWrapper);\n            }\n            instanceWrapper = getInstanceWrapper(moduleKey, providerKey, 'providers');\n            this.graphInspector.insertAttachedEnhancer(instanceWrapper);\n            applyProvidersMap[type](instanceWrapper.instance);\n        });\n    }\n    getApplyProvidersMap() {\n        return {\n            [constants_2.APP_INTERCEPTOR]: (interceptor) => this.applicationConfig.addGlobalInterceptor(interceptor),\n            [constants_2.APP_PIPE]: (pipe) => this.applicationConfig.addGlobalPipe(pipe),\n            [constants_2.APP_GUARD]: (guard) => this.applicationConfig.addGlobalGuard(guard),\n            [constants_2.APP_FILTER]: (filter) => this.applicationConfig.addGlobalFilter(filter),\n        };\n    }\n    getApplyRequestProvidersMap() {\n        return {\n            [constants_2.APP_INTERCEPTOR]: (interceptor) => this.applicationConfig.addGlobalRequestInterceptor(interceptor),\n            [constants_2.APP_PIPE]: (pipe) => this.applicationConfig.addGlobalRequestPipe(pipe),\n            [constants_2.APP_GUARD]: (guard) => this.applicationConfig.addGlobalRequestGuard(guard),\n            [constants_2.APP_FILTER]: (filter) => this.applicationConfig.addGlobalRequestFilter(filter),\n        };\n    }\n    isDynamicModule(module) {\n        return module && !!module.module;\n    }\n    /**\n     * @param metatype\n     * @returns `true` if `metatype` is annotated with the `@Injectable()` decorator.\n     */\n    isInjectable(metatype) {\n        return !!Reflect.getMetadata(constants_1.INJECTABLE_WATERMARK, metatype);\n    }\n    /**\n     * @param metatype\n     * @returns `true` if `metatype` is annotated with the `@Controller()` decorator.\n     */\n    isController(metatype) {\n        return !!Reflect.getMetadata(constants_1.CONTROLLER_WATERMARK, metatype);\n    }\n    /**\n     * @param metatype\n     * @returns `true` if `metatype` is annotated with the `@Catch()` decorator.\n     */\n    isExceptionFilter(metatype) {\n        return !!Reflect.getMetadata(constants_1.CATCH_WATERMARK, metatype);\n    }\n    isForwardReference(module) {\n        return module && !!module.forwardRef;\n    }\n    isRequestOrTransient(scope) {\n        return scope === interfaces_1.Scope.REQUEST || scope === interfaces_1.Scope.TRANSIENT;\n    }\n}\nexports.DependenciesScanner = DependenciesScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}