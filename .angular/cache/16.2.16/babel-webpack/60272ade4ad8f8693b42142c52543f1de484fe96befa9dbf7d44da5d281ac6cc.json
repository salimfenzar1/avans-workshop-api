{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReplContext = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst application_config_1 = require(\"../application-config\");\nconst injector_1 = require(\"../injector\");\nconst internal_core_module_1 = require(\"../injector/internal-core-module/internal-core-module\");\nconst native_functions_1 = require(\"./native-functions\");\nclass ReplContext {\n  constructor(app, nativeFunctionsClassRefs) {\n    this.app = app;\n    this.logger = new common_1.Logger(ReplContext.name);\n    this.debugRegistry = {};\n    this.globalScope = Object.create(null);\n    this.nativeFunctions = new Map();\n    this.container = app.container; // Using `any` because `app.container` is not public.\n    this.initializeContext();\n    this.initializeNativeFunctions(nativeFunctionsClassRefs || []);\n  }\n  writeToStdout(text) {\n    process.stdout.write(text);\n  }\n  initializeContext() {\n    const modules = this.container.getModules();\n    modules.forEach(moduleRef => {\n      let moduleName = moduleRef.metatype.name;\n      if (moduleName === internal_core_module_1.InternalCoreModule.name) {\n        return;\n      }\n      if (this.globalScope[moduleName]) {\n        moduleName += ` (${moduleRef.token})`;\n      }\n      this.introspectCollection(moduleRef, moduleName, 'providers');\n      this.introspectCollection(moduleRef, moduleName, 'controllers');\n      // For in REPL auto-complete functionality\n      Object.defineProperty(this.globalScope, moduleName, {\n        value: moduleRef.metatype,\n        configurable: false,\n        enumerable: true\n      });\n    });\n  }\n  introspectCollection(moduleRef, moduleKey, collection) {\n    const moduleDebugEntry = {};\n    moduleRef[collection].forEach(({\n      token\n    }) => {\n      const stringifiedToken = this.stringifyToken(token);\n      if (stringifiedToken === application_config_1.ApplicationConfig.name || stringifiedToken === moduleRef.metatype.name) {\n        return;\n      }\n      if (!this.globalScope[stringifiedToken]) {\n        // For in REPL auto-complete functionality\n        Object.defineProperty(this.globalScope, stringifiedToken, {\n          value: token,\n          configurable: false,\n          enumerable: true\n        });\n      }\n      if (stringifiedToken === injector_1.ModuleRef.name) {\n        return;\n      }\n      moduleDebugEntry[stringifiedToken] = token;\n    });\n    this.debugRegistry[moduleKey] = {\n      ...this.debugRegistry?.[moduleKey],\n      [collection]: moduleDebugEntry\n    };\n  }\n  stringifyToken(token) {\n    return typeof token !== 'string' ? typeof token === 'function' ? token.name : token?.toString() : `\"${token}\"`;\n  }\n  addNativeFunction(NativeFunctionRef) {\n    const nativeFunction = new NativeFunctionRef(this);\n    const nativeFunctions = [nativeFunction];\n    this.nativeFunctions.set(nativeFunction.fnDefinition.name, nativeFunction);\n    nativeFunction.fnDefinition.aliases?.forEach(aliasName => {\n      const aliasNativeFunction = Object.create(nativeFunction);\n      aliasNativeFunction.fnDefinition = {\n        name: aliasName,\n        description: aliasNativeFunction.fnDefinition.description,\n        signature: aliasNativeFunction.fnDefinition.signature\n      };\n      this.nativeFunctions.set(aliasName, aliasNativeFunction);\n      nativeFunctions.push(aliasNativeFunction);\n    });\n    return nativeFunctions;\n  }\n  registerFunctionIntoGlobalScope(nativeFunction) {\n    // Bind the method to REPL's context:\n    this.globalScope[nativeFunction.fnDefinition.name] = nativeFunction.action.bind(nativeFunction);\n    // Load the help trigger as a `help` getter on each native function:\n    const functionBoundRef = this.globalScope[nativeFunction.fnDefinition.name];\n    Object.defineProperty(functionBoundRef, 'help', {\n      enumerable: false,\n      configurable: false,\n      get: () =>\n      // Dynamically builds the help message as will unlikely to be called\n      // several times.\n      this.writeToStdout(nativeFunction.makeHelpMessage())\n    });\n  }\n  initializeNativeFunctions(nativeFunctionsClassRefs) {\n    const builtInFunctionsClassRefs = [native_functions_1.HelpReplFn, native_functions_1.GetReplFn, native_functions_1.ResolveReplFn, native_functions_1.SelectReplFn, native_functions_1.DebugReplFn, native_functions_1.MethodsReplFn];\n    builtInFunctionsClassRefs.concat(nativeFunctionsClassRefs).forEach(NativeFunction => {\n      const nativeFunctions = this.addNativeFunction(NativeFunction);\n      nativeFunctions.forEach(nativeFunction => {\n        this.registerFunctionIntoGlobalScope(nativeFunction);\n      });\n    });\n  }\n}\nexports.ReplContext = ReplContext;","map":{"version":3,"names":["Object","defineProperty","exports","value","ReplContext","common_1","require","application_config_1","injector_1","internal_core_module_1","native_functions_1","constructor","app","nativeFunctionsClassRefs","logger","Logger","name","debugRegistry","globalScope","create","nativeFunctions","Map","container","initializeContext","initializeNativeFunctions","writeToStdout","text","process","stdout","write","modules","getModules","forEach","moduleRef","moduleName","metatype","InternalCoreModule","token","introspectCollection","configurable","enumerable","moduleKey","collection","moduleDebugEntry","stringifiedToken","stringifyToken","ApplicationConfig","ModuleRef","toString","addNativeFunction","NativeFunctionRef","nativeFunction","set","fnDefinition","aliases","aliasName","aliasNativeFunction","description","signature","push","registerFunctionIntoGlobalScope","action","bind","functionBoundRef","get","makeHelpMessage","builtInFunctionsClassRefs","HelpReplFn","GetReplFn","ResolveReplFn","SelectReplFn","DebugReplFn","MethodsReplFn","concat","NativeFunction"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/repl/repl-context.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReplContext = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst application_config_1 = require(\"../application-config\");\nconst injector_1 = require(\"../injector\");\nconst internal_core_module_1 = require(\"../injector/internal-core-module/internal-core-module\");\nconst native_functions_1 = require(\"./native-functions\");\nclass ReplContext {\n    constructor(app, nativeFunctionsClassRefs) {\n        this.app = app;\n        this.logger = new common_1.Logger(ReplContext.name);\n        this.debugRegistry = {};\n        this.globalScope = Object.create(null);\n        this.nativeFunctions = new Map();\n        this.container = app.container; // Using `any` because `app.container` is not public.\n        this.initializeContext();\n        this.initializeNativeFunctions(nativeFunctionsClassRefs || []);\n    }\n    writeToStdout(text) {\n        process.stdout.write(text);\n    }\n    initializeContext() {\n        const modules = this.container.getModules();\n        modules.forEach(moduleRef => {\n            let moduleName = moduleRef.metatype.name;\n            if (moduleName === internal_core_module_1.InternalCoreModule.name) {\n                return;\n            }\n            if (this.globalScope[moduleName]) {\n                moduleName += ` (${moduleRef.token})`;\n            }\n            this.introspectCollection(moduleRef, moduleName, 'providers');\n            this.introspectCollection(moduleRef, moduleName, 'controllers');\n            // For in REPL auto-complete functionality\n            Object.defineProperty(this.globalScope, moduleName, {\n                value: moduleRef.metatype,\n                configurable: false,\n                enumerable: true,\n            });\n        });\n    }\n    introspectCollection(moduleRef, moduleKey, collection) {\n        const moduleDebugEntry = {};\n        moduleRef[collection].forEach(({ token }) => {\n            const stringifiedToken = this.stringifyToken(token);\n            if (stringifiedToken === application_config_1.ApplicationConfig.name ||\n                stringifiedToken === moduleRef.metatype.name) {\n                return;\n            }\n            if (!this.globalScope[stringifiedToken]) {\n                // For in REPL auto-complete functionality\n                Object.defineProperty(this.globalScope, stringifiedToken, {\n                    value: token,\n                    configurable: false,\n                    enumerable: true,\n                });\n            }\n            if (stringifiedToken === injector_1.ModuleRef.name) {\n                return;\n            }\n            moduleDebugEntry[stringifiedToken] = token;\n        });\n        this.debugRegistry[moduleKey] = {\n            ...this.debugRegistry?.[moduleKey],\n            [collection]: moduleDebugEntry,\n        };\n    }\n    stringifyToken(token) {\n        return typeof token !== 'string'\n            ? typeof token === 'function'\n                ? token.name\n                : token?.toString()\n            : `\"${token}\"`;\n    }\n    addNativeFunction(NativeFunctionRef) {\n        const nativeFunction = new NativeFunctionRef(this);\n        const nativeFunctions = [nativeFunction];\n        this.nativeFunctions.set(nativeFunction.fnDefinition.name, nativeFunction);\n        nativeFunction.fnDefinition.aliases?.forEach(aliasName => {\n            const aliasNativeFunction = Object.create(nativeFunction);\n            aliasNativeFunction.fnDefinition = {\n                name: aliasName,\n                description: aliasNativeFunction.fnDefinition.description,\n                signature: aliasNativeFunction.fnDefinition.signature,\n            };\n            this.nativeFunctions.set(aliasName, aliasNativeFunction);\n            nativeFunctions.push(aliasNativeFunction);\n        });\n        return nativeFunctions;\n    }\n    registerFunctionIntoGlobalScope(nativeFunction) {\n        // Bind the method to REPL's context:\n        this.globalScope[nativeFunction.fnDefinition.name] =\n            nativeFunction.action.bind(nativeFunction);\n        // Load the help trigger as a `help` getter on each native function:\n        const functionBoundRef = this.globalScope[nativeFunction.fnDefinition.name];\n        Object.defineProperty(functionBoundRef, 'help', {\n            enumerable: false,\n            configurable: false,\n            get: () => \n            // Dynamically builds the help message as will unlikely to be called\n            // several times.\n            this.writeToStdout(nativeFunction.makeHelpMessage()),\n        });\n    }\n    initializeNativeFunctions(nativeFunctionsClassRefs) {\n        const builtInFunctionsClassRefs = [\n            native_functions_1.HelpReplFn,\n            native_functions_1.GetReplFn,\n            native_functions_1.ResolveReplFn,\n            native_functions_1.SelectReplFn,\n            native_functions_1.DebugReplFn,\n            native_functions_1.MethodsReplFn,\n        ];\n        builtInFunctionsClassRefs\n            .concat(nativeFunctionsClassRefs)\n            .forEach(NativeFunction => {\n            const nativeFunctions = this.addNativeFunction(NativeFunction);\n            nativeFunctions.forEach(nativeFunction => {\n                this.registerFunctionIntoGlobalScope(nativeFunction);\n            });\n        });\n    }\n}\nexports.ReplContext = ReplContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}