{"ast":null,"code":"import { TransformOperationExecutor } from './TransformOperationExecutor';\nimport { TransformationType } from './enums';\nimport { defaultOptions } from './constants/default-options.constant';\nexport class ClassTransformer {\n  instanceToPlain(object, options) {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, {\n      ...defaultOptions,\n      ...options\n    });\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  }\n  classToPlainFromExist(object, plainObject, options) {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, {\n      ...defaultOptions,\n      ...options\n    });\n    return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n  }\n  plainToInstance(cls, plain, options) {\n    const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, {\n      ...defaultOptions,\n      ...options\n    });\n    return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n  }\n  plainToClassFromExist(clsObject, plain, options) {\n    const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, {\n      ...defaultOptions,\n      ...options\n    });\n    return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n  }\n  instanceToInstance(object, options) {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, {\n      ...defaultOptions,\n      ...options\n    });\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  }\n  classToClassFromExist(object, fromObject, options) {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, {\n      ...defaultOptions,\n      ...options\n    });\n    return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n  }\n  serialize(object, options) {\n    return JSON.stringify(this.instanceToPlain(object, options));\n  }\n  /**\n   * Deserializes given JSON string to a object of the given class.\n   */\n  deserialize(cls, json, options) {\n    const jsonObject = JSON.parse(json);\n    return this.plainToInstance(cls, jsonObject, options);\n  }\n  /**\n   * Deserializes given JSON string to an array of objects of the given class.\n   */\n  deserializeArray(cls, json, options) {\n    const jsonObject = JSON.parse(json);\n    return this.plainToInstance(cls, jsonObject, options);\n  }\n}","map":{"version":3,"names":["TransformOperationExecutor","TransformationType","defaultOptions","ClassTransformer","instanceToPlain","object","options","executor","CLASS_TO_PLAIN","transform","undefined","classToPlainFromExist","plainObject","plainToInstance","cls","plain","PLAIN_TO_CLASS","plainToClassFromExist","clsObject","instanceToInstance","CLASS_TO_CLASS","classToClassFromExist","fromObject","serialize","JSON","stringify","deserialize","json","jsonObject","parse","deserializeArray"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-transformer/esm2015/ClassTransformer.js"],"sourcesContent":["import { TransformOperationExecutor } from './TransformOperationExecutor';\nimport { TransformationType } from './enums';\nimport { defaultOptions } from './constants/default-options.constant';\nexport class ClassTransformer {\n    instanceToPlain(object, options) {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, {\n            ...defaultOptions,\n            ...options,\n        });\n        return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n    }\n    classToPlainFromExist(object, plainObject, options) {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, {\n            ...defaultOptions,\n            ...options,\n        });\n        return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n    }\n    plainToInstance(cls, plain, options) {\n        const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, {\n            ...defaultOptions,\n            ...options,\n        });\n        return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n    }\n    plainToClassFromExist(clsObject, plain, options) {\n        const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, {\n            ...defaultOptions,\n            ...options,\n        });\n        return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n    }\n    instanceToInstance(object, options) {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, {\n            ...defaultOptions,\n            ...options,\n        });\n        return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n    }\n    classToClassFromExist(object, fromObject, options) {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, {\n            ...defaultOptions,\n            ...options,\n        });\n        return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n    }\n    serialize(object, options) {\n        return JSON.stringify(this.instanceToPlain(object, options));\n    }\n    /**\n     * Deserializes given JSON string to a object of the given class.\n     */\n    deserialize(cls, json, options) {\n        const jsonObject = JSON.parse(json);\n        return this.plainToInstance(cls, jsonObject, options);\n    }\n    /**\n     * Deserializes given JSON string to an array of objects of the given class.\n     */\n    deserializeArray(cls, json, options) {\n        const jsonObject = JSON.parse(json);\n        return this.plainToInstance(cls, jsonObject, options);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}