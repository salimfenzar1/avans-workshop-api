{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphInspector = void 0;\nconst unknown_dependencies_exception_1 = require(\"../errors/exceptions/unknown-dependencies.exception\");\nconst deterministic_uuid_registry_1 = require(\"./deterministic-uuid-registry\");\nconst partial_graph_host_1 = require(\"./partial-graph.host\");\nclass GraphInspector {\n  constructor(container) {\n    this.container = container;\n    this.enhancersMetadataCache = new Array();\n    this.graph = container.serializedGraph;\n  }\n  inspectModules(modules = this.container.getModules()) {\n    for (const moduleRef of modules.values()) {\n      this.insertModuleNode(moduleRef);\n      this.insertClassNodes(moduleRef);\n      this.insertModuleToModuleEdges(moduleRef);\n    }\n    this.enhancersMetadataCache.forEach(entry => this.insertEnhancerEdge(entry));\n    deterministic_uuid_registry_1.DeterministicUuidRegistry.clear();\n  }\n  registerPartial(error) {\n    this.graph.status = 'partial';\n    if (error instanceof unknown_dependencies_exception_1.UnknownDependenciesException) {\n      this.graph.metadata = {\n        cause: {\n          type: 'unknown-dependencies',\n          context: error.context,\n          moduleId: error.moduleRef?.id,\n          nodeId: error.metadata?.id\n        }\n      };\n    } else {\n      this.graph.metadata = {\n        cause: {\n          type: 'unknown',\n          error\n        }\n      };\n    }\n    partial_graph_host_1.PartialGraphHost.register(this.graph);\n  }\n  inspectInstanceWrapper(source, moduleRef) {\n    const ctorMetadata = source.getCtorMetadata();\n    ctorMetadata?.forEach((target, index) => this.insertClassToClassEdge(source, target, moduleRef, index, 'constructor'));\n    const propertiesMetadata = source.getPropertiesMetadata();\n    propertiesMetadata?.forEach(({\n      key,\n      wrapper: target\n    }) => this.insertClassToClassEdge(source, target, moduleRef, key, 'property'));\n  }\n  insertEnhancerMetadataCache(entry) {\n    this.enhancersMetadataCache.push(entry);\n  }\n  insertOrphanedEnhancer(entry) {\n    this.graph.insertOrphanedEnhancer({\n      ...entry,\n      ref: entry.ref?.constructor?.name ?? 'Object'\n    });\n  }\n  insertAttachedEnhancer(wrapper) {\n    const existingNode = this.graph.getNodeById(wrapper.id);\n    existingNode.metadata.global = true;\n    this.graph.insertAttachedEnhancer(existingNode.id);\n  }\n  insertEntrypointDefinition(definition, parentId) {\n    definition = {\n      ...definition,\n      id: `${definition.classNodeId}_${definition.methodName}`\n    };\n    this.graph.insertEntrypoint(definition, parentId);\n  }\n  insertClassNode(moduleRef, wrapper, type) {\n    this.graph.insertNode({\n      id: wrapper.id,\n      label: wrapper.name,\n      parent: moduleRef.id,\n      metadata: {\n        type,\n        internal: wrapper.metatype === moduleRef.metatype,\n        sourceModuleName: moduleRef.name,\n        durable: wrapper.isDependencyTreeDurable(),\n        static: wrapper.isDependencyTreeStatic(),\n        scope: wrapper.scope,\n        transient: wrapper.isTransient,\n        exported: moduleRef.exports.has(wrapper.token),\n        token: wrapper.token,\n        subtype: wrapper.subtype,\n        initTime: wrapper.initTime\n      }\n    });\n  }\n  insertModuleNode(moduleRef) {\n    const dynamicMetadata = this.container.getDynamicMetadataByToken(moduleRef.token);\n    const node = {\n      id: moduleRef.id,\n      label: moduleRef.name,\n      metadata: {\n        type: 'module',\n        global: moduleRef.isGlobal,\n        dynamic: !!dynamicMetadata,\n        internal: moduleRef.name === 'InternalCoreModule'\n      }\n    };\n    this.graph.insertNode(node);\n  }\n  insertModuleToModuleEdges(moduleRef) {\n    for (const targetModuleRef of moduleRef.imports) {\n      this.graph.insertEdge({\n        source: moduleRef.id,\n        target: targetModuleRef.id,\n        metadata: {\n          type: 'module-to-module',\n          sourceModuleName: moduleRef.name,\n          targetModuleName: targetModuleRef.name\n        }\n      });\n    }\n  }\n  insertEnhancerEdge(entry) {\n    const moduleRef = this.container.getModuleByKey(entry.moduleToken);\n    const sourceInstanceWrapper = moduleRef.controllers.get(entry.classRef) ?? moduleRef.providers.get(entry.classRef);\n    const existingSourceNode = this.graph.getNodeById(sourceInstanceWrapper.id);\n    const enhancers = existingSourceNode.metadata.enhancers ?? [];\n    if (entry.enhancerInstanceWrapper) {\n      this.insertClassToClassEdge(sourceInstanceWrapper, entry.enhancerInstanceWrapper, moduleRef, undefined, 'decorator');\n      enhancers.push({\n        id: entry.enhancerInstanceWrapper.id,\n        methodKey: entry.methodKey,\n        subtype: entry.subtype\n      });\n    } else {\n      const name = entry.enhancerRef.constructor?.name ?? entry.enhancerRef.name;\n      enhancers.push({\n        name,\n        methodKey: entry.methodKey,\n        subtype: entry.subtype\n      });\n    }\n    existingSourceNode.metadata.enhancers = enhancers;\n  }\n  insertClassToClassEdge(source, target, moduleRef, keyOrIndex, injectionType) {\n    this.graph.insertEdge({\n      source: source.id,\n      target: target.id,\n      metadata: {\n        type: 'class-to-class',\n        sourceModuleName: moduleRef.name,\n        sourceClassName: source.name,\n        targetClassName: target.name,\n        sourceClassToken: source.token,\n        targetClassToken: target.token,\n        targetModuleName: target.host?.name,\n        keyOrIndex,\n        injectionType\n      }\n    });\n  }\n  insertClassNodes(moduleRef) {\n    moduleRef.providers.forEach(value => this.insertClassNode(moduleRef, value, 'provider'));\n    moduleRef.injectables.forEach(value => this.insertClassNode(moduleRef, value, 'injectable'));\n    moduleRef.controllers.forEach(value => this.insertClassNode(moduleRef, value, 'controller'));\n  }\n}\nexports.GraphInspector = GraphInspector;","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphInspector","unknown_dependencies_exception_1","require","deterministic_uuid_registry_1","partial_graph_host_1","constructor","container","enhancersMetadataCache","Array","graph","serializedGraph","inspectModules","modules","getModules","moduleRef","values","insertModuleNode","insertClassNodes","insertModuleToModuleEdges","forEach","entry","insertEnhancerEdge","DeterministicUuidRegistry","clear","registerPartial","error","status","UnknownDependenciesException","metadata","cause","type","context","moduleId","id","nodeId","PartialGraphHost","register","inspectInstanceWrapper","source","ctorMetadata","getCtorMetadata","target","index","insertClassToClassEdge","propertiesMetadata","getPropertiesMetadata","key","wrapper","insertEnhancerMetadataCache","push","insertOrphanedEnhancer","ref","name","insertAttachedEnhancer","existingNode","getNodeById","global","insertEntrypointDefinition","definition","parentId","classNodeId","methodName","insertEntrypoint","insertClassNode","insertNode","label","parent","internal","metatype","sourceModuleName","durable","isDependencyTreeDurable","static","isDependencyTreeStatic","scope","transient","isTransient","exported","has","token","subtype","initTime","dynamicMetadata","getDynamicMetadataByToken","node","isGlobal","dynamic","targetModuleRef","imports","insertEdge","targetModuleName","getModuleByKey","moduleToken","sourceInstanceWrapper","controllers","get","classRef","providers","existingSourceNode","enhancers","enhancerInstanceWrapper","undefined","methodKey","enhancerRef","keyOrIndex","injectionType","sourceClassName","targetClassName","sourceClassToken","targetClassToken","host","injectables"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/inspector/graph-inspector.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphInspector = void 0;\nconst unknown_dependencies_exception_1 = require(\"../errors/exceptions/unknown-dependencies.exception\");\nconst deterministic_uuid_registry_1 = require(\"./deterministic-uuid-registry\");\nconst partial_graph_host_1 = require(\"./partial-graph.host\");\nclass GraphInspector {\n    constructor(container) {\n        this.container = container;\n        this.enhancersMetadataCache = new Array();\n        this.graph = container.serializedGraph;\n    }\n    inspectModules(modules = this.container.getModules()) {\n        for (const moduleRef of modules.values()) {\n            this.insertModuleNode(moduleRef);\n            this.insertClassNodes(moduleRef);\n            this.insertModuleToModuleEdges(moduleRef);\n        }\n        this.enhancersMetadataCache.forEach(entry => this.insertEnhancerEdge(entry));\n        deterministic_uuid_registry_1.DeterministicUuidRegistry.clear();\n    }\n    registerPartial(error) {\n        this.graph.status = 'partial';\n        if (error instanceof unknown_dependencies_exception_1.UnknownDependenciesException) {\n            this.graph.metadata = {\n                cause: {\n                    type: 'unknown-dependencies',\n                    context: error.context,\n                    moduleId: error.moduleRef?.id,\n                    nodeId: error.metadata?.id,\n                },\n            };\n        }\n        else {\n            this.graph.metadata = {\n                cause: {\n                    type: 'unknown',\n                    error,\n                },\n            };\n        }\n        partial_graph_host_1.PartialGraphHost.register(this.graph);\n    }\n    inspectInstanceWrapper(source, moduleRef) {\n        const ctorMetadata = source.getCtorMetadata();\n        ctorMetadata?.forEach((target, index) => this.insertClassToClassEdge(source, target, moduleRef, index, 'constructor'));\n        const propertiesMetadata = source.getPropertiesMetadata();\n        propertiesMetadata?.forEach(({ key, wrapper: target }) => this.insertClassToClassEdge(source, target, moduleRef, key, 'property'));\n    }\n    insertEnhancerMetadataCache(entry) {\n        this.enhancersMetadataCache.push(entry);\n    }\n    insertOrphanedEnhancer(entry) {\n        this.graph.insertOrphanedEnhancer({\n            ...entry,\n            ref: entry.ref?.constructor?.name ?? 'Object',\n        });\n    }\n    insertAttachedEnhancer(wrapper) {\n        const existingNode = this.graph.getNodeById(wrapper.id);\n        existingNode.metadata.global = true;\n        this.graph.insertAttachedEnhancer(existingNode.id);\n    }\n    insertEntrypointDefinition(definition, parentId) {\n        definition = {\n            ...definition,\n            id: `${definition.classNodeId}_${definition.methodName}`,\n        };\n        this.graph.insertEntrypoint(definition, parentId);\n    }\n    insertClassNode(moduleRef, wrapper, type) {\n        this.graph.insertNode({\n            id: wrapper.id,\n            label: wrapper.name,\n            parent: moduleRef.id,\n            metadata: {\n                type,\n                internal: wrapper.metatype === moduleRef.metatype,\n                sourceModuleName: moduleRef.name,\n                durable: wrapper.isDependencyTreeDurable(),\n                static: wrapper.isDependencyTreeStatic(),\n                scope: wrapper.scope,\n                transient: wrapper.isTransient,\n                exported: moduleRef.exports.has(wrapper.token),\n                token: wrapper.token,\n                subtype: wrapper.subtype,\n                initTime: wrapper.initTime,\n            },\n        });\n    }\n    insertModuleNode(moduleRef) {\n        const dynamicMetadata = this.container.getDynamicMetadataByToken(moduleRef.token);\n        const node = {\n            id: moduleRef.id,\n            label: moduleRef.name,\n            metadata: {\n                type: 'module',\n                global: moduleRef.isGlobal,\n                dynamic: !!dynamicMetadata,\n                internal: moduleRef.name === 'InternalCoreModule',\n            },\n        };\n        this.graph.insertNode(node);\n    }\n    insertModuleToModuleEdges(moduleRef) {\n        for (const targetModuleRef of moduleRef.imports) {\n            this.graph.insertEdge({\n                source: moduleRef.id,\n                target: targetModuleRef.id,\n                metadata: {\n                    type: 'module-to-module',\n                    sourceModuleName: moduleRef.name,\n                    targetModuleName: targetModuleRef.name,\n                },\n            });\n        }\n    }\n    insertEnhancerEdge(entry) {\n        const moduleRef = this.container.getModuleByKey(entry.moduleToken);\n        const sourceInstanceWrapper = moduleRef.controllers.get(entry.classRef) ??\n            moduleRef.providers.get(entry.classRef);\n        const existingSourceNode = this.graph.getNodeById(sourceInstanceWrapper.id);\n        const enhancers = existingSourceNode.metadata.enhancers ?? [];\n        if (entry.enhancerInstanceWrapper) {\n            this.insertClassToClassEdge(sourceInstanceWrapper, entry.enhancerInstanceWrapper, moduleRef, undefined, 'decorator');\n            enhancers.push({\n                id: entry.enhancerInstanceWrapper.id,\n                methodKey: entry.methodKey,\n                subtype: entry.subtype,\n            });\n        }\n        else {\n            const name = entry.enhancerRef.constructor?.name ??\n                entry.enhancerRef.name;\n            enhancers.push({\n                name,\n                methodKey: entry.methodKey,\n                subtype: entry.subtype,\n            });\n        }\n        existingSourceNode.metadata.enhancers = enhancers;\n    }\n    insertClassToClassEdge(source, target, moduleRef, keyOrIndex, injectionType) {\n        this.graph.insertEdge({\n            source: source.id,\n            target: target.id,\n            metadata: {\n                type: 'class-to-class',\n                sourceModuleName: moduleRef.name,\n                sourceClassName: source.name,\n                targetClassName: target.name,\n                sourceClassToken: source.token,\n                targetClassToken: target.token,\n                targetModuleName: target.host?.name,\n                keyOrIndex,\n                injectionType,\n            },\n        });\n    }\n    insertClassNodes(moduleRef) {\n        moduleRef.providers.forEach(value => this.insertClassNode(moduleRef, value, 'provider'));\n        moduleRef.injectables.forEach(value => this.insertClassNode(moduleRef, value, 'injectable'));\n        moduleRef.controllers.forEach(value => this.insertClassNode(moduleRef, value, 'controller'));\n    }\n}\nexports.GraphInspector = GraphInspector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}