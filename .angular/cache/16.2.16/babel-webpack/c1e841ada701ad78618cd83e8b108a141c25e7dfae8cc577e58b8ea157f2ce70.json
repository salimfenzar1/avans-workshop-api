{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar UserService_1;\nimport { __decorate, __metadata, __param } from \"tslib\";\nimport { HttpException, Injectable, Logger } from '@nestjs/common';\nimport { Model, Types } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User as UserModel } from './user.schema';\nexport let UserService = UserService_1 = class UserService {\n  constructor(userModel // @InjectModel(Meal.name) private meetupModel: Model<MealDocument>\n  ) {\n    this.userModel = userModel;\n    this.logger = new Logger(UserService_1.name);\n  }\n  findAll() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.logger.log(`Finding all items`);\n      const items = yield _this.userModel.find();\n      return items;\n    })();\n  }\n  findOne(_id) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.logger.log(`Finding user with id ${_id}`);\n      if (!Types.ObjectId.isValid(_id)) {\n        _this2.logger.error(`Invalid ObjectId: ${_id}`);\n        throw new HttpException(`Invalid ID format`, 400);\n      }\n      const item = yield _this2.userModel.findById(new Types.ObjectId(_id)).exec();\n      if (!item) {\n        _this2.logger.debug('Item not found');\n        throw new HttpException('User not found', 404);\n      }\n      return item;\n    })();\n  }\n  findOneByEmail(email) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.logger.log(`Finding user by email ${email}`);\n      const item = _this3.userModel.findOne({\n        emailAddress: email\n      }).select('-password').exec();\n      return item;\n    })();\n  }\n  create(user) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.logger.log(`Create user ${user.name}`);\n      const createdItem = _this4.userModel.create(user);\n      return createdItem;\n    })();\n  }\n  update(_id, user) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.logger.log(`Updating user with ID: ${_id}`);\n      _this5.logger.log(`Received update payload: ${JSON.stringify(user)}`);\n      if (!Types.ObjectId.isValid(_id)) {\n        _this5.logger.error(`Invalid ObjectId format: ${_id}`);\n        throw new HttpException('Invalid ID format', 400);\n      }\n      const objectId = new Types.ObjectId(_id);\n      const updatedUser = yield _this5.userModel.findByIdAndUpdate(objectId, user, {\n        new: true\n      });\n      if (!updatedUser) {\n        _this5.logger.error(`User with ID ${_id} not found`);\n        throw new HttpException(`User with ID ${_id} not found`, 404);\n      }\n      _this5.logger.log(`User updated successfully: ${JSON.stringify(updatedUser)}`);\n      return updatedUser;\n    })();\n  }\n};\nUserService = UserService_1 = __decorate([Injectable(), __param(0, InjectModel(UserModel.name)), __metadata(\"design:paramtypes\", [Model])], UserService);","map":{"version":3,"names":["HttpException","Injectable","Logger","Model","Types","InjectModel","User","UserModel","UserService","UserService_1","constructor","userModel","logger","name","findAll","_this","_asyncToGenerator","log","items","find","findOne","_id","_this2","ObjectId","isValid","error","item","findById","exec","debug","findOneByEmail","email","_this3","emailAddress","select","create","user","_this4","createdItem","update","_this5","JSON","stringify","objectId","updatedUser","findByIdAndUpdate","new","__decorate","__param"],"sources":["C:\\Users\\salim\\Dev\\avans-nx-workshop-2024\\avans-nx-workshop\\libs\\backend\\user\\src\\lib\\user\\user.service.ts"],"sourcesContent":["import { HttpException, Injectable, Logger } from '@nestjs/common';\r\nimport { Model, Types } from 'mongoose';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { User as UserModel, UserDocument } from './user.schema';\r\nimport { IUser, IUserInfo } from '@avans-nx-workshop/shared/api';\r\n// import { Meal, MealDocument } from '@avans-nx-workshop/backend/features';\r\nimport { CreateUserDto, UpdateUserDto } from '@avans-nx-workshop/backend/dto';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n    private readonly logger: Logger = new Logger(UserService.name);\r\n\r\n    constructor(\r\n        @InjectModel(UserModel.name) private userModel: Model<UserDocument> // @InjectModel(Meal.name) private meetupModel: Model<MealDocument>\r\n    ) {}\r\n\r\n    async findAll(): Promise<IUserInfo[]> {\r\n        this.logger.log(`Finding all items`);\r\n        const items = await this.userModel.find();\r\n        return items;\r\n    }\r\n\r\n    async findOne(_id: string): Promise<IUser | null> {\r\n        this.logger.log(`Finding user with id ${_id}`);\r\n        if (!Types.ObjectId.isValid(_id)) {\r\n            this.logger.error(`Invalid ObjectId: ${_id}`);\r\n            throw new HttpException(`Invalid ID format`, 400);\r\n        }\r\n        const item = await this.userModel.findById(new Types.ObjectId(_id)).exec();\r\n        if (!item) {\r\n            this.logger.debug('Item not found');\r\n            throw new HttpException('User not found', 404);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    async findOneByEmail(email: string): Promise<IUserInfo | null> {\r\n        this.logger.log(`Finding user by email ${email}`);\r\n        const item = this.userModel\r\n            .findOne({ emailAddress: email })\r\n            .select('-password')\r\n            .exec();\r\n        return item;\r\n    }\r\n\r\n    async create(user: CreateUserDto): Promise<IUserInfo> {\r\n        this.logger.log(`Create user ${user.name}`);\r\n        const createdItem = this.userModel.create(user);\r\n        return createdItem;\r\n    }\r\n\r\n\r\n\r\n    async update(_id: string, user: UpdateUserDto): Promise<IUserInfo | null> {\r\n        this.logger.log(`Updating user with ID: ${_id}`);\r\n        this.logger.log(`Received update payload: ${JSON.stringify(user)}`);\r\n    \r\n        if (!Types.ObjectId.isValid(_id)) {\r\n            this.logger.error(`Invalid ObjectId format: ${_id}`);\r\n            throw new HttpException('Invalid ID format', 400);\r\n        }\r\n    \r\n        const objectId = new Types.ObjectId(_id);\r\n        const updatedUser = await this.userModel.findByIdAndUpdate(\r\n            objectId,\r\n            user,\r\n            { new: true }\r\n        );\r\n    \r\n        if (!updatedUser) {\r\n            this.logger.error(`User with ID ${_id} not found`);\r\n            throw new HttpException(`User with ID ${_id} not found`, 404);\r\n        }\r\n    \r\n        this.logger.log(`User updated successfully: ${JSON.stringify(updatedUser)}`);\r\n        return updatedUser;\r\n    }\r\n    \r\n    \r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}