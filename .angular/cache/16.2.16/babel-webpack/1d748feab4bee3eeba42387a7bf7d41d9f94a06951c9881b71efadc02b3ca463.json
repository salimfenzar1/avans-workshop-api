{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpException = void 0;\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n/**\n * Defines the base Nest HTTP exception, which is handled by the default\n * Exceptions Handler.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nclass HttpException extends Error {\n  /**\n   * Instantiate a plain HTTP Exception.\n   *\n   * @example\n   * throw new HttpException('message', HttpStatus.BAD_REQUEST)\n   * throw new HttpException('custom message', HttpStatus.BAD_REQUEST, {\n   *  cause: new Error('Cause Error'),\n   * })\n   *\n   *\n   * @usageNotes\n   * The constructor arguments define the response and the HTTP response status code.\n   * - The `response` argument (required) defines the JSON response body. alternatively, it can also be\n   *  an error object that is used to define an error [cause](https://nodejs.org/en/blog/release/v16.9.0/#error-cause).\n   * - The `status` argument (required) defines the HTTP Status Code.\n   * - The `options` argument (optional) defines additional error options. Currently, it supports the `cause` attribute,\n   *  and can be used as an alternative way to specify the error cause: `const error = new HttpException('description', 400, { cause: new Error() });`\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: the Http Status Code.\n   * - `message`: a short description of the HTTP error by default; override this\n   * by supplying a string in the `response` parameter.\n   *\n   * To override the entire JSON response body, pass an object to the `createBody`\n   * method. Nest will serialize the object and return it as the JSON response body.\n   *\n   * The `status` argument is required, and should be a valid HTTP status code.\n   * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.\n   *\n   * @param response string, object describing the error condition or the error cause.\n   * @param status HTTP response status code.\n   * @param options An object used to add an error cause.\n   */\n  constructor(response, status, options) {\n    super();\n    this.response = response;\n    this.status = status;\n    this.options = options;\n    this.initMessage();\n    this.initName();\n    this.initCause();\n  }\n  /**\n   * Configures error chaining support\n   *\n   * @see https://nodejs.org/en/blog/release/v16.9.0/#error-cause\n   * @see https://github.com/microsoft/TypeScript/issues/45167\n   */\n  initCause() {\n    if (this.options?.cause) {\n      this.cause = this.options.cause;\n      return;\n    }\n  }\n  initMessage() {\n    if ((0, shared_utils_1.isString)(this.response)) {\n      this.message = this.response;\n    } else if ((0, shared_utils_1.isObject)(this.response) && (0, shared_utils_1.isString)(this.response.message)) {\n      this.message = this.response.message;\n    } else if (this.constructor) {\n      this.message = this.constructor.name.match(/[A-Z][a-z]+|[0-9]+/g)?.join(' ') ?? 'Error';\n    }\n  }\n  initName() {\n    this.name = this.constructor.name;\n  }\n  getResponse() {\n    return this.response;\n  }\n  getStatus() {\n    return this.status;\n  }\n  static createBody(arg0, arg1, statusCode) {\n    if (!arg0) {\n      return {\n        message: arg1,\n        statusCode: statusCode\n      };\n    }\n    if ((0, shared_utils_1.isString)(arg0) || Array.isArray(arg0)) {\n      return {\n        message: arg0,\n        error: arg1,\n        statusCode: statusCode\n      };\n    }\n    return arg0;\n  }\n  static getDescriptionFrom(descriptionOrOptions) {\n    return (0, shared_utils_1.isString)(descriptionOrOptions) ? descriptionOrOptions : descriptionOrOptions?.description;\n  }\n  static getHttpExceptionOptionsFrom(descriptionOrOptions) {\n    return (0, shared_utils_1.isString)(descriptionOrOptions) ? {} : descriptionOrOptions;\n  }\n  /**\n   * Utility method used to extract the error description and httpExceptionOptions from the given argument.\n   * This is used by inheriting classes to correctly parse both options.\n   * @returns the error description and the httpExceptionOptions as an object.\n   */\n  static extractDescriptionAndOptionsFrom(descriptionOrOptions) {\n    const description = (0, shared_utils_1.isString)(descriptionOrOptions) ? descriptionOrOptions : descriptionOrOptions?.description;\n    const httpExceptionOptions = (0, shared_utils_1.isString)(descriptionOrOptions) ? {} : descriptionOrOptions;\n    return {\n      description,\n      httpExceptionOptions\n    };\n  }\n}\nexports.HttpException = HttpException;","map":{"version":3,"names":["Object","defineProperty","exports","value","HttpException","shared_utils_1","require","Error","constructor","response","status","options","initMessage","initName","initCause","cause","isString","message","isObject","name","match","join","getResponse","getStatus","createBody","arg0","arg1","statusCode","Array","isArray","error","getDescriptionFrom","descriptionOrOptions","description","getHttpExceptionOptionsFrom","extractDescriptionAndOptionsFrom","httpExceptionOptions"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/common/exceptions/http.exception.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpException = void 0;\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n/**\n * Defines the base Nest HTTP exception, which is handled by the default\n * Exceptions Handler.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nclass HttpException extends Error {\n    /**\n     * Instantiate a plain HTTP Exception.\n     *\n     * @example\n     * throw new HttpException('message', HttpStatus.BAD_REQUEST)\n     * throw new HttpException('custom message', HttpStatus.BAD_REQUEST, {\n     *  cause: new Error('Cause Error'),\n     * })\n     *\n     *\n     * @usageNotes\n     * The constructor arguments define the response and the HTTP response status code.\n     * - The `response` argument (required) defines the JSON response body. alternatively, it can also be\n     *  an error object that is used to define an error [cause](https://nodejs.org/en/blog/release/v16.9.0/#error-cause).\n     * - The `status` argument (required) defines the HTTP Status Code.\n     * - The `options` argument (optional) defines additional error options. Currently, it supports the `cause` attribute,\n     *  and can be used as an alternative way to specify the error cause: `const error = new HttpException('description', 400, { cause: new Error() });`\n     *\n     * By default, the JSON response body contains two properties:\n     * - `statusCode`: the Http Status Code.\n     * - `message`: a short description of the HTTP error by default; override this\n     * by supplying a string in the `response` parameter.\n     *\n     * To override the entire JSON response body, pass an object to the `createBody`\n     * method. Nest will serialize the object and return it as the JSON response body.\n     *\n     * The `status` argument is required, and should be a valid HTTP status code.\n     * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.\n     *\n     * @param response string, object describing the error condition or the error cause.\n     * @param status HTTP response status code.\n     * @param options An object used to add an error cause.\n     */\n    constructor(response, status, options) {\n        super();\n        this.response = response;\n        this.status = status;\n        this.options = options;\n        this.initMessage();\n        this.initName();\n        this.initCause();\n    }\n    /**\n     * Configures error chaining support\n     *\n     * @see https://nodejs.org/en/blog/release/v16.9.0/#error-cause\n     * @see https://github.com/microsoft/TypeScript/issues/45167\n     */\n    initCause() {\n        if (this.options?.cause) {\n            this.cause = this.options.cause;\n            return;\n        }\n    }\n    initMessage() {\n        if ((0, shared_utils_1.isString)(this.response)) {\n            this.message = this.response;\n        }\n        else if ((0, shared_utils_1.isObject)(this.response) &&\n            (0, shared_utils_1.isString)(this.response.message)) {\n            this.message = this.response.message;\n        }\n        else if (this.constructor) {\n            this.message =\n                this.constructor.name.match(/[A-Z][a-z]+|[0-9]+/g)?.join(' ') ??\n                    'Error';\n        }\n    }\n    initName() {\n        this.name = this.constructor.name;\n    }\n    getResponse() {\n        return this.response;\n    }\n    getStatus() {\n        return this.status;\n    }\n    static createBody(arg0, arg1, statusCode) {\n        if (!arg0) {\n            return {\n                message: arg1,\n                statusCode: statusCode,\n            };\n        }\n        if ((0, shared_utils_1.isString)(arg0) || Array.isArray(arg0)) {\n            return {\n                message: arg0,\n                error: arg1,\n                statusCode: statusCode,\n            };\n        }\n        return arg0;\n    }\n    static getDescriptionFrom(descriptionOrOptions) {\n        return (0, shared_utils_1.isString)(descriptionOrOptions)\n            ? descriptionOrOptions\n            : descriptionOrOptions?.description;\n    }\n    static getHttpExceptionOptionsFrom(descriptionOrOptions) {\n        return (0, shared_utils_1.isString)(descriptionOrOptions) ? {} : descriptionOrOptions;\n    }\n    /**\n     * Utility method used to extract the error description and httpExceptionOptions from the given argument.\n     * This is used by inheriting classes to correctly parse both options.\n     * @returns the error description and the httpExceptionOptions as an object.\n     */\n    static extractDescriptionAndOptionsFrom(descriptionOrOptions) {\n        const description = (0, shared_utils_1.isString)(descriptionOrOptions)\n            ? descriptionOrOptions\n            : descriptionOrOptions?.description;\n        const httpExceptionOptions = (0, shared_utils_1.isString)(descriptionOrOptions)\n            ? {}\n            : descriptionOrOptions;\n        return {\n            description,\n            httpExceptionOptions,\n        };\n    }\n}\nexports.HttpException = HttpException;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}