{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isHexadecimalValidator from 'validator/lib/isHexadecimal';\nexport const IS_HEXADECIMAL = 'isHexadecimal';\n/**\n * Checks if the string is a hexadecimal number.\n * If given value is not a string, then it returns false.\n */\nexport function isHexadecimal(value) {\n  return typeof value === 'string' && isHexadecimalValidator(value);\n}\n/**\n * Checks if the string is a hexadecimal number.\n * If given value is not a string, then it returns false.\n */\nexport function IsHexadecimal(validationOptions) {\n  return ValidateBy({\n    name: IS_HEXADECIMAL,\n    validator: {\n      validate: (value, args) => isHexadecimal(value),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a hexadecimal number', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isHexadecimalValidator","IS_HEXADECIMAL","isHexadecimal","value","IsHexadecimal","validationOptions","name","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsHexadecimal.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isHexadecimalValidator from 'validator/lib/isHexadecimal';\nexport const IS_HEXADECIMAL = 'isHexadecimal';\n/**\n * Checks if the string is a hexadecimal number.\n * If given value is not a string, then it returns false.\n */\nexport function isHexadecimal(value) {\n    return typeof value === 'string' && isHexadecimalValidator(value);\n}\n/**\n * Checks if the string is a hexadecimal number.\n * If given value is not a string, then it returns false.\n */\nexport function IsHexadecimal(validationOptions) {\n    return ValidateBy({\n        name: IS_HEXADECIMAL,\n        validator: {\n            validate: (value, args) => isHexadecimal(value),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a hexadecimal number', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,sBAAsB,MAAM,6BAA6B;AAChE,OAAO,MAAMC,cAAc,GAAG,eAAe;AAC7C;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAE;EACjC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIH,sBAAsB,CAACG,KAAK,CAAC;AACrE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,iBAAiB,EAAE;EAC7C,OAAON,UAAU,CAAC;IACdO,IAAI,EAAEL,cAAc;IACpBM,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACL,KAAK,EAAEM,IAAI,KAAKP,aAAa,CAACC,KAAK,CAAC;MAC/CO,cAAc,EAAEZ,YAAY,CAACa,UAAU,IAAIA,UAAU,GAAG,wCAAwC,EAAEN,iBAAiB;IACvH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}