{"ast":null,"code":"import { getMetadataStorage } from './metadata/MetadataStorage';\nimport { Validator } from './validation/Validator';\nimport { getFromContainer } from './container';\n// -------------------------------------------------------------------------\n// Export everything api users needs\n// -------------------------------------------------------------------------\nexport * from './container';\nexport * from './decorator/decorators';\nexport * from './decorator/ValidationOptions';\nexport * from './validation/ValidatorConstraintInterface';\nexport * from './validation/ValidationError';\nexport * from './validation/ValidatorOptions';\nexport * from './validation/ValidationArguments';\nexport * from './validation/ValidationTypes';\nexport * from './validation/Validator';\nexport * from './validation-schema/ValidationSchema';\nexport * from './register-decorator';\nexport * from './metadata/MetadataStorage';\n/**\n * Validates given object by object's decorators or given validation schema.\n */\nexport function validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Validates given object by object's decorators or given validation schema and reject on error.\n */\nexport function validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Validates given object by object's decorators or given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Registers a new validation schema.\n */\nexport function registerSchema(schema) {\n  getMetadataStorage().addValidationSchema(schema);\n}","map":{"version":3,"names":["getMetadataStorage","Validator","getFromContainer","validate","schemaNameOrObject","objectOrValidationOptions","maybeValidatorOptions","validateOrReject","validateSync","registerSchema","schema","addValidationSchema"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/index.js"],"sourcesContent":["import { getMetadataStorage } from './metadata/MetadataStorage';\nimport { Validator } from './validation/Validator';\nimport { getFromContainer } from './container';\n// -------------------------------------------------------------------------\n// Export everything api users needs\n// -------------------------------------------------------------------------\nexport * from './container';\nexport * from './decorator/decorators';\nexport * from './decorator/ValidationOptions';\nexport * from './validation/ValidatorConstraintInterface';\nexport * from './validation/ValidationError';\nexport * from './validation/ValidatorOptions';\nexport * from './validation/ValidationArguments';\nexport * from './validation/ValidationTypes';\nexport * from './validation/Validator';\nexport * from './validation-schema/ValidationSchema';\nexport * from './register-decorator';\nexport * from './metadata/MetadataStorage';\n/**\n * Validates given object by object's decorators or given validation schema.\n */\nexport function validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n    if (typeof schemaNameOrObject === 'string') {\n        return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n    }\n    else {\n        return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions);\n    }\n}\n/**\n * Validates given object by object's decorators or given validation schema and reject on error.\n */\nexport function validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n    if (typeof schemaNameOrObject === 'string') {\n        return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n    }\n    else {\n        return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions);\n    }\n}\n/**\n * Validates given object by object's decorators or given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n    if (typeof schemaNameOrObject === 'string') {\n        return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n    }\n    else {\n        return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions);\n    }\n}\n/**\n * Registers a new validation schema.\n */\nexport function registerSchema(schema) {\n    getMetadataStorage().addValidationSchema(schema);\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,4BAA4B;AAC/D,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,gBAAgB,QAAQ,aAAa;AAC9C;AACA;AACA;AACA,cAAc,aAAa;AAC3B,cAAc,wBAAwB;AACtC,cAAc,+BAA+B;AAC7C,cAAc,2CAA2C;AACzD,cAAc,8BAA8B;AAC5C,cAAc,+BAA+B;AAC7C,cAAc,kCAAkC;AAChD,cAAc,8BAA8B;AAC5C,cAAc,wBAAwB;AACtC,cAAc,sCAAsC;AACpD,cAAc,sBAAsB;AACpC,cAAc,4BAA4B;AAC1C;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,EAAE;EAC3F,IAAI,OAAOF,kBAAkB,KAAK,QAAQ,EAAE;IACxC,OAAOF,gBAAgB,CAACD,SAAS,CAAC,CAACE,QAAQ,CAACC,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,CAAC;EACrH,CAAC,MACI;IACD,OAAOJ,gBAAgB,CAACD,SAAS,CAAC,CAACE,QAAQ,CAACC,kBAAkB,EAAEC,yBAAyB,CAAC;EAC9F;AACJ;AACA;AACA;AACA;AACA,OAAO,SAASE,gBAAgBA,CAACH,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,EAAE;EACnG,IAAI,OAAOF,kBAAkB,KAAK,QAAQ,EAAE;IACxC,OAAOF,gBAAgB,CAACD,SAAS,CAAC,CAACM,gBAAgB,CAACH,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,CAAC;EAC7H,CAAC,MACI;IACD,OAAOJ,gBAAgB,CAACD,SAAS,CAAC,CAACM,gBAAgB,CAACH,kBAAkB,EAAEC,yBAAyB,CAAC;EACtG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,YAAYA,CAACJ,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,EAAE;EAC/F,IAAI,OAAOF,kBAAkB,KAAK,QAAQ,EAAE;IACxC,OAAOF,gBAAgB,CAACD,SAAS,CAAC,CAACO,YAAY,CAACJ,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,CAAC;EACzH,CAAC,MACI;IACD,OAAOJ,gBAAgB,CAACD,SAAS,CAAC,CAACO,YAAY,CAACJ,kBAAkB,EAAEC,yBAAyB,CAAC;EAClG;AACJ;AACA;AACA;AACA;AACA,OAAO,SAASI,cAAcA,CAACC,MAAM,EAAE;EACnCV,kBAAkB,CAAC,CAAC,CAACW,mBAAmB,CAACD,MAAM,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}