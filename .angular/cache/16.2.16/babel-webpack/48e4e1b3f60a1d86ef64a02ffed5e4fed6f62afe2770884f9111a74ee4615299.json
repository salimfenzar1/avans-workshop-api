{"ast":null,"code":"import * as validator from 'validator';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_STRONG_PASSWORD = 'isStrongPassword';\n/**\n * Checks if the string is a strong password.\n * If given value is not a string, then it returns false.\n */\nexport function isStrongPassword(value, options) {\n  return typeof value === 'string' && validator.isStrongPassword(value, options);\n}\n/**\n * Checks if the string is a strong password.\n * If given value is not a string, then it returns false.\n */\nexport function IsStrongPassword(options, validationOptions) {\n  return ValidateBy({\n    name: IS_STRONG_PASSWORD,\n    constraints: [options],\n    validator: {\n      validate: (value, args) => isStrongPassword(value, args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property is not strong enough', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["validator","buildMessage","ValidateBy","IS_STRONG_PASSWORD","isStrongPassword","value","options","IsStrongPassword","validationOptions","name","constraints","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsStrongPassword.js"],"sourcesContent":["import * as validator from 'validator';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport const IS_STRONG_PASSWORD = 'isStrongPassword';\n/**\n * Checks if the string is a strong password.\n * If given value is not a string, then it returns false.\n */\nexport function isStrongPassword(value, options) {\n    return typeof value === 'string' && validator.isStrongPassword(value, options);\n}\n/**\n * Checks if the string is a strong password.\n * If given value is not a string, then it returns false.\n */\nexport function IsStrongPassword(options, validationOptions) {\n    return ValidateBy({\n        name: IS_STRONG_PASSWORD,\n        constraints: [options],\n        validator: {\n            validate: (value, args) => isStrongPassword(value, args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property is not strong enough', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,SAAS,MAAM,WAAW;AACtC,SAASC,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAO,MAAMC,kBAAkB,GAAG,kBAAkB;AACpD;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,OAAO,EAAE;EAC7C,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIL,SAAS,CAACI,gBAAgB,CAACC,KAAK,EAAEC,OAAO,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACD,OAAO,EAAEE,iBAAiB,EAAE;EACzD,OAAON,UAAU,CAAC;IACdO,IAAI,EAAEN,kBAAkB;IACxBO,WAAW,EAAE,CAACJ,OAAO,CAAC;IACtBN,SAAS,EAAE;MACPW,QAAQ,EAAEA,CAACN,KAAK,EAAEO,IAAI,KAAKR,gBAAgB,CAACC,KAAK,EAAEO,IAAI,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC;MACvEG,cAAc,EAAEZ,YAAY,CAACa,UAAU,IAAIA,UAAU,GAAG,gCAAgC,EAAEN,iBAAiB;IAC/G;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}