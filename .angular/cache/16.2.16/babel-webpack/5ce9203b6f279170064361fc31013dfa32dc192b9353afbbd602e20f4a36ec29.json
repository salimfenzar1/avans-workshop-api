{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isAlphanumericValidator from 'validator/lib/isAlphanumeric';\nexport const IS_ALPHANUMERIC = 'isAlphanumeric';\n/**\n * Checks if the string contains only letters and numbers.\n * If given value is not a string, then it returns false.\n */\nexport function isAlphanumeric(value, locale) {\n  return typeof value === 'string' && isAlphanumericValidator(value, locale);\n}\n/**\n * Checks if the string contains only letters and numbers.\n * If given value is not a string, then it returns false.\n */\nexport function IsAlphanumeric(locale, validationOptions) {\n  return ValidateBy({\n    name: IS_ALPHANUMERIC,\n    constraints: [locale],\n    validator: {\n      validate: (value, args) => isAlphanumeric(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must contain only letters and numbers', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isAlphanumericValidator","IS_ALPHANUMERIC","isAlphanumeric","value","locale","IsAlphanumeric","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsAlphanumeric.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isAlphanumericValidator from 'validator/lib/isAlphanumeric';\nexport const IS_ALPHANUMERIC = 'isAlphanumeric';\n/**\n * Checks if the string contains only letters and numbers.\n * If given value is not a string, then it returns false.\n */\nexport function isAlphanumeric(value, locale) {\n    return typeof value === 'string' && isAlphanumericValidator(value, locale);\n}\n/**\n * Checks if the string contains only letters and numbers.\n * If given value is not a string, then it returns false.\n */\nexport function IsAlphanumeric(locale, validationOptions) {\n    return ValidateBy({\n        name: IS_ALPHANUMERIC,\n        constraints: [locale],\n        validator: {\n            validate: (value, args) => isAlphanumeric(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must contain only letters and numbers', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,uBAAuB,MAAM,8BAA8B;AAClE,OAAO,MAAMC,eAAe,GAAG,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC1C,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,uBAAuB,CAACG,KAAK,EAAEC,MAAM,CAAC;AAC9E;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACD,MAAM,EAAEE,iBAAiB,EAAE;EACtD,OAAOP,UAAU,CAAC;IACdQ,IAAI,EAAEN,eAAe;IACrBO,WAAW,EAAE,CAACJ,MAAM,CAAC;IACrBK,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACP,KAAK,EAAEQ,IAAI,KAAKT,cAAc,CAACC,KAAK,EAAEQ,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MACjHI,cAAc,EAAEd,YAAY,CAACe,UAAU,IAAIA,UAAU,GAAG,iDAAiD,EAAEP,iBAAiB;IAChI;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}