{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RouteInfoPathExtractor = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst utils_1 = require(\"../router/utils\");\nconst route_path_factory_1 = require(\"./../router/route-path-factory\");\nclass RouteInfoPathExtractor {\n  constructor(applicationConfig) {\n    this.applicationConfig = applicationConfig;\n    this.routePathFactory = new route_path_factory_1.RoutePathFactory(applicationConfig);\n    this.prefixPath = (0, shared_utils_1.stripEndSlash)((0, shared_utils_1.addLeadingSlash)(this.applicationConfig.getGlobalPrefix()));\n    this.excludedGlobalPrefixRoutes = this.applicationConfig.getGlobalPrefixOptions().exclude;\n    this.versioningConfig = this.applicationConfig.getVersioning();\n  }\n  extractPathsFrom({\n    path,\n    method,\n    version\n  }) {\n    const versionPaths = this.extractVersionPathFrom(version);\n    if (this.isAWildcard(path)) {\n      const entries = versionPaths.length > 0 ? versionPaths.map(versionPath => [this.prefixPath + versionPath + '$', this.prefixPath + versionPath + (0, shared_utils_1.addLeadingSlash)(path)]).flat() : this.prefixPath ? [this.prefixPath + '$', this.prefixPath + (0, shared_utils_1.addLeadingSlash)(path)] : [(0, shared_utils_1.addLeadingSlash)(path)];\n      return Array.isArray(this.excludedGlobalPrefixRoutes) ? [...entries, ...this.excludedGlobalPrefixRoutes.map(route => versionPaths + (0, shared_utils_1.addLeadingSlash)(route.path))] : entries;\n    }\n    return this.extractNonWildcardPathsFrom({\n      path,\n      method,\n      version\n    });\n  }\n  extractPathFrom(route) {\n    if (this.isAWildcard(route.path) && !route.version) {\n      return [(0, shared_utils_1.addLeadingSlash)(route.path)];\n    }\n    return this.extractNonWildcardPathsFrom(route);\n  }\n  isAWildcard(path) {\n    return ['*', '/*', '/*/', '(.*)', '/(.*)'].includes(path);\n  }\n  extractNonWildcardPathsFrom({\n    path,\n    method,\n    version\n  }) {\n    const versionPaths = this.extractVersionPathFrom(version);\n    if (Array.isArray(this.excludedGlobalPrefixRoutes) && (0, utils_1.isRouteExcluded)(this.excludedGlobalPrefixRoutes, path, method)) {\n      if (!versionPaths.length) {\n        return [(0, shared_utils_1.addLeadingSlash)(path)];\n      }\n      return versionPaths.map(versionPath => versionPath + (0, shared_utils_1.addLeadingSlash)(path));\n    }\n    if (!versionPaths.length) {\n      return [this.prefixPath + (0, shared_utils_1.addLeadingSlash)(path)];\n    }\n    return versionPaths.map(versionPath => this.prefixPath + versionPath + (0, shared_utils_1.addLeadingSlash)(path));\n  }\n  extractVersionPathFrom(versionValue) {\n    if (!versionValue || this.versioningConfig?.type !== common_1.VersioningType.URI) return [];\n    const versionPrefix = this.routePathFactory.getVersionPrefix(this.versioningConfig);\n    if (Array.isArray(versionValue)) {\n      return versionValue.map(version => (0, shared_utils_1.addLeadingSlash)(versionPrefix + version.toString()));\n    }\n    return [(0, shared_utils_1.addLeadingSlash)(versionPrefix + versionValue.toString())];\n  }\n}\nexports.RouteInfoPathExtractor = RouteInfoPathExtractor;","map":{"version":3,"names":["Object","defineProperty","exports","value","RouteInfoPathExtractor","common_1","require","shared_utils_1","utils_1","route_path_factory_1","constructor","applicationConfig","routePathFactory","RoutePathFactory","prefixPath","stripEndSlash","addLeadingSlash","getGlobalPrefix","excludedGlobalPrefixRoutes","getGlobalPrefixOptions","exclude","versioningConfig","getVersioning","extractPathsFrom","path","method","version","versionPaths","extractVersionPathFrom","isAWildcard","entries","length","map","versionPath","flat","Array","isArray","route","extractNonWildcardPathsFrom","extractPathFrom","includes","isRouteExcluded","versionValue","type","VersioningType","URI","versionPrefix","getVersionPrefix","toString"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/middleware/route-info-path-extractor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RouteInfoPathExtractor = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst utils_1 = require(\"../router/utils\");\nconst route_path_factory_1 = require(\"./../router/route-path-factory\");\nclass RouteInfoPathExtractor {\n    constructor(applicationConfig) {\n        this.applicationConfig = applicationConfig;\n        this.routePathFactory = new route_path_factory_1.RoutePathFactory(applicationConfig);\n        this.prefixPath = (0, shared_utils_1.stripEndSlash)((0, shared_utils_1.addLeadingSlash)(this.applicationConfig.getGlobalPrefix()));\n        this.excludedGlobalPrefixRoutes =\n            this.applicationConfig.getGlobalPrefixOptions().exclude;\n        this.versioningConfig = this.applicationConfig.getVersioning();\n    }\n    extractPathsFrom({ path, method, version }) {\n        const versionPaths = this.extractVersionPathFrom(version);\n        if (this.isAWildcard(path)) {\n            const entries = versionPaths.length > 0\n                ? versionPaths\n                    .map(versionPath => [\n                    this.prefixPath + versionPath + '$',\n                    this.prefixPath + versionPath + (0, shared_utils_1.addLeadingSlash)(path),\n                ])\n                    .flat()\n                : this.prefixPath\n                    ? [this.prefixPath + '$', this.prefixPath + (0, shared_utils_1.addLeadingSlash)(path)]\n                    : [(0, shared_utils_1.addLeadingSlash)(path)];\n            return Array.isArray(this.excludedGlobalPrefixRoutes)\n                ? [\n                    ...entries,\n                    ...this.excludedGlobalPrefixRoutes.map(route => versionPaths + (0, shared_utils_1.addLeadingSlash)(route.path)),\n                ]\n                : entries;\n        }\n        return this.extractNonWildcardPathsFrom({ path, method, version });\n    }\n    extractPathFrom(route) {\n        if (this.isAWildcard(route.path) && !route.version) {\n            return [(0, shared_utils_1.addLeadingSlash)(route.path)];\n        }\n        return this.extractNonWildcardPathsFrom(route);\n    }\n    isAWildcard(path) {\n        return ['*', '/*', '/*/', '(.*)', '/(.*)'].includes(path);\n    }\n    extractNonWildcardPathsFrom({ path, method, version, }) {\n        const versionPaths = this.extractVersionPathFrom(version);\n        if (Array.isArray(this.excludedGlobalPrefixRoutes) &&\n            (0, utils_1.isRouteExcluded)(this.excludedGlobalPrefixRoutes, path, method)) {\n            if (!versionPaths.length) {\n                return [(0, shared_utils_1.addLeadingSlash)(path)];\n            }\n            return versionPaths.map(versionPath => versionPath + (0, shared_utils_1.addLeadingSlash)(path));\n        }\n        if (!versionPaths.length) {\n            return [this.prefixPath + (0, shared_utils_1.addLeadingSlash)(path)];\n        }\n        return versionPaths.map(versionPath => this.prefixPath + versionPath + (0, shared_utils_1.addLeadingSlash)(path));\n    }\n    extractVersionPathFrom(versionValue) {\n        if (!versionValue || this.versioningConfig?.type !== common_1.VersioningType.URI)\n            return [];\n        const versionPrefix = this.routePathFactory.getVersionPrefix(this.versioningConfig);\n        if (Array.isArray(versionValue)) {\n            return versionValue.map(version => (0, shared_utils_1.addLeadingSlash)(versionPrefix + version.toString()));\n        }\n        return [(0, shared_utils_1.addLeadingSlash)(versionPrefix + versionValue.toString())];\n    }\n}\nexports.RouteInfoPathExtractor = RouteInfoPathExtractor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}