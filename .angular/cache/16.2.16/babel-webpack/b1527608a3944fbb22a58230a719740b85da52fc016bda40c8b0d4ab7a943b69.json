{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBase64Validator from 'validator/lib/isBase64';\nexport const IS_BASE64 = 'isBase64';\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function isBase64(value, options) {\n  return typeof value === 'string' && isBase64Validator(value, options);\n}\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function IsBase64(options, validationOptions) {\n  return ValidateBy({\n    name: IS_BASE64,\n    constraints: [options],\n    validator: {\n      validate: (value, args) => isBase64(value),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be base64 encoded', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isBase64Validator","IS_BASE64","isBase64","value","options","IsBase64","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsBase64.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBase64Validator from 'validator/lib/isBase64';\nexport const IS_BASE64 = 'isBase64';\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function isBase64(value, options) {\n    return typeof value === 'string' && isBase64Validator(value, options);\n}\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function IsBase64(options, validationOptions) {\n    return ValidateBy({\n        name: IS_BASE64,\n        constraints: [options],\n        validator: {\n            validate: (value, args) => isBase64(value),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be base64 encoded', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,iBAAiB,MAAM,wBAAwB;AACtD,OAAO,MAAMC,SAAS,GAAG,UAAU;AACnC;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACrC,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,iBAAiB,CAACG,KAAK,EAAEC,OAAO,CAAC;AACzE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACD,OAAO,EAAEE,iBAAiB,EAAE;EACjD,OAAOP,UAAU,CAAC;IACdQ,IAAI,EAAEN,SAAS;IACfO,WAAW,EAAE,CAACJ,OAAO,CAAC;IACtBK,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACP,KAAK,EAAEQ,IAAI,KAAKT,QAAQ,CAACC,KAAK,CAAC;MAC1CS,cAAc,EAAEd,YAAY,CAACe,UAAU,IAAIA,UAAU,GAAG,kCAAkC,EAAEP,iBAAiB;IACjH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}