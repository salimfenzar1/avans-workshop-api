{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isByteLengthValidator from 'validator/lib/isByteLength';\nexport const IS_BYTE_LENGTH = 'isByteLength';\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function isByteLength(value, min, max) {\n  return typeof value === 'string' && isByteLengthValidator(value, {\n    min,\n    max\n  });\n}\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function IsByteLength(min, max, validationOptions) {\n  return ValidateBy({\n    name: IS_BYTE_LENGTH,\n    constraints: [min, max],\n    validator: {\n      validate: (value, args) => isByteLength(value, args === null || args === void 0 ? void 0 : args.constraints[0], args === null || args === void 0 ? void 0 : args.constraints[1]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + \"$property's byte length must fall into ($constraint1, $constraint2) range\", validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isByteLengthValidator","IS_BYTE_LENGTH","isByteLength","value","min","max","IsByteLength","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsByteLength.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isByteLengthValidator from 'validator/lib/isByteLength';\nexport const IS_BYTE_LENGTH = 'isByteLength';\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function isByteLength(value, min, max) {\n    return typeof value === 'string' && isByteLengthValidator(value, { min, max });\n}\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function IsByteLength(min, max, validationOptions) {\n    return ValidateBy({\n        name: IS_BYTE_LENGTH,\n        constraints: [min, max],\n        validator: {\n            validate: (value, args) => isByteLength(value, args === null || args === void 0 ? void 0 : args.constraints[0], args === null || args === void 0 ? void 0 : args.constraints[1]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + \"$property's byte length must fall into ($constraint1, $constraint2) range\", validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,qBAAqB,MAAM,4BAA4B;AAC9D,OAAO,MAAMC,cAAc,GAAG,cAAc;AAC5C;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAC1C,OAAO,OAAOF,KAAK,KAAK,QAAQ,IAAIH,qBAAqB,CAACG,KAAK,EAAE;IAAEC,GAAG;IAAEC;EAAI,CAAC,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACF,GAAG,EAAEC,GAAG,EAAEE,iBAAiB,EAAE;EACtD,OAAOR,UAAU,CAAC;IACdS,IAAI,EAAEP,cAAc;IACpBQ,WAAW,EAAE,CAACL,GAAG,EAAEC,GAAG,CAAC;IACvBK,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACR,KAAK,EAAES,IAAI,KAAKV,YAAY,CAACC,KAAK,EAAES,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,EAAEG,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MAChLI,cAAc,EAAEf,YAAY,CAACgB,UAAU,IAAIA,UAAU,GAAG,2EAA2E,EAAEP,iBAAiB;IAC1J;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}