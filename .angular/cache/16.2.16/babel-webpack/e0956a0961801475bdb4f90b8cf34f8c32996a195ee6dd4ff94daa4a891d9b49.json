{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RoutePathFactory = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst utils_1 = require(\"./utils\");\nclass RoutePathFactory {\n  constructor(applicationConfig) {\n    this.applicationConfig = applicationConfig;\n  }\n  create(metadata, requestMethod) {\n    let paths = [''];\n    const versionOrVersions = this.getVersion(metadata);\n    if (versionOrVersions && metadata.versioningOptions?.type === common_1.VersioningType.URI) {\n      const versionPrefix = this.getVersionPrefix(metadata.versioningOptions);\n      if (Array.isArray(versionOrVersions)) {\n        paths = (0, common_1.flatten)(paths.map(path => versionOrVersions.map(version =>\n        // Version Neutral - Do not include version in URL\n        version === common_1.VERSION_NEUTRAL ? path : `${path}/${versionPrefix}${version}`)));\n      } else {\n        // Version Neutral - Do not include version in URL\n        if (versionOrVersions !== common_1.VERSION_NEUTRAL) {\n          paths = paths.map(path => `${path}/${versionPrefix}${versionOrVersions}`);\n        }\n      }\n    }\n    paths = this.appendToAllIfDefined(paths, metadata.modulePath);\n    paths = this.appendToAllIfDefined(paths, metadata.ctrlPath);\n    paths = this.appendToAllIfDefined(paths, metadata.methodPath);\n    if (metadata.globalPrefix) {\n      paths = paths.map(path => {\n        if (this.isExcludedFromGlobalPrefix(path, requestMethod, versionOrVersions, metadata.versioningOptions)) {\n          return path;\n        }\n        return (0, shared_utils_1.stripEndSlash)(metadata.globalPrefix || '') + path;\n      });\n    }\n    return paths.map(path => (0, shared_utils_1.addLeadingSlash)(path || '/')).map(path => path !== '/' ? (0, shared_utils_1.stripEndSlash)(path) : path);\n  }\n  getVersion(metadata) {\n    // The version will be either the path version or the controller version,\n    // with the pathVersion taking priority.\n    return metadata.methodVersion || metadata.controllerVersion;\n  }\n  getVersionPrefix(versioningOptions) {\n    const defaultPrefix = 'v';\n    if (versioningOptions.type === common_1.VersioningType.URI) {\n      if (versioningOptions.prefix === false) {\n        return '';\n      } else if (versioningOptions.prefix !== undefined) {\n        return versioningOptions.prefix;\n      }\n    }\n    return defaultPrefix;\n  }\n  appendToAllIfDefined(paths, fragmentToAppend) {\n    if (!fragmentToAppend) {\n      return paths;\n    }\n    const concatPaths = (a, b) => (0, shared_utils_1.stripEndSlash)(a) + (0, shared_utils_1.addLeadingSlash)(b);\n    if (Array.isArray(fragmentToAppend)) {\n      const paths2dArray = paths.map(path => fragmentToAppend.map(fragment => concatPaths(path, fragment)));\n      return (0, common_1.flatten)(paths2dArray);\n    }\n    return paths.map(path => concatPaths(path, fragmentToAppend));\n  }\n  isExcludedFromGlobalPrefix(path, requestMethod, versionOrVersions, versioningOptions) {\n    if ((0, shared_utils_1.isUndefined)(requestMethod)) {\n      return false;\n    }\n    const options = this.applicationConfig.getGlobalPrefixOptions();\n    const excludedRoutes = options.exclude;\n    if (versionOrVersions && versionOrVersions !== common_1.VERSION_NEUTRAL && versioningOptions?.type === common_1.VersioningType.URI) {\n      path = this.truncateVersionPrefixFromPath(path, versionOrVersions, versioningOptions);\n    }\n    return Array.isArray(excludedRoutes) && (0, utils_1.isRouteExcluded)(excludedRoutes, path, requestMethod);\n  }\n  truncateVersionPrefixFromPath(path, versionValue, versioningOptions) {\n    if (typeof versionValue !== 'string') {\n      versionValue.forEach(version => {\n        if (typeof version === 'string') {\n          path = this.truncateVersionPrefixFromPath(path, version, versioningOptions);\n        }\n      });\n      return path;\n    }\n    const prefix = `/${this.getVersionPrefix(versioningOptions)}${versionValue}`;\n    return path.startsWith(prefix) ? path.replace(prefix, '') : path;\n  }\n}\nexports.RoutePathFactory = RoutePathFactory;","map":{"version":3,"names":["Object","defineProperty","exports","value","RoutePathFactory","common_1","require","shared_utils_1","utils_1","constructor","applicationConfig","create","metadata","requestMethod","paths","versionOrVersions","getVersion","versioningOptions","type","VersioningType","URI","versionPrefix","getVersionPrefix","Array","isArray","flatten","map","path","version","VERSION_NEUTRAL","appendToAllIfDefined","modulePath","ctrlPath","methodPath","globalPrefix","isExcludedFromGlobalPrefix","stripEndSlash","addLeadingSlash","methodVersion","controllerVersion","defaultPrefix","prefix","undefined","fragmentToAppend","concatPaths","a","b","paths2dArray","fragment","isUndefined","options","getGlobalPrefixOptions","excludedRoutes","exclude","truncateVersionPrefixFromPath","isRouteExcluded","versionValue","forEach","startsWith","replace"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/core/router/route-path-factory.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RoutePathFactory = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst utils_1 = require(\"./utils\");\nclass RoutePathFactory {\n    constructor(applicationConfig) {\n        this.applicationConfig = applicationConfig;\n    }\n    create(metadata, requestMethod) {\n        let paths = [''];\n        const versionOrVersions = this.getVersion(metadata);\n        if (versionOrVersions &&\n            metadata.versioningOptions?.type === common_1.VersioningType.URI) {\n            const versionPrefix = this.getVersionPrefix(metadata.versioningOptions);\n            if (Array.isArray(versionOrVersions)) {\n                paths = (0, common_1.flatten)(paths.map(path => versionOrVersions.map(version => \n                // Version Neutral - Do not include version in URL\n                version === common_1.VERSION_NEUTRAL\n                    ? path\n                    : `${path}/${versionPrefix}${version}`)));\n            }\n            else {\n                // Version Neutral - Do not include version in URL\n                if (versionOrVersions !== common_1.VERSION_NEUTRAL) {\n                    paths = paths.map(path => `${path}/${versionPrefix}${versionOrVersions}`);\n                }\n            }\n        }\n        paths = this.appendToAllIfDefined(paths, metadata.modulePath);\n        paths = this.appendToAllIfDefined(paths, metadata.ctrlPath);\n        paths = this.appendToAllIfDefined(paths, metadata.methodPath);\n        if (metadata.globalPrefix) {\n            paths = paths.map(path => {\n                if (this.isExcludedFromGlobalPrefix(path, requestMethod, versionOrVersions, metadata.versioningOptions)) {\n                    return path;\n                }\n                return (0, shared_utils_1.stripEndSlash)(metadata.globalPrefix || '') + path;\n            });\n        }\n        return paths\n            .map(path => (0, shared_utils_1.addLeadingSlash)(path || '/'))\n            .map(path => (path !== '/' ? (0, shared_utils_1.stripEndSlash)(path) : path));\n    }\n    getVersion(metadata) {\n        // The version will be either the path version or the controller version,\n        // with the pathVersion taking priority.\n        return metadata.methodVersion || metadata.controllerVersion;\n    }\n    getVersionPrefix(versioningOptions) {\n        const defaultPrefix = 'v';\n        if (versioningOptions.type === common_1.VersioningType.URI) {\n            if (versioningOptions.prefix === false) {\n                return '';\n            }\n            else if (versioningOptions.prefix !== undefined) {\n                return versioningOptions.prefix;\n            }\n        }\n        return defaultPrefix;\n    }\n    appendToAllIfDefined(paths, fragmentToAppend) {\n        if (!fragmentToAppend) {\n            return paths;\n        }\n        const concatPaths = (a, b) => (0, shared_utils_1.stripEndSlash)(a) + (0, shared_utils_1.addLeadingSlash)(b);\n        if (Array.isArray(fragmentToAppend)) {\n            const paths2dArray = paths.map(path => fragmentToAppend.map(fragment => concatPaths(path, fragment)));\n            return (0, common_1.flatten)(paths2dArray);\n        }\n        return paths.map(path => concatPaths(path, fragmentToAppend));\n    }\n    isExcludedFromGlobalPrefix(path, requestMethod, versionOrVersions, versioningOptions) {\n        if ((0, shared_utils_1.isUndefined)(requestMethod)) {\n            return false;\n        }\n        const options = this.applicationConfig.getGlobalPrefixOptions();\n        const excludedRoutes = options.exclude;\n        if (versionOrVersions &&\n            versionOrVersions !== common_1.VERSION_NEUTRAL &&\n            versioningOptions?.type === common_1.VersioningType.URI) {\n            path = this.truncateVersionPrefixFromPath(path, versionOrVersions, versioningOptions);\n        }\n        return (Array.isArray(excludedRoutes) &&\n            (0, utils_1.isRouteExcluded)(excludedRoutes, path, requestMethod));\n    }\n    truncateVersionPrefixFromPath(path, versionValue, versioningOptions) {\n        if (typeof versionValue !== 'string') {\n            versionValue.forEach(version => {\n                if (typeof version === 'string') {\n                    path = this.truncateVersionPrefixFromPath(path, version, versioningOptions);\n                }\n            });\n            return path;\n        }\n        const prefix = `/${this.getVersionPrefix(versioningOptions)}${versionValue}`;\n        return path.startsWith(prefix) ? path.replace(prefix, '') : path;\n    }\n}\nexports.RoutePathFactory = RoutePathFactory;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}