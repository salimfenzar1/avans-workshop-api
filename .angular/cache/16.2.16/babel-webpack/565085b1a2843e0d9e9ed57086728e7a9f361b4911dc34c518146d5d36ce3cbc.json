{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIdentityCardValidator from 'validator/lib/isIdentityCard';\nexport const IS_IDENTITY_CARD = 'isIdentityCard';\n/**\n * Check if the string is a valid identity card code.\n * locale is one of ['ES', 'zh-TW', 'he-IL', 'ar-TN'] OR 'any'. If 'any' is used, function will check if any of the locals match.\n * Defaults to 'any'.\n * If given value is not a string, then it returns false.\n */\nexport function isIdentityCard(value, locale) {\n  return typeof value === 'string' && isIdentityCardValidator(value, locale);\n}\n/**\n * Check if the string is a valid identity card code.\n * locale is one of ['ES', 'zh-TW', 'he-IL', 'ar-TN'] OR 'any'. If 'any' is used, function will check if any of the locals match.\n * Defaults to 'any'.\n * If given value is not a string, then it returns false.\n */\nexport function IsIdentityCard(locale, validationOptions) {\n  return ValidateBy({\n    name: IS_IDENTITY_CARD,\n    constraints: [locale],\n    validator: {\n      validate: (value, args) => isIdentityCard(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a identity card number', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isIdentityCardValidator","IS_IDENTITY_CARD","isIdentityCard","value","locale","IsIdentityCard","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/IsIdentityCard.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIdentityCardValidator from 'validator/lib/isIdentityCard';\nexport const IS_IDENTITY_CARD = 'isIdentityCard';\n/**\n * Check if the string is a valid identity card code.\n * locale is one of ['ES', 'zh-TW', 'he-IL', 'ar-TN'] OR 'any'. If 'any' is used, function will check if any of the locals match.\n * Defaults to 'any'.\n * If given value is not a string, then it returns false.\n */\nexport function isIdentityCard(value, locale) {\n    return typeof value === 'string' && isIdentityCardValidator(value, locale);\n}\n/**\n * Check if the string is a valid identity card code.\n * locale is one of ['ES', 'zh-TW', 'he-IL', 'ar-TN'] OR 'any'. If 'any' is used, function will check if any of the locals match.\n * Defaults to 'any'.\n * If given value is not a string, then it returns false.\n */\nexport function IsIdentityCard(locale, validationOptions) {\n    return ValidateBy({\n        name: IS_IDENTITY_CARD,\n        constraints: [locale],\n        validator: {\n            validate: (value, args) => isIdentityCard(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a identity card number', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,uBAAuB,MAAM,8BAA8B;AAClE,OAAO,MAAMC,gBAAgB,GAAG,gBAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC1C,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,uBAAuB,CAACG,KAAK,EAAEC,MAAM,CAAC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACD,MAAM,EAAEE,iBAAiB,EAAE;EACtD,OAAOP,UAAU,CAAC;IACdQ,IAAI,EAAEN,gBAAgB;IACtBO,WAAW,EAAE,CAACJ,MAAM,CAAC;IACrBK,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACP,KAAK,EAAEQ,IAAI,KAAKT,cAAc,CAACC,KAAK,EAAEQ,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MACjHI,cAAc,EAAEd,YAAY,CAACe,UAAU,IAAIA,UAAU,GAAG,0CAA0C,EAAEP,iBAAiB;IACzH;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}