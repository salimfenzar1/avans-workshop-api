{"ast":null,"code":"import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n  metadata = new Metadata(metadata);\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}","map":{"version":3,"names":["Metadata","checkNumberLength","isPossiblePhoneNumber","input","options","metadata","undefined","v2","countryCallingCode","Error","selectNumberingPlan","phone","country","hasCountry","concat","possibleLengths","isPossibleNumber","nationalNumber","isNonGeographicCallingCode"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/libphonenumber-js/es6/isPossible.js"],"sourcesContent":["import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,eAAe;AACpC,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,qBAAqBA,CAACC,KAAK,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACtE;EACA,IAAID,OAAO,KAAKE,SAAS,EAAE;IACzBF,OAAO,GAAG,CAAC,CAAC;EACd;EAEAC,QAAQ,GAAG,IAAIL,QAAQ,CAACK,QAAQ,CAAC;EAEjC,IAAID,OAAO,CAACG,EAAE,EAAE;IACd,IAAI,CAACJ,KAAK,CAACK,kBAAkB,EAAE;MAC7B,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEAJ,QAAQ,CAACK,mBAAmB,CAACP,KAAK,CAACK,kBAAkB,CAAC;EACxD,CAAC,MAAM;IACL,IAAI,CAACL,KAAK,CAACQ,KAAK,EAAE;MAChB,OAAO,KAAK;IACd;IAEA,IAAIR,KAAK,CAACS,OAAO,EAAE;MACjB,IAAI,CAACP,QAAQ,CAACQ,UAAU,CAACV,KAAK,CAACS,OAAO,CAAC,EAAE;QACvC,MAAM,IAAIH,KAAK,CAAC,mBAAmB,CAACK,MAAM,CAACX,KAAK,CAACS,OAAO,CAAC,CAAC;MAC5D;MAEAP,QAAQ,CAACO,OAAO,CAACT,KAAK,CAACS,OAAO,CAAC;IACjC,CAAC,MAAM;MACL,IAAI,CAACT,KAAK,CAACK,kBAAkB,EAAE;QAC7B,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;MACvD;MAEAJ,QAAQ,CAACK,mBAAmB,CAACP,KAAK,CAACK,kBAAkB,CAAC;IACxD;EACF,CAAC,CAAC;;EAGF,IAAIH,QAAQ,CAACU,eAAe,CAAC,CAAC,EAAE;IAC9B,OAAOC,gBAAgB,CAACb,KAAK,CAACQ,KAAK,IAAIR,KAAK,CAACc,cAAc,EAAEZ,QAAQ,CAAC;EACxE,CAAC,MAAM;IACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAIF,KAAK,CAACK,kBAAkB,IAAIH,QAAQ,CAACa,0BAA0B,CAACf,KAAK,CAACK,kBAAkB,CAAC,EAAE;MAC7F;MACA;MACA,OAAO,IAAI;IACb,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,gGAAgG,CAAC;IACnH;EACF;AACF;AACA,OAAO,SAASO,gBAAgBA,CAACC,cAAc,EAAEZ,QAAQ,EAAE;EACzD;EACA,QAAQJ,iBAAiB,CAACgB,cAAc,EAAEZ,QAAQ,CAAC;IACjD,KAAK,aAAa;MAChB,OAAO,IAAI;IACb;IACA;IACA;IACA;;IAEA;MACE,OAAO,KAAK;EAChB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}