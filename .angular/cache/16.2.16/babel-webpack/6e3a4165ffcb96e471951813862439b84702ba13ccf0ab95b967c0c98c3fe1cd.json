{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseFilePipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"../../decorators/core\");\nconst enums_1 = require(\"../../enums\");\nconst http_error_by_code_util_1 = require(\"../../utils/http-error-by-code.util\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n/**\n * Defines the built-in ParseFile Pipe. This pipe can be used to validate incoming files\n * with `@UploadedFile()` decorator. You can use either other specific built-in validators\n * or provide one of your own, simply implementing it through FileValidator interface\n * and adding it to ParseFilePipe's constructor.\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseFilePipe = class ParseFilePipe {\n  constructor(options = {}) {\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = enums_1.HttpStatus.BAD_REQUEST,\n      validators = [],\n      fileIsRequired\n    } = options;\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    this.validators = validators;\n    this.fileIsRequired = fileIsRequired ?? true;\n  }\n  transform(value) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const areThereAnyFilesIn = _this.thereAreNoFilesIn(value);\n      if (areThereAnyFilesIn && _this.fileIsRequired) {\n        throw _this.exceptionFactory('File is required');\n      }\n      if (!areThereAnyFilesIn && _this.validators.length) {\n        yield _this.validateFilesOrFile(value);\n      }\n      return value;\n    })();\n  }\n  validateFilesOrFile(value) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (Array.isArray(value)) {\n        yield Promise.all(value.map(f => _this2.validate(f)));\n      } else {\n        yield _this2.validate(value);\n      }\n    })();\n  }\n  thereAreNoFilesIn(value) {\n    const isEmptyArray = Array.isArray(value) && (0, shared_utils_1.isEmpty)(value);\n    const isEmptyObject = (0, shared_utils_1.isObject)(value) && (0, shared_utils_1.isEmpty)(Object.keys(value));\n    return (0, shared_utils_1.isUndefined)(value) || isEmptyArray || isEmptyObject;\n  }\n  validate(file) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      for (const validator of _this3.validators) {\n        yield _this3.validateOrThrow(file, validator);\n      }\n      return file;\n    })();\n  }\n  validateOrThrow(file, validator) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const isValid = yield validator.isValid(file);\n      if (!isValid) {\n        const errorMessage = validator.buildErrorMessage(file);\n        throw _this4.exceptionFactory(errorMessage);\n      }\n    })();\n  }\n  /**\n   * @returns list of validators used in this pipe.\n   */\n  getValidators() {\n    return this.validators;\n  }\n};\nexports.ParseFilePipe = ParseFilePipe;\nexports.ParseFilePipe = ParseFilePipe = tslib_1.__decorate([(0, core_1.Injectable)(), tslib_1.__param(0, (0, core_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseFilePipe);","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","ParseFilePipe","tslib_1","core_1","enums_1","http_error_by_code_util_1","shared_utils_1","constructor","options","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","validators","fileIsRequired","error","HttpErrorByCode","transform","_this","areThereAnyFilesIn","thereAreNoFilesIn","length","validateFilesOrFile","_this2","Array","isArray","Promise","all","map","f","validate","isEmptyArray","isEmpty","isEmptyObject","isObject","keys","isUndefined","file","_this3","validator","validateOrThrow","_this4","isValid","errorMessage","buildErrorMessage","getValidators","__decorate","Injectable","__param","Optional","__metadata"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/common/pipes/file/parse-file.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseFilePipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"../../decorators/core\");\nconst enums_1 = require(\"../../enums\");\nconst http_error_by_code_util_1 = require(\"../../utils/http-error-by-code.util\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n/**\n * Defines the built-in ParseFile Pipe. This pipe can be used to validate incoming files\n * with `@UploadedFile()` decorator. You can use either other specific built-in validators\n * or provide one of your own, simply implementing it through FileValidator interface\n * and adding it to ParseFilePipe's constructor.\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseFilePipe = class ParseFilePipe {\n    constructor(options = {}) {\n        const { exceptionFactory, errorHttpStatusCode = enums_1.HttpStatus.BAD_REQUEST, validators = [], fileIsRequired, } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n        this.validators = validators;\n        this.fileIsRequired = fileIsRequired ?? true;\n    }\n    async transform(value) {\n        const areThereAnyFilesIn = this.thereAreNoFilesIn(value);\n        if (areThereAnyFilesIn && this.fileIsRequired) {\n            throw this.exceptionFactory('File is required');\n        }\n        if (!areThereAnyFilesIn && this.validators.length) {\n            await this.validateFilesOrFile(value);\n        }\n        return value;\n    }\n    async validateFilesOrFile(value) {\n        if (Array.isArray(value)) {\n            await Promise.all(value.map(f => this.validate(f)));\n        }\n        else {\n            await this.validate(value);\n        }\n    }\n    thereAreNoFilesIn(value) {\n        const isEmptyArray = Array.isArray(value) && (0, shared_utils_1.isEmpty)(value);\n        const isEmptyObject = (0, shared_utils_1.isObject)(value) && (0, shared_utils_1.isEmpty)(Object.keys(value));\n        return (0, shared_utils_1.isUndefined)(value) || isEmptyArray || isEmptyObject;\n    }\n    async validate(file) {\n        for (const validator of this.validators) {\n            await this.validateOrThrow(file, validator);\n        }\n        return file;\n    }\n    async validateOrThrow(file, validator) {\n        const isValid = await validator.isValid(file);\n        if (!isValid) {\n            const errorMessage = validator.buildErrorMessage(file);\n            throw this.exceptionFactory(errorMessage);\n        }\n    }\n    /**\n     * @returns list of validators used in this pipe.\n     */\n    getValidators() {\n        return this.validators;\n    }\n};\nexports.ParseFilePipe = ParseFilePipe;\nexports.ParseFilePipe = ParseFilePipe = tslib_1.__decorate([\n    (0, core_1.Injectable)(),\n    tslib_1.__param(0, (0, core_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ParseFilePipe);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}