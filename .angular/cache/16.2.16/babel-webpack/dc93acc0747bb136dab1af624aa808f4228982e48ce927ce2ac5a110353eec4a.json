{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\nexport const MAX_LENGTH = 'maxLength';\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function maxLength(value, max) {\n  return typeof value === 'string' && isLengthValidator(value, {\n    min: 0,\n    max\n  });\n}\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function MaxLength(max, validationOptions) {\n  return ValidateBy({\n    name: MAX_LENGTH,\n    constraints: [max],\n    validator: {\n      validate: (value, args) => maxLength(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n      defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be shorter than or equal to $constraint1 characters', validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"names":["buildMessage","ValidateBy","isLengthValidator","MAX_LENGTH","maxLength","value","max","min","MaxLength","validationOptions","name","constraints","validator","validate","args","defaultMessage","eachPrefix"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/decorator/string/MaxLength.js"],"sourcesContent":["import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\nexport const MAX_LENGTH = 'maxLength';\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function maxLength(value, max) {\n    return typeof value === 'string' && isLengthValidator(value, { min: 0, max });\n}\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function MaxLength(max, validationOptions) {\n    return ValidateBy({\n        name: MAX_LENGTH,\n        constraints: [max],\n        validator: {\n            validate: (value, args) => maxLength(value, args === null || args === void 0 ? void 0 : args.constraints[0]),\n            defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be shorter than or equal to $constraint1 characters', validationOptions),\n        },\n    }, validationOptions);\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,sBAAsB;AAC/D,OAAOC,iBAAiB,MAAM,wBAAwB;AACtD,OAAO,MAAMC,UAAU,GAAG,WAAW;AACrC;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,KAAK,EAAEC,GAAG,EAAE;EAClC,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIH,iBAAiB,CAACG,KAAK,EAAE;IAAEE,GAAG,EAAE,CAAC;IAAED;EAAI,CAAC,CAAC;AACjF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,SAASA,CAACF,GAAG,EAAEG,iBAAiB,EAAE;EAC9C,OAAOR,UAAU,CAAC;IACdS,IAAI,EAAEP,UAAU;IAChBQ,WAAW,EAAE,CAACL,GAAG,CAAC;IAClBM,SAAS,EAAE;MACPC,QAAQ,EAAEA,CAACR,KAAK,EAAES,IAAI,KAAKV,SAAS,CAACC,KAAK,EAAES,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC;MAC5GI,cAAc,EAAEf,YAAY,CAACgB,UAAU,IAAIA,UAAU,GAAG,oEAAoE,EAAEP,iBAAiB;IACnJ;EACJ,CAAC,EAAEA,iBAAiB,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}