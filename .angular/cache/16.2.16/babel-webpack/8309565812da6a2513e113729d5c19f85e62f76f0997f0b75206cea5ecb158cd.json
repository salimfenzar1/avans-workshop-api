{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchemaFactory = void 0;\nconst mongoose = require(\"mongoose\");\nconst type_metadata_storage_1 = require(\"../storages/type-metadata.storage\");\nconst definitions_factory_1 = require(\"./definitions.factory\");\nconst virtuals_factory_1 = require(\"./virtuals.factory\");\nclass SchemaFactory {\n  static createForClass(target) {\n    const schemaDefinition = definitions_factory_1.DefinitionsFactory.createForClass(target);\n    const schemaMetadata = type_metadata_storage_1.TypeMetadataStorage.getSchemaMetadataByTarget(target);\n    const schemaOpts = schemaMetadata?.options;\n    const schema = new mongoose.Schema(schemaDefinition, schemaOpts);\n    virtuals_factory_1.VirtualsFactory.inspect(target, schema);\n    return schema;\n  }\n}\nexports.SchemaFactory = SchemaFactory;","map":{"version":3,"names":["Object","defineProperty","exports","value","SchemaFactory","mongoose","require","type_metadata_storage_1","definitions_factory_1","virtuals_factory_1","createForClass","target","schemaDefinition","DefinitionsFactory","schemaMetadata","TypeMetadataStorage","getSchemaMetadataByTarget","schemaOpts","options","schema","Schema","VirtualsFactory","inspect"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/@nestjs/mongoose/dist/factories/schema.factory.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaFactory = void 0;\nconst mongoose = require(\"mongoose\");\nconst type_metadata_storage_1 = require(\"../storages/type-metadata.storage\");\nconst definitions_factory_1 = require(\"./definitions.factory\");\nconst virtuals_factory_1 = require(\"./virtuals.factory\");\nclass SchemaFactory {\n    static createForClass(target) {\n        const schemaDefinition = definitions_factory_1.DefinitionsFactory.createForClass(target);\n        const schemaMetadata = type_metadata_storage_1.TypeMetadataStorage.getSchemaMetadataByTarget(target);\n        const schemaOpts = schemaMetadata?.options;\n        const schema = new mongoose.Schema(schemaDefinition, schemaOpts);\n        virtuals_factory_1.VirtualsFactory.inspect(target, schema);\n        return schema;\n    }\n}\nexports.SchemaFactory = SchemaFactory;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,uBAAuB,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AAC5E,MAAME,qBAAqB,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAC9D,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACxD,MAAMF,aAAa,CAAC;EAChB,OAAOM,cAAcA,CAACC,MAAM,EAAE;IAC1B,MAAMC,gBAAgB,GAAGJ,qBAAqB,CAACK,kBAAkB,CAACH,cAAc,CAACC,MAAM,CAAC;IACxF,MAAMG,cAAc,GAAGP,uBAAuB,CAACQ,mBAAmB,CAACC,yBAAyB,CAACL,MAAM,CAAC;IACpG,MAAMM,UAAU,GAAGH,cAAc,EAAEI,OAAO;IAC1C,MAAMC,MAAM,GAAG,IAAId,QAAQ,CAACe,MAAM,CAACR,gBAAgB,EAAEK,UAAU,CAAC;IAChER,kBAAkB,CAACY,eAAe,CAACC,OAAO,CAACX,MAAM,EAAEQ,MAAM,CAAC;IAC1D,OAAOA,MAAM;EACjB;AACJ;AACAjB,OAAO,CAACE,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}