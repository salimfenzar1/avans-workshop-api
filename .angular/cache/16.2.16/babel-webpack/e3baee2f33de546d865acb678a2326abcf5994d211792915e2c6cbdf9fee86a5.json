{"ast":null,"code":"import { ValidationExecutor } from './ValidationExecutor';\n/**\n * Validator performs validation of the given object based on its metadata.\n */\nexport class Validator {\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  validate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n  }\n  /**\n   * Performs validation of the given object based on decorators or validation schema and reject on error.\n   */\n  async validateOrReject(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    const errors = await this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n    if (errors.length) return Promise.reject(errors);\n  }\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  validateSync(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    const object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n    const options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n    const executor = new ValidationExecutor(this, options);\n    executor.ignoreAsyncValidations = true;\n    const validationErrors = [];\n    executor.execute(object, schema, validationErrors);\n    return executor.stripEmptyErrors(validationErrors);\n  }\n  // -------------------------------------------------------------------------\n  // Private Properties\n  // -------------------------------------------------------------------------\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   * Common method for `validateOrReject` and `validate` methods.\n   */\n  coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    const object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n    const options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n    const executor = new ValidationExecutor(this, options);\n    const validationErrors = [];\n    executor.execute(object, schema, validationErrors);\n    return Promise.all(executor.awaitingPromises).then(() => {\n      return executor.stripEmptyErrors(validationErrors);\n    });\n  }\n}","map":{"version":3,"names":["ValidationExecutor","Validator","validate","objectOrSchemaName","objectOrValidationOptions","maybeValidatorOptions","coreValidate","validateOrReject","errors","length","Promise","reject","validateSync","object","options","schema","undefined","executor","ignoreAsyncValidations","validationErrors","execute","stripEmptyErrors","all","awaitingPromises","then"],"sources":["C:/Users/salim/Dev/avans-nx-workshop-2024/avans-nx-workshop/node_modules/class-validator/esm2015/validation/Validator.js"],"sourcesContent":["import { ValidationExecutor } from './ValidationExecutor';\n/**\n * Validator performs validation of the given object based on its metadata.\n */\nexport class Validator {\n    /**\n     * Performs validation of the given object based on decorators or validation schema.\n     */\n    validate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n        return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n    }\n    /**\n     * Performs validation of the given object based on decorators or validation schema and reject on error.\n     */\n    async validateOrReject(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n        const errors = await this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n        if (errors.length)\n            return Promise.reject(errors);\n    }\n    /**\n     * Performs validation of the given object based on decorators or validation schema.\n     */\n    validateSync(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n        const object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n        const options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n        const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n        const executor = new ValidationExecutor(this, options);\n        executor.ignoreAsyncValidations = true;\n        const validationErrors = [];\n        executor.execute(object, schema, validationErrors);\n        return executor.stripEmptyErrors(validationErrors);\n    }\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n    /**\n     * Performs validation of the given object based on decorators or validation schema.\n     * Common method for `validateOrReject` and `validate` methods.\n     */\n    coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n        const object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n        const options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n        const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n        const executor = new ValidationExecutor(this, options);\n        const validationErrors = [];\n        executor.execute(object, schema, validationErrors);\n        return Promise.all(executor.awaitingPromises).then(() => {\n            return executor.stripEmptyErrors(validationErrors);\n        });\n    }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,sBAAsB;AACzD;AACA;AACA;AACA,OAAO,MAAMC,SAAS,CAAC;EACnB;AACJ;AACA;EACIC,QAAQA,CAACC,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,EAAE;IAC3E,OAAO,IAAI,CAACC,YAAY,CAACH,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,CAAC;EAClG;EACA;AACJ;AACA;EACI,MAAME,gBAAgBA,CAACJ,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,EAAE;IACzF,MAAMG,MAAM,GAAG,MAAM,IAAI,CAACF,YAAY,CAACH,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,CAAC;IAC5G,IAAIG,MAAM,CAACC,MAAM,EACb,OAAOC,OAAO,CAACC,MAAM,CAACH,MAAM,CAAC;EACrC;EACA;AACJ;AACA;EACII,YAAYA,CAACT,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,EAAE;IAC/E,MAAMQ,MAAM,GAAG,OAAOV,kBAAkB,KAAK,QAAQ,GAAGC,yBAAyB,GAAGD,kBAAkB;IACtG,MAAMW,OAAO,GAAG,OAAOX,kBAAkB,KAAK,QAAQ,GAAGE,qBAAqB,GAAGD,yBAAyB;IAC1G,MAAMW,MAAM,GAAG,OAAOZ,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGa,SAAS;IACtF,MAAMC,QAAQ,GAAG,IAAIjB,kBAAkB,CAAC,IAAI,EAAEc,OAAO,CAAC;IACtDG,QAAQ,CAACC,sBAAsB,GAAG,IAAI;IACtC,MAAMC,gBAAgB,GAAG,EAAE;IAC3BF,QAAQ,CAACG,OAAO,CAACP,MAAM,EAAEE,MAAM,EAAEI,gBAAgB,CAAC;IAClD,OAAOF,QAAQ,CAACI,gBAAgB,CAACF,gBAAgB,CAAC;EACtD;EACA;EACA;EACA;EACA;AACJ;AACA;AACA;EACIb,YAAYA,CAACH,kBAAkB,EAAEC,yBAAyB,EAAEC,qBAAqB,EAAE;IAC/E,MAAMQ,MAAM,GAAG,OAAOV,kBAAkB,KAAK,QAAQ,GAAGC,yBAAyB,GAAGD,kBAAkB;IACtG,MAAMW,OAAO,GAAG,OAAOX,kBAAkB,KAAK,QAAQ,GAAGE,qBAAqB,GAAGD,yBAAyB;IAC1G,MAAMW,MAAM,GAAG,OAAOZ,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGa,SAAS;IACtF,MAAMC,QAAQ,GAAG,IAAIjB,kBAAkB,CAAC,IAAI,EAAEc,OAAO,CAAC;IACtD,MAAMK,gBAAgB,GAAG,EAAE;IAC3BF,QAAQ,CAACG,OAAO,CAACP,MAAM,EAAEE,MAAM,EAAEI,gBAAgB,CAAC;IAClD,OAAOT,OAAO,CAACY,GAAG,CAACL,QAAQ,CAACM,gBAAgB,CAAC,CAACC,IAAI,CAAC,MAAM;MACrD,OAAOP,QAAQ,CAACI,gBAAgB,CAACF,gBAAgB,CAAC;IACtD,CAAC,CAAC;EACN;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}